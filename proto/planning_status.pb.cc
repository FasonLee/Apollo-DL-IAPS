// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_status.proto

#include "planning_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_planning_5fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BareIntersectionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChangeLaneStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreepDeciderStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DestinationStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParkAndGoStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathDeciderStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PullOverStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReroutingStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopSignStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopTime;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_YieldSignStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CrosswalkStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeedDeciderStatus;
}  // namespace protobuf_planning_5fstatus_2eproto
namespace apollo {
namespace planning {
class BareIntersectionStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BareIntersectionStatus>
      _instance;
} _BareIntersectionStatus_default_instance_;
class ChangeLaneStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeLaneStatus>
      _instance;
} _ChangeLaneStatus_default_instance_;
class CreepDeciderStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreepDeciderStatus>
      _instance;
} _CreepDeciderStatus_default_instance_;
class StopTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopTime>
      _instance;
} _StopTime_default_instance_;
class CrosswalkStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrosswalkStatus>
      _instance;
} _CrosswalkStatus_default_instance_;
class DestinationStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestinationStatus>
      _instance;
} _DestinationStatus_default_instance_;
class OpenSpaceStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceStatus>
      _instance;
} _OpenSpaceStatus_default_instance_;
class ParkAndGoStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkAndGoStatus>
      _instance;
} _ParkAndGoStatus_default_instance_;
class PathDeciderStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathDeciderStatus>
      _instance;
} _PathDeciderStatus_default_instance_;
class PullOverStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullOverStatus>
      _instance;
} _PullOverStatus_default_instance_;
class ReroutingStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReroutingStatus>
      _instance;
} _ReroutingStatus_default_instance_;
class SpeedDeciderStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedDeciderStatus>
      _instance;
} _SpeedDeciderStatus_default_instance_;
class StopSignStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopSignStatus>
      _instance;
} _StopSignStatus_default_instance_;
class TrafficLightStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightStatus>
      _instance;
} _TrafficLightStatus_default_instance_;
class YieldSignStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YieldSignStatus>
      _instance;
} _YieldSignStatus_default_instance_;
class PlanningStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningStatus>
      _instance;
} _PlanningStatus_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_planning_5fstatus_2eproto {
static void InitDefaultsBareIntersectionStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_BareIntersectionStatus_default_instance_;
    new (ptr) ::apollo::planning::BareIntersectionStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::BareIntersectionStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BareIntersectionStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBareIntersectionStatus}, {}};

static void InitDefaultsChangeLaneStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ChangeLaneStatus_default_instance_;
    new (ptr) ::apollo::planning::ChangeLaneStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ChangeLaneStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeLaneStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeLaneStatus}, {}};

static void InitDefaultsCreepDeciderStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CreepDeciderStatus_default_instance_;
    new (ptr) ::apollo::planning::CreepDeciderStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CreepDeciderStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreepDeciderStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreepDeciderStatus}, {}};

static void InitDefaultsStopTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StopTime_default_instance_;
    new (ptr) ::apollo::planning::StopTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StopTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopTime}, {}};

static void InitDefaultsCrosswalkStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CrosswalkStatus_default_instance_;
    new (ptr) ::apollo::planning::CrosswalkStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CrosswalkStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CrosswalkStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCrosswalkStatus}, {
      &protobuf_planning_5fstatus_2eproto::scc_info_StopTime.base,}};

static void InitDefaultsDestinationStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DestinationStatus_default_instance_;
    new (ptr) ::apollo::planning::DestinationStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DestinationStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DestinationStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDestinationStatus}, {}};

static void InitDefaultsOpenSpaceStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceStatus_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenSpaceStatus}, {}};

static void InitDefaultsParkAndGoStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ParkAndGoStatus_default_instance_;
    new (ptr) ::apollo::planning::ParkAndGoStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ParkAndGoStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ParkAndGoStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParkAndGoStatus}, {}};

static void InitDefaultsPathDeciderStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathDeciderStatus_default_instance_;
    new (ptr) ::apollo::planning::PathDeciderStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathDeciderStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathDeciderStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathDeciderStatus}, {}};

static void InitDefaultsPullOverStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PullOverStatus_default_instance_;
    new (ptr) ::apollo::planning::PullOverStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PullOverStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PullOverStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPullOverStatus}, {}};

static void InitDefaultsReroutingStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReroutingStatus_default_instance_;
    new (ptr) ::apollo::planning::ReroutingStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReroutingStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReroutingStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReroutingStatus}, {}};

static void InitDefaultsSpeedDeciderStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SpeedDeciderStatus_default_instance_;
    new (ptr) ::apollo::planning::SpeedDeciderStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SpeedDeciderStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedDeciderStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedDeciderStatus}, {
      &protobuf_planning_5fstatus_2eproto::scc_info_StopTime.base,}};

static void InitDefaultsStopSignStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StopSignStatus_default_instance_;
    new (ptr) ::apollo::planning::StopSignStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StopSignStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopSignStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopSignStatus}, {}};

static void InitDefaultsTrafficLightStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficLightStatus_default_instance_;
    new (ptr) ::apollo::planning::TrafficLightStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficLightStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLightStatus}, {}};

static void InitDefaultsYieldSignStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_YieldSignStatus_default_instance_;
    new (ptr) ::apollo::planning::YieldSignStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::YieldSignStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_YieldSignStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsYieldSignStatus}, {}};

static void InitDefaultsPlanningStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningStatus_default_instance_;
    new (ptr) ::apollo::planning::PlanningStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<14> scc_info_PlanningStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsPlanningStatus}, {
      &protobuf_planning_5fstatus_2eproto::scc_info_BareIntersectionStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_ChangeLaneStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_CreepDeciderStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_CrosswalkStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_DestinationStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_OpenSpaceStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_ParkAndGoStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_PathDeciderStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_PullOverStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_ReroutingStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_SpeedDeciderStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_StopSignStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_TrafficLightStatus.base,
      &protobuf_planning_5fstatus_2eproto::scc_info_YieldSignStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BareIntersectionStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeLaneStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreepDeciderStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrosswalkStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DestinationStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpaceStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParkAndGoStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathDeciderStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PullOverStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReroutingStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedDeciderStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopSignStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_YieldSignStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningStatus.base);
}

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, current_pnc_junction_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, done_pnc_junction_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, clear_counter_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, path_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, exist_lane_change_start_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, last_succeed_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, is_current_opt_succeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, is_clear_to_change_lane_),
  6,
  0,
  1,
  3,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderStatus, creep_clear_counter_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopTime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopTime, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopTime, stop_timestamp_sec_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, crosswalk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, stop_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, finished_crosswalk_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DestinationStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DestinationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DestinationStatus, has_passed_destination_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceStatus, partitioned_trajectories_index_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceStatus, position_init_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ParkAndGoStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ParkAndGoStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ParkAndGoStatus, adc_init_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ParkAndGoStatus, in_check_stage_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, front_static_obstacle_cycle_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, able_to_use_self_lane_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, is_in_path_lane_borrow_scenario_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, front_static_obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderStatus, decided_side_pass_direction_),
  1,
  2,
  3,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, pull_over_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, plan_pull_over_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, length_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, length_back_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, width_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PullOverStatus, width_right_),
  6,
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingStatus, last_rerouting_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingStatus, need_rerouting_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedDeciderStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedDeciderStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedDeciderStatus, pedestrian_stop_time_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignStatus, current_stop_sign_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignStatus, done_stop_sign_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignStatus, wait_for_obstacle_id_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, current_traffic_light_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, done_traffic_light_overlap_id_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignStatus, current_yield_sign_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignStatus, done_yield_sign_overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignStatus, wait_for_obstacle_id_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, bare_intersection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, change_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, creep_decider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, open_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, park_and_go_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, path_decider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, pull_over_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, rerouting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, speed_decider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningStatus, yield_sign_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::planning::BareIntersectionStatus)},
  { 11, 23, sizeof(::apollo::planning::ChangeLaneStatus)},
  { 30, 36, sizeof(::apollo::planning::CreepDeciderStatus)},
  { 37, 44, sizeof(::apollo::planning::StopTime)},
  { 46, 54, sizeof(::apollo::planning::CrosswalkStatus)},
  { 57, 63, sizeof(::apollo::planning::DestinationStatus)},
  { 64, 71, sizeof(::apollo::planning::OpenSpaceStatus)},
  { 73, 80, sizeof(::apollo::planning::ParkAndGoStatus)},
  { 82, 92, sizeof(::apollo::planning::PathDeciderStatus)},
  { 97, 109, sizeof(::apollo::planning::PullOverStatus)},
  { 116, 123, sizeof(::apollo::planning::ReroutingStatus)},
  { 125, 131, sizeof(::apollo::planning::SpeedDeciderStatus)},
  { 132, 140, sizeof(::apollo::planning::StopSignStatus)},
  { 143, 150, sizeof(::apollo::planning::TrafficLightStatus)},
  { 152, 160, sizeof(::apollo::planning::YieldSignStatus)},
  { 163, 182, sizeof(::apollo::planning::PlanningStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_BareIntersectionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ChangeLaneStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CreepDeciderStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_StopTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CrosswalkStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DestinationStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpaceStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ParkAndGoStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathDeciderStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PullOverStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ReroutingStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_SpeedDeciderStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_StopSignStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrafficLightStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_YieldSignStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlanningStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planning_status.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025planning_status.proto\022\017apollo.planning"
      "\"~\n\026BareIntersectionStatus\022\'\n\037current_pn"
      "c_junction_overlap_id\030\001 \001(\t\022$\n\034done_pnc_"
      "junction_overlap_id\030\002 \001(\t\022\025\n\rclear_count"
      "er\030\003 \001(\r\"\340\002\n\020ChangeLaneStatus\0228\n\006status\030"
      "\001 \001(\0162(.apollo.planning.ChangeLaneStatus"
      ".Status\022\017\n\007path_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 "
      "\001(\001\022/\n exist_lane_change_start_position\030"
      "\004 \001(\010:\005false\022\036\n\026last_succeed_timestamp\030\006"
      " \001(\001\022%\n\026is_current_opt_succeed\030\007 \001(\010:\005fa"
      "lse\022&\n\027is_clear_to_change_lane\030\010 \001(\010:\005fa"
      "lse\"N\n\006Status\022\022\n\016IN_CHANGE_LANE\020\001\022\026\n\022CHA"
      "NGE_LANE_FAILED\020\002\022\030\n\024CHANGE_LANE_FINISHE"
      "D\020\003\"1\n\022CreepDeciderStatus\022\033\n\023creep_clear"
      "_counter\030\001 \001(\r\";\n\010StopTime\022\023\n\013obstacle_i"
      "d\030\001 \001(\t\022\032\n\022stop_timestamp_sec\030\002 \001(\001\"q\n\017C"
      "rosswalkStatus\022\024\n\014crosswalk_id\030\001 \001(\t\022,\n\t"
      "stop_time\030\002 \003(\0132\031.apollo.planning.StopTi"
      "me\022\032\n\022finished_crosswalk\030\003 \003(\t\":\n\021Destin"
      "ationStatus\022%\n\026has_passed_destination\030\001 "
      "\001(\010:\005false\"_\n\017OpenSpaceStatus\022.\n&partiti"
      "oned_trajectories_index_history\030\001 \003(\t\022\034\n"
      "\rposition_init\030\002 \001(\010:\005false\"C\n\017ParkAndGo"
      "Status\022\030\n\020adc_init_heading\030\002 \001(\001\022\026\n\016in_c"
      "heck_stage\030\003 \001(\010\"\330\002\n\021PathDeciderStatus\022."
      "\n#front_static_obstacle_cycle_counter\030\001 "
      "\001(\005:\0010\022(\n\035able_to_use_self_lane_counter\030"
      "\002 \001(\005:\0010\022.\n\037is_in_path_lane_borrow_scena"
      "rio\030\003 \001(\010:\005false\022\"\n\030front_static_obstacl"
      "e_id\030\004 \001(\t:\000\022[\n\033decided_side_pass_direct"
      "ion\030\005 \003(\01626.apollo.planning.PathDeciderS"
      "tatus.LaneBorrowDirection\"8\n\023LaneBorrowD"
      "irection\022\017\n\013LEFT_BORROW\020\001\022\020\n\014RIGHT_BORRO"
      "W\020\002\"\225\002\n\016PullOverStatus\022D\n\016pull_over_type"
      "\030\001 \001(\0162,.apollo.planning.PullOverStatus."
      "PullOverType\022\"\n\023plan_pull_over_path\030\002 \001("
      "\010:\005false\022\r\n\005theta\030\004 \001(\001\022\024\n\014length_front\030"
      "\005 \001(\001\022\023\n\013length_back\030\006 \001(\001\022\022\n\nwidth_left"
      "\030\007 \001(\001\022\023\n\013width_right\030\010 \001(\001\"6\n\014PullOverT"
      "ype\022\r\n\tPULL_OVER\020\001\022\027\n\023EMERGENCY_PULL_OVE"
      "R\020\002\"M\n\017ReroutingStatus\022\033\n\023last_rerouting"
      "_time\030\001 \001(\001\022\035\n\016need_rerouting\030\002 \001(\010:\005fal"
      "se\"M\n\022SpeedDeciderStatus\0227\n\024pedestrian_s"
      "top_time\030\001 \003(\0132\031.apollo.planning.StopTim"
      "e\"w\n\016StopSignStatus\022$\n\034current_stop_sign"
      "_overlap_id\030\001 \001(\t\022!\n\031done_stop_sign_over"
      "lap_id\030\002 \001(\t\022\034\n\024wait_for_obstacle_id\030\003 \003"
      "(\t\"e\n\022TrafficLightStatus\022(\n current_traf"
      "fic_light_overlap_id\030\001 \003(\t\022%\n\035done_traff"
      "ic_light_overlap_id\030\002 \003(\t\"z\n\017YieldSignSt"
      "atus\022%\n\035current_yield_sign_overlap_id\030\001 "
      "\003(\t\022\"\n\032done_yield_sign_overlap_id\030\002 \003(\t\022"
      "\034\n\024wait_for_obstacle_id\030\003 \003(\t\"\250\006\n\016Planni"
      "ngStatus\022B\n\021bare_intersection\030\001 \001(\0132\'.ap"
      "ollo.planning.BareIntersectionStatus\0226\n\013"
      "change_lane\030\002 \001(\0132!.apollo.planning.Chan"
      "geLaneStatus\022:\n\rcreep_decider\030\003 \001(\0132#.ap"
      "ollo.planning.CreepDeciderStatus\0223\n\tcros"
      "swalk\030\004 \001(\0132 .apollo.planning.CrosswalkS"
      "tatus\0227\n\013destination\030\005 \001(\0132\".apollo.plan"
      "ning.DestinationStatus\0224\n\nopen_space\030\007 \001"
      "(\0132 .apollo.planning.OpenSpaceStatus\0225\n\013"
      "park_and_go\030\010 \001(\0132 .apollo.planning.Park"
      "AndGoStatus\0228\n\014path_decider\030\t \001(\0132\".apol"
      "lo.planning.PathDeciderStatus\0222\n\tpull_ov"
      "er\030\n \001(\0132\037.apollo.planning.PullOverStatu"
      "s\0223\n\trerouting\030\013 \001(\0132 .apollo.planning.R"
      "eroutingStatus\022:\n\rspeed_decider\030\r \001(\0132#."
      "apollo.planning.SpeedDeciderStatus\0222\n\tst"
      "op_sign\030\016 \001(\0132\037.apollo.planning.StopSign"
      "Status\022:\n\rtraffic_light\030\017 \001(\0132#.apollo.p"
      "lanning.TrafficLightStatus\0224\n\nyield_sign"
      "\030\020 \001(\0132 .apollo.planning.YieldSignStatus"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2920);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning_status.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_5fstatus_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* ChangeLaneStatus_Status_descriptor() {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planning_5fstatus_2eproto::file_level_enum_descriptors[0];
}
bool ChangeLaneStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeLaneStatus_Status ChangeLaneStatus::IN_CHANGE_LANE;
const ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_FAILED;
const ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_FINISHED;
const ChangeLaneStatus_Status ChangeLaneStatus::Status_MIN;
const ChangeLaneStatus_Status ChangeLaneStatus::Status_MAX;
const int ChangeLaneStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PathDeciderStatus_LaneBorrowDirection_descriptor() {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planning_5fstatus_2eproto::file_level_enum_descriptors[1];
}
bool PathDeciderStatus_LaneBorrowDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathDeciderStatus_LaneBorrowDirection PathDeciderStatus::LEFT_BORROW;
const PathDeciderStatus_LaneBorrowDirection PathDeciderStatus::RIGHT_BORROW;
const PathDeciderStatus_LaneBorrowDirection PathDeciderStatus::LaneBorrowDirection_MIN;
const PathDeciderStatus_LaneBorrowDirection PathDeciderStatus::LaneBorrowDirection_MAX;
const int PathDeciderStatus::LaneBorrowDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PullOverStatus_PullOverType_descriptor() {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planning_5fstatus_2eproto::file_level_enum_descriptors[2];
}
bool PullOverStatus_PullOverType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PullOverStatus_PullOverType PullOverStatus::PULL_OVER;
const PullOverStatus_PullOverType PullOverStatus::EMERGENCY_PULL_OVER;
const PullOverStatus_PullOverType PullOverStatus::PullOverType_MIN;
const PullOverStatus_PullOverType PullOverStatus::PullOverType_MAX;
const int PullOverStatus::PullOverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BareIntersectionStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BareIntersectionStatus::kCurrentPncJunctionOverlapIdFieldNumber;
const int BareIntersectionStatus::kDonePncJunctionOverlapIdFieldNumber;
const int BareIntersectionStatus::kClearCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BareIntersectionStatus::BareIntersectionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_BareIntersectionStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.BareIntersectionStatus)
}
BareIntersectionStatus::BareIntersectionStatus(const BareIntersectionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_pnc_junction_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_pnc_junction_overlap_id()) {
    current_pnc_junction_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_pnc_junction_overlap_id_);
  }
  done_pnc_junction_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_done_pnc_junction_overlap_id()) {
    done_pnc_junction_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.done_pnc_junction_overlap_id_);
  }
  clear_counter_ = from.clear_counter_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.BareIntersectionStatus)
}

void BareIntersectionStatus::SharedCtor() {
  current_pnc_junction_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_pnc_junction_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_counter_ = 0u;
}

BareIntersectionStatus::~BareIntersectionStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.BareIntersectionStatus)
  SharedDtor();
}

void BareIntersectionStatus::SharedDtor() {
  current_pnc_junction_overlap_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_pnc_junction_overlap_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BareIntersectionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BareIntersectionStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BareIntersectionStatus& BareIntersectionStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_BareIntersectionStatus.base);
  return *internal_default_instance();
}


void BareIntersectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.BareIntersectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      current_pnc_junction_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      done_pnc_junction_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  clear_counter_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BareIntersectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.BareIntersectionStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string current_pnc_junction_overlap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_pnc_junction_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_pnc_junction_overlap_id().data(), static_cast<int>(this->current_pnc_junction_overlap_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.BareIntersectionStatus.current_pnc_junction_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string done_pnc_junction_overlap_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_done_pnc_junction_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->done_pnc_junction_overlap_id().data(), static_cast<int>(this->done_pnc_junction_overlap_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.BareIntersectionStatus.done_pnc_junction_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clear_counter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clear_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.BareIntersectionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.BareIntersectionStatus)
  return false;
#undef DO_
}

void BareIntersectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.BareIntersectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_pnc_junction_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_pnc_junction_overlap_id().data(), static_cast<int>(this->current_pnc_junction_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.BareIntersectionStatus.current_pnc_junction_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->current_pnc_junction_overlap_id(), output);
  }

  // optional string done_pnc_junction_overlap_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_pnc_junction_overlap_id().data(), static_cast<int>(this->done_pnc_junction_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.BareIntersectionStatus.done_pnc_junction_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->done_pnc_junction_overlap_id(), output);
  }

  // optional uint32 clear_counter = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clear_counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.BareIntersectionStatus)
}

::google::protobuf::uint8* BareIntersectionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.BareIntersectionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_pnc_junction_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_pnc_junction_overlap_id().data(), static_cast<int>(this->current_pnc_junction_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.BareIntersectionStatus.current_pnc_junction_overlap_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->current_pnc_junction_overlap_id(), target);
  }

  // optional string done_pnc_junction_overlap_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_pnc_junction_overlap_id().data(), static_cast<int>(this->done_pnc_junction_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.BareIntersectionStatus.done_pnc_junction_overlap_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->done_pnc_junction_overlap_id(), target);
  }

  // optional uint32 clear_counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clear_counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.BareIntersectionStatus)
  return target;
}

size_t BareIntersectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.BareIntersectionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string current_pnc_junction_overlap_id = 1;
    if (has_current_pnc_junction_overlap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_pnc_junction_overlap_id());
    }

    // optional string done_pnc_junction_overlap_id = 2;
    if (has_done_pnc_junction_overlap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->done_pnc_junction_overlap_id());
    }

    // optional uint32 clear_counter = 3;
    if (has_clear_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clear_counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BareIntersectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.BareIntersectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BareIntersectionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BareIntersectionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.BareIntersectionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.BareIntersectionStatus)
    MergeFrom(*source);
  }
}

void BareIntersectionStatus::MergeFrom(const BareIntersectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.BareIntersectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_current_pnc_junction_overlap_id();
      current_pnc_junction_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_pnc_junction_overlap_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_done_pnc_junction_overlap_id();
      done_pnc_junction_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.done_pnc_junction_overlap_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      clear_counter_ = from.clear_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BareIntersectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.BareIntersectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BareIntersectionStatus::CopyFrom(const BareIntersectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.BareIntersectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BareIntersectionStatus::IsInitialized() const {
  return true;
}

void BareIntersectionStatus::Swap(BareIntersectionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BareIntersectionStatus::InternalSwap(BareIntersectionStatus* other) {
  using std::swap;
  current_pnc_junction_overlap_id_.Swap(&other->current_pnc_junction_overlap_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  done_pnc_junction_overlap_id_.Swap(&other->done_pnc_junction_overlap_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clear_counter_, other->clear_counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BareIntersectionStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeLaneStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeLaneStatus::kStatusFieldNumber;
const int ChangeLaneStatus::kPathIdFieldNumber;
const int ChangeLaneStatus::kTimestampFieldNumber;
const int ChangeLaneStatus::kExistLaneChangeStartPositionFieldNumber;
const int ChangeLaneStatus::kLastSucceedTimestampFieldNumber;
const int ChangeLaneStatus::kIsCurrentOptSucceedFieldNumber;
const int ChangeLaneStatus::kIsClearToChangeLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeLaneStatus::ChangeLaneStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_ChangeLaneStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ChangeLaneStatus)
}
ChangeLaneStatus::ChangeLaneStatus(const ChangeLaneStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path_id()) {
    path_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChangeLaneStatus)
}

void ChangeLaneStatus::SharedCtor() {
  path_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_clear_to_change_lane_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(is_clear_to_change_lane_));
  status_ = 1;
}

ChangeLaneStatus::~ChangeLaneStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChangeLaneStatus)
  SharedDtor();
}

void ChangeLaneStatus::SharedDtor() {
  path_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeLaneStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangeLaneStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeLaneStatus& ChangeLaneStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_ChangeLaneStatus.base);
  return *internal_default_instance();
}


void ChangeLaneStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChangeLaneStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_clear_to_change_lane_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(is_clear_to_change_lane_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeLaneStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ChangeLaneStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ChangeLaneStatus_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::planning::ChangeLaneStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path_id().data(), static_cast<int>(this->path_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.ChangeLaneStatus.path_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exist_lane_change_start_position = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_exist_lane_change_start_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_lane_change_start_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double last_succeed_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_last_succeed_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_succeed_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_current_opt_succeed = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_current_opt_succeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_current_opt_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_clear_to_change_lane = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_clear_to_change_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_clear_to_change_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ChangeLaneStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ChangeLaneStatus)
  return false;
#undef DO_
}

void ChangeLaneStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ChangeLaneStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string path_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_id().data(), static_cast<int>(this->path_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ChangeLaneStatus.path_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path_id(), output);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // optional bool exist_lane_change_start_position = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->exist_lane_change_start_position(), output);
  }

  // optional double last_succeed_timestamp = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->last_succeed_timestamp(), output);
  }

  // optional bool is_current_opt_succeed = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_current_opt_succeed(), output);
  }

  // optional bool is_clear_to_change_lane = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_clear_to_change_lane(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ChangeLaneStatus)
}

::google::protobuf::uint8* ChangeLaneStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChangeLaneStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string path_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path_id().data(), static_cast<int>(this->path_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ChangeLaneStatus.path_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_id(), target);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // optional bool exist_lane_change_start_position = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->exist_lane_change_start_position(), target);
  }

  // optional double last_succeed_timestamp = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->last_succeed_timestamp(), target);
  }

  // optional bool is_current_opt_succeed = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_current_opt_succeed(), target);
  }

  // optional bool is_clear_to_change_lane = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_clear_to_change_lane(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChangeLaneStatus)
  return target;
}

size_t ChangeLaneStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChangeLaneStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string path_id = 2;
    if (has_path_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_id());
    }

    // optional double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double last_succeed_timestamp = 6;
    if (has_last_succeed_timestamp()) {
      total_size += 1 + 8;
    }

    // optional bool exist_lane_change_start_position = 4 [default = false];
    if (has_exist_lane_change_start_position()) {
      total_size += 1 + 1;
    }

    // optional bool is_current_opt_succeed = 7 [default = false];
    if (has_is_current_opt_succeed()) {
      total_size += 1 + 1;
    }

    // optional bool is_clear_to_change_lane = 8 [default = false];
    if (has_is_clear_to_change_lane()) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeLaneStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ChangeLaneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLaneStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeLaneStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ChangeLaneStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ChangeLaneStatus)
    MergeFrom(*source);
  }
}

void ChangeLaneStatus::MergeFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChangeLaneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path_id();
      path_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_succeed_timestamp_ = from.last_succeed_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      exist_lane_change_start_position_ = from.exist_lane_change_start_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_current_opt_succeed_ = from.is_current_opt_succeed_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_clear_to_change_lane_ = from.is_clear_to_change_lane_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeLaneStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneStatus::CopyFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneStatus::IsInitialized() const {
  return true;
}

void ChangeLaneStatus::Swap(ChangeLaneStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeLaneStatus::InternalSwap(ChangeLaneStatus* other) {
  using std::swap;
  path_id_.Swap(&other->path_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(last_succeed_timestamp_, other->last_succeed_timestamp_);
  swap(exist_lane_change_start_position_, other->exist_lane_change_start_position_);
  swap(is_current_opt_succeed_, other->is_current_opt_succeed_);
  swap(is_clear_to_change_lane_, other->is_clear_to_change_lane_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeLaneStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreepDeciderStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreepDeciderStatus::kCreepClearCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreepDeciderStatus::CreepDeciderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_CreepDeciderStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CreepDeciderStatus)
}
CreepDeciderStatus::CreepDeciderStatus(const CreepDeciderStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creep_clear_counter_ = from.creep_clear_counter_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CreepDeciderStatus)
}

void CreepDeciderStatus::SharedCtor() {
  creep_clear_counter_ = 0u;
}

CreepDeciderStatus::~CreepDeciderStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.CreepDeciderStatus)
  SharedDtor();
}

void CreepDeciderStatus::SharedDtor() {
}

void CreepDeciderStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreepDeciderStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreepDeciderStatus& CreepDeciderStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_CreepDeciderStatus.base);
  return *internal_default_instance();
}


void CreepDeciderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CreepDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  creep_clear_counter_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreepDeciderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CreepDeciderStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 creep_clear_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_creep_clear_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creep_clear_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CreepDeciderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CreepDeciderStatus)
  return false;
#undef DO_
}

void CreepDeciderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CreepDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 creep_clear_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creep_clear_counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CreepDeciderStatus)
}

::google::protobuf::uint8* CreepDeciderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CreepDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 creep_clear_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->creep_clear_counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CreepDeciderStatus)
  return target;
}

size_t CreepDeciderStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CreepDeciderStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 creep_clear_counter = 1;
  if (has_creep_clear_counter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->creep_clear_counter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreepDeciderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CreepDeciderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CreepDeciderStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreepDeciderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CreepDeciderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CreepDeciderStatus)
    MergeFrom(*source);
  }
}

void CreepDeciderStatus::MergeFrom(const CreepDeciderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CreepDeciderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_creep_clear_counter()) {
    set_creep_clear_counter(from.creep_clear_counter());
  }
}

void CreepDeciderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CreepDeciderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreepDeciderStatus::CopyFrom(const CreepDeciderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CreepDeciderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreepDeciderStatus::IsInitialized() const {
  return true;
}

void CreepDeciderStatus::Swap(CreepDeciderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreepDeciderStatus::InternalSwap(CreepDeciderStatus* other) {
  using std::swap;
  swap(creep_clear_counter_, other->creep_clear_counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreepDeciderStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopTime::kObstacleIdFieldNumber;
const int StopTime::kStopTimestampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopTime::StopTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_StopTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopTime)
}
StopTime::StopTime(const StopTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_obstacle_id()) {
    obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
  }
  stop_timestamp_sec_ = from.stop_timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopTime)
}

void StopTime::SharedCtor() {
  obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_timestamp_sec_ = 0;
}

StopTime::~StopTime() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopTime)
  SharedDtor();
}

void StopTime::SharedDtor() {
  obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopTime::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopTime& StopTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_StopTime.base);
  return *internal_default_instance();
}


void StopTime::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obstacle_id_.ClearNonDefaultToEmptyNoArena();
  }
  stop_timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string obstacle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obstacle_id().data(), static_cast<int>(this->obstacle_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopTime.obstacle_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_timestamp_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_stop_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopTime)
  return false;
#undef DO_
}

void StopTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string obstacle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), static_cast<int>(this->obstacle_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopTime.obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obstacle_id(), output);
  }

  // optional double stop_timestamp_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_timestamp_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopTime)
}

::google::protobuf::uint8* StopTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string obstacle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obstacle_id().data(), static_cast<int>(this->obstacle_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopTime.obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obstacle_id(), target);
  }

  // optional double stop_timestamp_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_timestamp_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopTime)
  return target;
}

size_t StopTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string obstacle_id = 1;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obstacle_id());
    }

    // optional double stop_timestamp_sec = 2;
    if (has_stop_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopTime)
  GOOGLE_DCHECK_NE(&from, this);
  const StopTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopTime)
    MergeFrom(*source);
  }
}

void StopTime::MergeFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_obstacle_id();
      obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      stop_timestamp_sec_ = from.stop_timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTime::CopyFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTime::IsInitialized() const {
  return true;
}

void StopTime::Swap(StopTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopTime::InternalSwap(StopTime* other) {
  using std::swap;
  obstacle_id_.Swap(&other->obstacle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stop_timestamp_sec_, other->stop_timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopTime::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CrosswalkStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkStatus::kCrosswalkIdFieldNumber;
const int CrosswalkStatus::kStopTimeFieldNumber;
const int CrosswalkStatus::kFinishedCrosswalkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkStatus::CrosswalkStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_CrosswalkStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CrosswalkStatus)
}
CrosswalkStatus::CrosswalkStatus(const CrosswalkStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stop_time_(from.stop_time_),
      finished_crosswalk_(from.finished_crosswalk_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crosswalk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_crosswalk_id()) {
    crosswalk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crosswalk_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkStatus)
}

void CrosswalkStatus::SharedCtor() {
  crosswalk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CrosswalkStatus::~CrosswalkStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkStatus)
  SharedDtor();
}

void CrosswalkStatus::SharedDtor() {
  crosswalk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrosswalkStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CrosswalkStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrosswalkStatus& CrosswalkStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_CrosswalkStatus.base);
  return *internal_default_instance();
}


void CrosswalkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_time_.Clear();
  finished_crosswalk_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    crosswalk_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrosswalkStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CrosswalkStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crosswalk_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crosswalk_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crosswalk_id().data(), static_cast<int>(this->crosswalk_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.CrosswalkStatus.crosswalk_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.StopTime stop_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string finished_crosswalk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_finished_crosswalk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->finished_crosswalk(this->finished_crosswalk_size() - 1).data(),
            static_cast<int>(this->finished_crosswalk(this->finished_crosswalk_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.CrosswalkStatus.finished_crosswalk");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CrosswalkStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CrosswalkStatus)
  return false;
#undef DO_
}

void CrosswalkStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CrosswalkStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string crosswalk_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk_id().data(), static_cast<int>(this->crosswalk_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.crosswalk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crosswalk_id(), output);
  }

  // repeated .apollo.planning.StopTime stop_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stop_time(static_cast<int>(i)),
      output);
  }

  // repeated string finished_crosswalk = 3;
  for (int i = 0, n = this->finished_crosswalk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->finished_crosswalk(i).data(), static_cast<int>(this->finished_crosswalk(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.finished_crosswalk");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->finished_crosswalk(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CrosswalkStatus)
}

::google::protobuf::uint8* CrosswalkStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string crosswalk_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk_id().data(), static_cast<int>(this->crosswalk_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.crosswalk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crosswalk_id(), target);
  }

  // repeated .apollo.planning.StopTime stop_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stop_time(static_cast<int>(i)), deterministic, target);
  }

  // repeated string finished_crosswalk = 3;
  for (int i = 0, n = this->finished_crosswalk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->finished_crosswalk(i).data(), static_cast<int>(this->finished_crosswalk(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.finished_crosswalk");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->finished_crosswalk(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkStatus)
  return target;
}

size_t CrosswalkStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.StopTime stop_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_time(static_cast<int>(i)));
    }
  }

  // repeated string finished_crosswalk = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->finished_crosswalk_size());
  for (int i = 0, n = this->finished_crosswalk_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->finished_crosswalk(i));
  }

  // optional string crosswalk_id = 1;
  if (has_crosswalk_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->crosswalk_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CrosswalkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CrosswalkStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CrosswalkStatus)
    MergeFrom(*source);
  }
}

void CrosswalkStatus::MergeFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_time_.MergeFrom(from.stop_time_);
  finished_crosswalk_.MergeFrom(from.finished_crosswalk_);
  if (from.has_crosswalk_id()) {
    set_has_crosswalk_id();
    crosswalk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crosswalk_id_);
  }
}

void CrosswalkStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkStatus::CopyFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkStatus::IsInitialized() const {
  return true;
}

void CrosswalkStatus::Swap(CrosswalkStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkStatus::InternalSwap(CrosswalkStatus* other) {
  using std::swap;
  CastToBase(&stop_time_)->InternalSwap(CastToBase(&other->stop_time_));
  finished_crosswalk_.InternalSwap(CastToBase(&other->finished_crosswalk_));
  crosswalk_id_.Swap(&other->crosswalk_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CrosswalkStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DestinationStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestinationStatus::kHasPassedDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestinationStatus::DestinationStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_DestinationStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DestinationStatus)
}
DestinationStatus::DestinationStatus(const DestinationStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_passed_destination_ = from.has_passed_destination_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationStatus)
}

void DestinationStatus::SharedCtor() {
  has_passed_destination_ = false;
}

DestinationStatus::~DestinationStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationStatus)
  SharedDtor();
}

void DestinationStatus::SharedDtor() {
}

void DestinationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DestinationStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestinationStatus& DestinationStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_DestinationStatus.base);
  return *internal_default_instance();
}


void DestinationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_passed_destination_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestinationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DestinationStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_passed_destination = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_has_passed_destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_passed_destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DestinationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DestinationStatus)
  return false;
#undef DO_
}

void DestinationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DestinationStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_passed_destination = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_passed_destination(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DestinationStatus)
}

::google::protobuf::uint8* DestinationStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_passed_destination = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_passed_destination(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationStatus)
  return target;
}

size_t DestinationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool has_passed_destination = 1 [default = false];
  if (has_has_passed_destination()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestinationStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DestinationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DestinationStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestinationStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DestinationStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DestinationStatus)
    MergeFrom(*source);
  }
}

void DestinationStatus::MergeFrom(const DestinationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_has_passed_destination()) {
    set_has_passed_destination(from.has_passed_destination());
  }
}

void DestinationStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DestinationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationStatus::CopyFrom(const DestinationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationStatus::IsInitialized() const {
  return true;
}

void DestinationStatus::Swap(DestinationStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestinationStatus::InternalSwap(DestinationStatus* other) {
  using std::swap;
  swap(has_passed_destination_, other->has_passed_destination_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DestinationStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenSpaceStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceStatus::kPartitionedTrajectoriesIndexHistoryFieldNumber;
const int OpenSpaceStatus::kPositionInitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceStatus::OpenSpaceStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_OpenSpaceStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceStatus)
}
OpenSpaceStatus::OpenSpaceStatus(const OpenSpaceStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      partitioned_trajectories_index_history_(from.partitioned_trajectories_index_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_init_ = from.position_init_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceStatus)
}

void OpenSpaceStatus::SharedCtor() {
  position_init_ = false;
}

OpenSpaceStatus::~OpenSpaceStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceStatus)
  SharedDtor();
}

void OpenSpaceStatus::SharedDtor() {
}

void OpenSpaceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpaceStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceStatus& OpenSpaceStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_OpenSpaceStatus.base);
  return *internal_default_instance();
}


void OpenSpaceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitioned_trajectories_index_history_.Clear();
  position_init_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpaceStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string partitioned_trajectories_index_history = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_partitioned_trajectories_index_history()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partitioned_trajectories_index_history(this->partitioned_trajectories_index_history_size() - 1).data(),
            static_cast<int>(this->partitioned_trajectories_index_history(this->partitioned_trajectories_index_history_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.OpenSpaceStatus.partitioned_trajectories_index_history");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool position_init = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_position_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &position_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpaceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpaceStatus)
  return false;
#undef DO_
}

void OpenSpaceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpaceStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string partitioned_trajectories_index_history = 1;
  for (int i = 0, n = this->partitioned_trajectories_index_history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partitioned_trajectories_index_history(i).data(), static_cast<int>(this->partitioned_trajectories_index_history(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.OpenSpaceStatus.partitioned_trajectories_index_history");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->partitioned_trajectories_index_history(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool position_init = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->position_init(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpaceStatus)
}

::google::protobuf::uint8* OpenSpaceStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string partitioned_trajectories_index_history = 1;
  for (int i = 0, n = this->partitioned_trajectories_index_history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partitioned_trajectories_index_history(i).data(), static_cast<int>(this->partitioned_trajectories_index_history(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.OpenSpaceStatus.partitioned_trajectories_index_history");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->partitioned_trajectories_index_history(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool position_init = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->position_init(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceStatus)
  return target;
}

size_t OpenSpaceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string partitioned_trajectories_index_history = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partitioned_trajectories_index_history_size());
  for (int i = 0, n = this->partitioned_trajectories_index_history_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->partitioned_trajectories_index_history(i));
  }

  // optional bool position_init = 2 [default = false];
  if (has_position_init()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceStatus)
    MergeFrom(*source);
  }
}

void OpenSpaceStatus::MergeFrom(const OpenSpaceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitioned_trajectories_index_history_.MergeFrom(from.partitioned_trajectories_index_history_);
  if (from.has_position_init()) {
    set_position_init(from.position_init());
  }
}

void OpenSpaceStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceStatus::CopyFrom(const OpenSpaceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceStatus::IsInitialized() const {
  return true;
}

void OpenSpaceStatus::Swap(OpenSpaceStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceStatus::InternalSwap(OpenSpaceStatus* other) {
  using std::swap;
  partitioned_trajectories_index_history_.InternalSwap(CastToBase(&other->partitioned_trajectories_index_history_));
  swap(position_init_, other->position_init_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpaceStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkAndGoStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkAndGoStatus::kAdcInitHeadingFieldNumber;
const int ParkAndGoStatus::kInCheckStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkAndGoStatus::ParkAndGoStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_ParkAndGoStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ParkAndGoStatus)
}
ParkAndGoStatus::ParkAndGoStatus(const ParkAndGoStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_init_heading_, &from.adc_init_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_check_stage_) -
    reinterpret_cast<char*>(&adc_init_heading_)) + sizeof(in_check_stage_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ParkAndGoStatus)
}

void ParkAndGoStatus::SharedCtor() {
  ::memset(&adc_init_heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_check_stage_) -
      reinterpret_cast<char*>(&adc_init_heading_)) + sizeof(in_check_stage_));
}

ParkAndGoStatus::~ParkAndGoStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ParkAndGoStatus)
  SharedDtor();
}

void ParkAndGoStatus::SharedDtor() {
}

void ParkAndGoStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkAndGoStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkAndGoStatus& ParkAndGoStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_ParkAndGoStatus.base);
  return *internal_default_instance();
}


void ParkAndGoStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ParkAndGoStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&adc_init_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_check_stage_) -
        reinterpret_cast<char*>(&adc_init_heading_)) + sizeof(in_check_stage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkAndGoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ParkAndGoStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double adc_init_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_adc_init_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_init_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_check_stage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_in_check_stage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_check_stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ParkAndGoStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ParkAndGoStatus)
  return false;
#undef DO_
}

void ParkAndGoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ParkAndGoStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_init_heading = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->adc_init_heading(), output);
  }

  // optional bool in_check_stage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_check_stage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ParkAndGoStatus)
}

::google::protobuf::uint8* ParkAndGoStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ParkAndGoStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_init_heading = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->adc_init_heading(), target);
  }

  // optional bool in_check_stage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_check_stage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ParkAndGoStatus)
  return target;
}

size_t ParkAndGoStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ParkAndGoStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double adc_init_heading = 2;
    if (has_adc_init_heading()) {
      total_size += 1 + 8;
    }

    // optional bool in_check_stage = 3;
    if (has_in_check_stage()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkAndGoStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ParkAndGoStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkAndGoStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkAndGoStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ParkAndGoStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ParkAndGoStatus)
    MergeFrom(*source);
  }
}

void ParkAndGoStatus::MergeFrom(const ParkAndGoStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ParkAndGoStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      adc_init_heading_ = from.adc_init_heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_check_stage_ = from.in_check_stage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkAndGoStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ParkAndGoStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkAndGoStatus::CopyFrom(const ParkAndGoStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ParkAndGoStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkAndGoStatus::IsInitialized() const {
  return true;
}

void ParkAndGoStatus::Swap(ParkAndGoStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkAndGoStatus::InternalSwap(ParkAndGoStatus* other) {
  using std::swap;
  swap(adc_init_heading_, other->adc_init_heading_);
  swap(in_check_stage_, other->in_check_stage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkAndGoStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathDeciderStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathDeciderStatus::kFrontStaticObstacleCycleCounterFieldNumber;
const int PathDeciderStatus::kAbleToUseSelfLaneCounterFieldNumber;
const int PathDeciderStatus::kIsInPathLaneBorrowScenarioFieldNumber;
const int PathDeciderStatus::kFrontStaticObstacleIdFieldNumber;
const int PathDeciderStatus::kDecidedSidePassDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathDeciderStatus::PathDeciderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_PathDeciderStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathDeciderStatus)
}
PathDeciderStatus::PathDeciderStatus(const PathDeciderStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      decided_side_pass_direction_(from.decided_side_pass_direction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  front_static_obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_front_static_obstacle_id()) {
    front_static_obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.front_static_obstacle_id_);
  }
  ::memcpy(&front_static_obstacle_cycle_counter_, &from.front_static_obstacle_cycle_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_in_path_lane_borrow_scenario_) -
    reinterpret_cast<char*>(&front_static_obstacle_cycle_counter_)) + sizeof(is_in_path_lane_borrow_scenario_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathDeciderStatus)
}

void PathDeciderStatus::SharedCtor() {
  front_static_obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_static_obstacle_cycle_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_path_lane_borrow_scenario_) -
      reinterpret_cast<char*>(&front_static_obstacle_cycle_counter_)) + sizeof(is_in_path_lane_borrow_scenario_));
}

PathDeciderStatus::~PathDeciderStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathDeciderStatus)
  SharedDtor();
}

void PathDeciderStatus::SharedDtor() {
  front_static_obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PathDeciderStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathDeciderStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathDeciderStatus& PathDeciderStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_PathDeciderStatus.base);
  return *internal_default_instance();
}


void PathDeciderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decided_side_pass_direction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    front_static_obstacle_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&front_static_obstacle_cycle_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_in_path_lane_borrow_scenario_) -
        reinterpret_cast<char*>(&front_static_obstacle_cycle_counter_)) + sizeof(is_in_path_lane_borrow_scenario_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathDeciderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathDeciderStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 front_static_obstacle_cycle_counter = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_front_static_obstacle_cycle_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_static_obstacle_cycle_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 able_to_use_self_lane_counter = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_able_to_use_self_lane_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &able_to_use_self_lane_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_in_path_lane_borrow_scenario = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_in_path_lane_borrow_scenario();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_path_lane_borrow_scenario_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string front_static_obstacle_id = 4 [default = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_front_static_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->front_static_obstacle_id().data(), static_cast<int>(this->front_static_obstacle_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.PathDeciderStatus.front_static_obstacle_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.PathDeciderStatus.LaneBorrowDirection decided_side_pass_direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PathDeciderStatus_LaneBorrowDirection_IsValid(value)) {
            add_decided_side_pass_direction(static_cast< ::apollo::planning::PathDeciderStatus_LaneBorrowDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::apollo::planning::PathDeciderStatus_LaneBorrowDirection_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_decided_side_pass_direction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathDeciderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathDeciderStatus)
  return false;
#undef DO_
}

void PathDeciderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 front_static_obstacle_cycle_counter = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->front_static_obstacle_cycle_counter(), output);
  }

  // optional int32 able_to_use_self_lane_counter = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->able_to_use_self_lane_counter(), output);
  }

  // optional bool is_in_path_lane_borrow_scenario = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_in_path_lane_borrow_scenario(), output);
  }

  // optional string front_static_obstacle_id = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->front_static_obstacle_id().data(), static_cast<int>(this->front_static_obstacle_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathDeciderStatus.front_static_obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->front_static_obstacle_id(), output);
  }

  // repeated .apollo.planning.PathDeciderStatus.LaneBorrowDirection decided_side_pass_direction = 5;
  for (int i = 0, n = this->decided_side_pass_direction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->decided_side_pass_direction(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathDeciderStatus)
}

::google::protobuf::uint8* PathDeciderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 front_static_obstacle_cycle_counter = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->front_static_obstacle_cycle_counter(), target);
  }

  // optional int32 able_to_use_self_lane_counter = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->able_to_use_self_lane_counter(), target);
  }

  // optional bool is_in_path_lane_borrow_scenario = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_in_path_lane_borrow_scenario(), target);
  }

  // optional string front_static_obstacle_id = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->front_static_obstacle_id().data(), static_cast<int>(this->front_static_obstacle_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathDeciderStatus.front_static_obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->front_static_obstacle_id(), target);
  }

  // repeated .apollo.planning.PathDeciderStatus.LaneBorrowDirection decided_side_pass_direction = 5;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    5, this->decided_side_pass_direction_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathDeciderStatus)
  return target;
}

size_t PathDeciderStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathDeciderStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.PathDeciderStatus.LaneBorrowDirection decided_side_pass_direction = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->decided_side_pass_direction_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->decided_side_pass_direction(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string front_static_obstacle_id = 4 [default = ""];
    if (has_front_static_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->front_static_obstacle_id());
    }

    // optional int32 front_static_obstacle_cycle_counter = 1 [default = 0];
    if (has_front_static_obstacle_cycle_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_static_obstacle_cycle_counter());
    }

    // optional int32 able_to_use_self_lane_counter = 2 [default = 0];
    if (has_able_to_use_self_lane_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->able_to_use_self_lane_counter());
    }

    // optional bool is_in_path_lane_borrow_scenario = 3 [default = false];
    if (has_is_in_path_lane_borrow_scenario()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathDeciderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathDeciderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PathDeciderStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathDeciderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathDeciderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathDeciderStatus)
    MergeFrom(*source);
  }
}

void PathDeciderStatus::MergeFrom(const PathDeciderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathDeciderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decided_side_pass_direction_.MergeFrom(from.decided_side_pass_direction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_front_static_obstacle_id();
      front_static_obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.front_static_obstacle_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      front_static_obstacle_cycle_counter_ = from.front_static_obstacle_cycle_counter_;
    }
    if (cached_has_bits & 0x00000004u) {
      able_to_use_self_lane_counter_ = from.able_to_use_self_lane_counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_in_path_lane_borrow_scenario_ = from.is_in_path_lane_borrow_scenario_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathDeciderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathDeciderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathDeciderStatus::CopyFrom(const PathDeciderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathDeciderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathDeciderStatus::IsInitialized() const {
  return true;
}

void PathDeciderStatus::Swap(PathDeciderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathDeciderStatus::InternalSwap(PathDeciderStatus* other) {
  using std::swap;
  decided_side_pass_direction_.InternalSwap(&other->decided_side_pass_direction_);
  front_static_obstacle_id_.Swap(&other->front_static_obstacle_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_static_obstacle_cycle_counter_, other->front_static_obstacle_cycle_counter_);
  swap(able_to_use_self_lane_counter_, other->able_to_use_self_lane_counter_);
  swap(is_in_path_lane_borrow_scenario_, other->is_in_path_lane_borrow_scenario_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathDeciderStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PullOverStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullOverStatus::kPullOverTypeFieldNumber;
const int PullOverStatus::kPlanPullOverPathFieldNumber;
const int PullOverStatus::kThetaFieldNumber;
const int PullOverStatus::kLengthFrontFieldNumber;
const int PullOverStatus::kLengthBackFieldNumber;
const int PullOverStatus::kWidthLeftFieldNumber;
const int PullOverStatus::kWidthRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullOverStatus::PullOverStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_PullOverStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PullOverStatus)
}
PullOverStatus::PullOverStatus(const PullOverStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_over_type_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(pull_over_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PullOverStatus)
}

void PullOverStatus::SharedCtor() {
  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plan_pull_over_path_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(plan_pull_over_path_));
  pull_over_type_ = 1;
}

PullOverStatus::~PullOverStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PullOverStatus)
  SharedDtor();
}

void PullOverStatus::SharedDtor() {
}

void PullOverStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PullOverStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PullOverStatus& PullOverStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_PullOverStatus.base);
  return *internal_default_instance();
}


void PullOverStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PullOverStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plan_pull_over_path_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(plan_pull_over_path_));
    pull_over_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PullOverStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PullOverStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PullOverStatus.PullOverType pull_over_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PullOverStatus_PullOverType_IsValid(value)) {
            set_pull_over_type(static_cast< ::apollo::planning::PullOverStatus_PullOverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool plan_pull_over_path = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_plan_pull_over_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &plan_pull_over_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length_front = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_length_front();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length_back = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_length_back();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width_left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_width_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width_right = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_width_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PullOverStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PullOverStatus)
  return false;
#undef DO_
}

void PullOverStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PullOverStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PullOverStatus.PullOverType pull_over_type = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pull_over_type(), output);
  }

  // optional bool plan_pull_over_path = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->plan_pull_over_path(), output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double length_front = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length_front(), output);
  }

  // optional double length_back = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length_back(), output);
  }

  // optional double width_left = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width_left(), output);
  }

  // optional double width_right = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->width_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PullOverStatus)
}

::google::protobuf::uint8* PullOverStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PullOverStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PullOverStatus.PullOverType pull_over_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pull_over_type(), target);
  }

  // optional bool plan_pull_over_path = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->plan_pull_over_path(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double length_front = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length_front(), target);
  }

  // optional double length_back = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length_back(), target);
  }

  // optional double width_left = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width_left(), target);
  }

  // optional double width_right = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->width_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PullOverStatus)
  return target;
}

size_t PullOverStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PullOverStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length_front = 5;
    if (has_length_front()) {
      total_size += 1 + 8;
    }

    // optional double length_back = 6;
    if (has_length_back()) {
      total_size += 1 + 8;
    }

    // optional double width_left = 7;
    if (has_width_left()) {
      total_size += 1 + 8;
    }

    // optional double width_right = 8;
    if (has_width_right()) {
      total_size += 1 + 8;
    }

    // optional bool plan_pull_over_path = 2 [default = false];
    if (has_plan_pull_over_path()) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.PullOverStatus.PullOverType pull_over_type = 1;
    if (has_pull_over_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pull_over_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullOverStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PullOverStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PullOverStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullOverStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PullOverStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PullOverStatus)
    MergeFrom(*source);
  }
}

void PullOverStatus::MergeFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PullOverStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_front_ = from.length_front_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_back_ = from.length_back_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_left_ = from.width_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_right_ = from.width_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      plan_pull_over_path_ = from.plan_pull_over_path_;
    }
    if (cached_has_bits & 0x00000040u) {
      pull_over_type_ = from.pull_over_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PullOverStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullOverStatus::CopyFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullOverStatus::IsInitialized() const {
  return true;
}

void PullOverStatus::Swap(PullOverStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullOverStatus::InternalSwap(PullOverStatus* other) {
  using std::swap;
  swap(theta_, other->theta_);
  swap(length_front_, other->length_front_);
  swap(length_back_, other->length_back_);
  swap(width_left_, other->width_left_);
  swap(width_right_, other->width_right_);
  swap(plan_pull_over_path_, other->plan_pull_over_path_);
  swap(pull_over_type_, other->pull_over_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PullOverStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReroutingStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReroutingStatus::kLastReroutingTimeFieldNumber;
const int ReroutingStatus::kNeedReroutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReroutingStatus::ReroutingStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_ReroutingStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReroutingStatus)
}
ReroutingStatus::ReroutingStatus(const ReroutingStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_rerouting_time_, &from.last_rerouting_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_rerouting_) -
    reinterpret_cast<char*>(&last_rerouting_time_)) + sizeof(need_rerouting_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingStatus)
}

void ReroutingStatus::SharedCtor() {
  ::memset(&last_rerouting_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_rerouting_) -
      reinterpret_cast<char*>(&last_rerouting_time_)) + sizeof(need_rerouting_));
}

ReroutingStatus::~ReroutingStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingStatus)
  SharedDtor();
}

void ReroutingStatus::SharedDtor() {
}

void ReroutingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReroutingStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReroutingStatus& ReroutingStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_ReroutingStatus.base);
  return *internal_default_instance();
}


void ReroutingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_rerouting_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&need_rerouting_) -
        reinterpret_cast<char*>(&last_rerouting_time_)) + sizeof(need_rerouting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReroutingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReroutingStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double last_rerouting_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_last_rerouting_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_rerouting_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_rerouting = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_need_rerouting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_rerouting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReroutingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReroutingStatus)
  return false;
#undef DO_
}

void ReroutingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReroutingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double last_rerouting_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->last_rerouting_time(), output);
  }

  // optional bool need_rerouting = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->need_rerouting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReroutingStatus)
}

::google::protobuf::uint8* ReroutingStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double last_rerouting_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->last_rerouting_time(), target);
  }

  // optional bool need_rerouting = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->need_rerouting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingStatus)
  return target;
}

size_t ReroutingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double last_rerouting_time = 1;
    if (has_last_rerouting_time()) {
      total_size += 1 + 8;
    }

    // optional bool need_rerouting = 2 [default = false];
    if (has_need_rerouting()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReroutingStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReroutingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ReroutingStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReroutingStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReroutingStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReroutingStatus)
    MergeFrom(*source);
  }
}

void ReroutingStatus::MergeFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_rerouting_time_ = from.last_rerouting_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      need_rerouting_ = from.need_rerouting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReroutingStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingStatus::CopyFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingStatus::IsInitialized() const {
  return true;
}

void ReroutingStatus::Swap(ReroutingStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReroutingStatus::InternalSwap(ReroutingStatus* other) {
  using std::swap;
  swap(last_rerouting_time_, other->last_rerouting_time_);
  swap(need_rerouting_, other->need_rerouting_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReroutingStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedDeciderStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedDeciderStatus::kPedestrianStopTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedDeciderStatus::SpeedDeciderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_SpeedDeciderStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpeedDeciderStatus)
}
SpeedDeciderStatus::SpeedDeciderStatus(const SpeedDeciderStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pedestrian_stop_time_(from.pedestrian_stop_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpeedDeciderStatus)
}

void SpeedDeciderStatus::SharedCtor() {
}

SpeedDeciderStatus::~SpeedDeciderStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpeedDeciderStatus)
  SharedDtor();
}

void SpeedDeciderStatus::SharedDtor() {
}

void SpeedDeciderStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedDeciderStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedDeciderStatus& SpeedDeciderStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_SpeedDeciderStatus.base);
  return *internal_default_instance();
}


void SpeedDeciderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpeedDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pedestrian_stop_time_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedDeciderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SpeedDeciderStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.StopTime pedestrian_stop_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pedestrian_stop_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SpeedDeciderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SpeedDeciderStatus)
  return false;
#undef DO_
}

void SpeedDeciderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SpeedDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.StopTime pedestrian_stop_time = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pedestrian_stop_time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pedestrian_stop_time(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SpeedDeciderStatus)
}

::google::protobuf::uint8* SpeedDeciderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpeedDeciderStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.StopTime pedestrian_stop_time = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pedestrian_stop_time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pedestrian_stop_time(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpeedDeciderStatus)
  return target;
}

size_t SpeedDeciderStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpeedDeciderStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.StopTime pedestrian_stop_time = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pedestrian_stop_time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pedestrian_stop_time(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedDeciderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpeedDeciderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedDeciderStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedDeciderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpeedDeciderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpeedDeciderStatus)
    MergeFrom(*source);
  }
}

void SpeedDeciderStatus::MergeFrom(const SpeedDeciderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpeedDeciderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pedestrian_stop_time_.MergeFrom(from.pedestrian_stop_time_);
}

void SpeedDeciderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpeedDeciderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedDeciderStatus::CopyFrom(const SpeedDeciderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpeedDeciderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedDeciderStatus::IsInitialized() const {
  return true;
}

void SpeedDeciderStatus::Swap(SpeedDeciderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedDeciderStatus::InternalSwap(SpeedDeciderStatus* other) {
  using std::swap;
  CastToBase(&pedestrian_stop_time_)->InternalSwap(CastToBase(&other->pedestrian_stop_time_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedDeciderStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopSignStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSignStatus::kCurrentStopSignOverlapIdFieldNumber;
const int StopSignStatus::kDoneStopSignOverlapIdFieldNumber;
const int StopSignStatus::kWaitForObstacleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignStatus::StopSignStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_StopSignStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignStatus)
}
StopSignStatus::StopSignStatus(const StopSignStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      wait_for_obstacle_id_(from.wait_for_obstacle_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_stop_sign_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_stop_sign_overlap_id()) {
    current_stop_sign_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_stop_sign_overlap_id_);
  }
  done_stop_sign_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_done_stop_sign_overlap_id()) {
    done_stop_sign_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.done_stop_sign_overlap_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignStatus)
}

void StopSignStatus::SharedCtor() {
  current_stop_sign_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_stop_sign_overlap_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopSignStatus::~StopSignStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignStatus)
  SharedDtor();
}

void StopSignStatus::SharedDtor() {
  current_stop_sign_overlap_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_stop_sign_overlap_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopSignStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopSignStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSignStatus& StopSignStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_StopSignStatus.base);
  return *internal_default_instance();
}


void StopSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wait_for_obstacle_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      current_stop_sign_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      done_stop_sign_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSignStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopSignStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string current_stop_sign_overlap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_stop_sign_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_stop_sign_overlap_id().data(), static_cast<int>(this->current_stop_sign_overlap_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopSignStatus.current_stop_sign_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string done_stop_sign_overlap_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_done_stop_sign_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->done_stop_sign_overlap_id().data(), static_cast<int>(this->done_stop_sign_overlap_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopSignStatus.done_stop_sign_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string wait_for_obstacle_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wait_for_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wait_for_obstacle_id(this->wait_for_obstacle_id_size() - 1).data(),
            static_cast<int>(this->wait_for_obstacle_id(this->wait_for_obstacle_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.StopSignStatus.wait_for_obstacle_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopSignStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopSignStatus)
  return false;
#undef DO_
}

void StopSignStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_stop_sign_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_stop_sign_overlap_id().data(), static_cast<int>(this->current_stop_sign_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.current_stop_sign_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->current_stop_sign_overlap_id(), output);
  }

  // optional string done_stop_sign_overlap_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_stop_sign_overlap_id().data(), static_cast<int>(this->done_stop_sign_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.done_stop_sign_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->done_stop_sign_overlap_id(), output);
  }

  // repeated string wait_for_obstacle_id = 3;
  for (int i = 0, n = this->wait_for_obstacle_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle_id(i).data(), static_cast<int>(this->wait_for_obstacle_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.wait_for_obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->wait_for_obstacle_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopSignStatus)
}

::google::protobuf::uint8* StopSignStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_stop_sign_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_stop_sign_overlap_id().data(), static_cast<int>(this->current_stop_sign_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.current_stop_sign_overlap_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->current_stop_sign_overlap_id(), target);
  }

  // optional string done_stop_sign_overlap_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_stop_sign_overlap_id().data(), static_cast<int>(this->done_stop_sign_overlap_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.done_stop_sign_overlap_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->done_stop_sign_overlap_id(), target);
  }

  // repeated string wait_for_obstacle_id = 3;
  for (int i = 0, n = this->wait_for_obstacle_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle_id(i).data(), static_cast<int>(this->wait_for_obstacle_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.wait_for_obstacle_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->wait_for_obstacle_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignStatus)
  return target;
}

size_t StopSignStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string wait_for_obstacle_id = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->wait_for_obstacle_id_size());
  for (int i = 0, n = this->wait_for_obstacle_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wait_for_obstacle_id(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string current_stop_sign_overlap_id = 1;
    if (has_current_stop_sign_overlap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_stop_sign_overlap_id());
    }

    // optional string done_stop_sign_overlap_id = 2;
    if (has_done_stop_sign_overlap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->done_stop_sign_overlap_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSignStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignStatus)
    MergeFrom(*source);
  }
}

void StopSignStatus::MergeFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wait_for_obstacle_id_.MergeFrom(from.wait_for_obstacle_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_current_stop_sign_overlap_id();
      current_stop_sign_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_stop_sign_overlap_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_done_stop_sign_overlap_id();
      done_stop_sign_overlap_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.done_stop_sign_overlap_id_);
    }
  }
}

void StopSignStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignStatus::CopyFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignStatus::IsInitialized() const {
  return true;
}

void StopSignStatus::Swap(StopSignStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignStatus::InternalSwap(StopSignStatus* other) {
  using std::swap;
  wait_for_obstacle_id_.InternalSwap(CastToBase(&other->wait_for_obstacle_id_));
  current_stop_sign_overlap_id_.Swap(&other->current_stop_sign_overlap_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  done_stop_sign_overlap_id_.Swap(&other->done_stop_sign_overlap_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopSignStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightStatus::kCurrentTrafficLightOverlapIdFieldNumber;
const int TrafficLightStatus::kDoneTrafficLightOverlapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightStatus::TrafficLightStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_TrafficLightStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficLightStatus)
}
TrafficLightStatus::TrafficLightStatus(const TrafficLightStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      current_traffic_light_overlap_id_(from.current_traffic_light_overlap_id_),
      done_traffic_light_overlap_id_(from.done_traffic_light_overlap_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightStatus)
}

void TrafficLightStatus::SharedCtor() {
}

TrafficLightStatus::~TrafficLightStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightStatus)
  SharedDtor();
}

void TrafficLightStatus::SharedDtor() {
}

void TrafficLightStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightStatus& TrafficLightStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_TrafficLightStatus.base);
  return *internal_default_instance();
}


void TrafficLightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_traffic_light_overlap_id_.Clear();
  done_traffic_light_overlap_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficLightStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string current_traffic_light_overlap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_current_traffic_light_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_traffic_light_overlap_id(this->current_traffic_light_overlap_id_size() - 1).data(),
            static_cast<int>(this->current_traffic_light_overlap_id(this->current_traffic_light_overlap_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TrafficLightStatus.current_traffic_light_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string done_traffic_light_overlap_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_done_traffic_light_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->done_traffic_light_overlap_id(this->done_traffic_light_overlap_id_size() - 1).data(),
            static_cast<int>(this->done_traffic_light_overlap_id(this->done_traffic_light_overlap_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TrafficLightStatus.done_traffic_light_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficLightStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficLightStatus)
  return false;
#undef DO_
}

void TrafficLightStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficLightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string current_traffic_light_overlap_id = 1;
  for (int i = 0, n = this->current_traffic_light_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_traffic_light_overlap_id(i).data(), static_cast<int>(this->current_traffic_light_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightStatus.current_traffic_light_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->current_traffic_light_overlap_id(i), output);
  }

  // repeated string done_traffic_light_overlap_id = 2;
  for (int i = 0, n = this->done_traffic_light_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_traffic_light_overlap_id(i).data(), static_cast<int>(this->done_traffic_light_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightStatus.done_traffic_light_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->done_traffic_light_overlap_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficLightStatus)
}

::google::protobuf::uint8* TrafficLightStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string current_traffic_light_overlap_id = 1;
  for (int i = 0, n = this->current_traffic_light_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_traffic_light_overlap_id(i).data(), static_cast<int>(this->current_traffic_light_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightStatus.current_traffic_light_overlap_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->current_traffic_light_overlap_id(i), target);
  }

  // repeated string done_traffic_light_overlap_id = 2;
  for (int i = 0, n = this->done_traffic_light_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_traffic_light_overlap_id(i).data(), static_cast<int>(this->done_traffic_light_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightStatus.done_traffic_light_overlap_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->done_traffic_light_overlap_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightStatus)
  return target;
}

size_t TrafficLightStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string current_traffic_light_overlap_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->current_traffic_light_overlap_id_size());
  for (int i = 0, n = this->current_traffic_light_overlap_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->current_traffic_light_overlap_id(i));
  }

  // repeated string done_traffic_light_overlap_id = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->done_traffic_light_overlap_id_size());
  for (int i = 0, n = this->done_traffic_light_overlap_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->done_traffic_light_overlap_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficLightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficLightStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficLightStatus)
    MergeFrom(*source);
  }
}

void TrafficLightStatus::MergeFrom(const TrafficLightStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_traffic_light_overlap_id_.MergeFrom(from.current_traffic_light_overlap_id_);
  done_traffic_light_overlap_id_.MergeFrom(from.done_traffic_light_overlap_id_);
}

void TrafficLightStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightStatus::CopyFrom(const TrafficLightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightStatus::IsInitialized() const {
  return true;
}

void TrafficLightStatus::Swap(TrafficLightStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightStatus::InternalSwap(TrafficLightStatus* other) {
  using std::swap;
  current_traffic_light_overlap_id_.InternalSwap(CastToBase(&other->current_traffic_light_overlap_id_));
  done_traffic_light_overlap_id_.InternalSwap(CastToBase(&other->done_traffic_light_overlap_id_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void YieldSignStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YieldSignStatus::kCurrentYieldSignOverlapIdFieldNumber;
const int YieldSignStatus::kDoneYieldSignOverlapIdFieldNumber;
const int YieldSignStatus::kWaitForObstacleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YieldSignStatus::YieldSignStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_YieldSignStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.YieldSignStatus)
}
YieldSignStatus::YieldSignStatus(const YieldSignStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      current_yield_sign_overlap_id_(from.current_yield_sign_overlap_id_),
      done_yield_sign_overlap_id_(from.done_yield_sign_overlap_id_),
      wait_for_obstacle_id_(from.wait_for_obstacle_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.YieldSignStatus)
}

void YieldSignStatus::SharedCtor() {
}

YieldSignStatus::~YieldSignStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.YieldSignStatus)
  SharedDtor();
}

void YieldSignStatus::SharedDtor() {
}

void YieldSignStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* YieldSignStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YieldSignStatus& YieldSignStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_YieldSignStatus.base);
  return *internal_default_instance();
}


void YieldSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.YieldSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_yield_sign_overlap_id_.Clear();
  done_yield_sign_overlap_id_.Clear();
  wait_for_obstacle_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YieldSignStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.YieldSignStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string current_yield_sign_overlap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_current_yield_sign_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_yield_sign_overlap_id(this->current_yield_sign_overlap_id_size() - 1).data(),
            static_cast<int>(this->current_yield_sign_overlap_id(this->current_yield_sign_overlap_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.YieldSignStatus.current_yield_sign_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string done_yield_sign_overlap_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_done_yield_sign_overlap_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->done_yield_sign_overlap_id(this->done_yield_sign_overlap_id_size() - 1).data(),
            static_cast<int>(this->done_yield_sign_overlap_id(this->done_yield_sign_overlap_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.YieldSignStatus.done_yield_sign_overlap_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string wait_for_obstacle_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wait_for_obstacle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wait_for_obstacle_id(this->wait_for_obstacle_id_size() - 1).data(),
            static_cast<int>(this->wait_for_obstacle_id(this->wait_for_obstacle_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.YieldSignStatus.wait_for_obstacle_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.YieldSignStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.YieldSignStatus)
  return false;
#undef DO_
}

void YieldSignStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.YieldSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string current_yield_sign_overlap_id = 1;
  for (int i = 0, n = this->current_yield_sign_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_yield_sign_overlap_id(i).data(), static_cast<int>(this->current_yield_sign_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.YieldSignStatus.current_yield_sign_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->current_yield_sign_overlap_id(i), output);
  }

  // repeated string done_yield_sign_overlap_id = 2;
  for (int i = 0, n = this->done_yield_sign_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_yield_sign_overlap_id(i).data(), static_cast<int>(this->done_yield_sign_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.YieldSignStatus.done_yield_sign_overlap_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->done_yield_sign_overlap_id(i), output);
  }

  // repeated string wait_for_obstacle_id = 3;
  for (int i = 0, n = this->wait_for_obstacle_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle_id(i).data(), static_cast<int>(this->wait_for_obstacle_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.YieldSignStatus.wait_for_obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->wait_for_obstacle_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.YieldSignStatus)
}

::google::protobuf::uint8* YieldSignStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.YieldSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string current_yield_sign_overlap_id = 1;
  for (int i = 0, n = this->current_yield_sign_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_yield_sign_overlap_id(i).data(), static_cast<int>(this->current_yield_sign_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.YieldSignStatus.current_yield_sign_overlap_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->current_yield_sign_overlap_id(i), target);
  }

  // repeated string done_yield_sign_overlap_id = 2;
  for (int i = 0, n = this->done_yield_sign_overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->done_yield_sign_overlap_id(i).data(), static_cast<int>(this->done_yield_sign_overlap_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.YieldSignStatus.done_yield_sign_overlap_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->done_yield_sign_overlap_id(i), target);
  }

  // repeated string wait_for_obstacle_id = 3;
  for (int i = 0, n = this->wait_for_obstacle_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle_id(i).data(), static_cast<int>(this->wait_for_obstacle_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.YieldSignStatus.wait_for_obstacle_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->wait_for_obstacle_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.YieldSignStatus)
  return target;
}

size_t YieldSignStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.YieldSignStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string current_yield_sign_overlap_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->current_yield_sign_overlap_id_size());
  for (int i = 0, n = this->current_yield_sign_overlap_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->current_yield_sign_overlap_id(i));
  }

  // repeated string done_yield_sign_overlap_id = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->done_yield_sign_overlap_id_size());
  for (int i = 0, n = this->done_yield_sign_overlap_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->done_yield_sign_overlap_id(i));
  }

  // repeated string wait_for_obstacle_id = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->wait_for_obstacle_id_size());
  for (int i = 0, n = this->wait_for_obstacle_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wait_for_obstacle_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YieldSignStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.YieldSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const YieldSignStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YieldSignStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.YieldSignStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.YieldSignStatus)
    MergeFrom(*source);
  }
}

void YieldSignStatus::MergeFrom(const YieldSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.YieldSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_yield_sign_overlap_id_.MergeFrom(from.current_yield_sign_overlap_id_);
  done_yield_sign_overlap_id_.MergeFrom(from.done_yield_sign_overlap_id_);
  wait_for_obstacle_id_.MergeFrom(from.wait_for_obstacle_id_);
}

void YieldSignStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.YieldSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldSignStatus::CopyFrom(const YieldSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.YieldSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldSignStatus::IsInitialized() const {
  return true;
}

void YieldSignStatus::Swap(YieldSignStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YieldSignStatus::InternalSwap(YieldSignStatus* other) {
  using std::swap;
  current_yield_sign_overlap_id_.InternalSwap(CastToBase(&other->current_yield_sign_overlap_id_));
  done_yield_sign_overlap_id_.InternalSwap(CastToBase(&other->done_yield_sign_overlap_id_));
  wait_for_obstacle_id_.InternalSwap(CastToBase(&other->wait_for_obstacle_id_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata YieldSignStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningStatus::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->bare_intersection_ = const_cast< ::apollo::planning::BareIntersectionStatus*>(
      ::apollo::planning::BareIntersectionStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->change_lane_ = const_cast< ::apollo::planning::ChangeLaneStatus*>(
      ::apollo::planning::ChangeLaneStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->creep_decider_ = const_cast< ::apollo::planning::CreepDeciderStatus*>(
      ::apollo::planning::CreepDeciderStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->crosswalk_ = const_cast< ::apollo::planning::CrosswalkStatus*>(
      ::apollo::planning::CrosswalkStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->destination_ = const_cast< ::apollo::planning::DestinationStatus*>(
      ::apollo::planning::DestinationStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->open_space_ = const_cast< ::apollo::planning::OpenSpaceStatus*>(
      ::apollo::planning::OpenSpaceStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->park_and_go_ = const_cast< ::apollo::planning::ParkAndGoStatus*>(
      ::apollo::planning::ParkAndGoStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->path_decider_ = const_cast< ::apollo::planning::PathDeciderStatus*>(
      ::apollo::planning::PathDeciderStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->pull_over_ = const_cast< ::apollo::planning::PullOverStatus*>(
      ::apollo::planning::PullOverStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->rerouting_ = const_cast< ::apollo::planning::ReroutingStatus*>(
      ::apollo::planning::ReroutingStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->speed_decider_ = const_cast< ::apollo::planning::SpeedDeciderStatus*>(
      ::apollo::planning::SpeedDeciderStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->stop_sign_ = const_cast< ::apollo::planning::StopSignStatus*>(
      ::apollo::planning::StopSignStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->traffic_light_ = const_cast< ::apollo::planning::TrafficLightStatus*>(
      ::apollo::planning::TrafficLightStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->yield_sign_ = const_cast< ::apollo::planning::YieldSignStatus*>(
      ::apollo::planning::YieldSignStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningStatus::kBareIntersectionFieldNumber;
const int PlanningStatus::kChangeLaneFieldNumber;
const int PlanningStatus::kCreepDeciderFieldNumber;
const int PlanningStatus::kCrosswalkFieldNumber;
const int PlanningStatus::kDestinationFieldNumber;
const int PlanningStatus::kOpenSpaceFieldNumber;
const int PlanningStatus::kParkAndGoFieldNumber;
const int PlanningStatus::kPathDeciderFieldNumber;
const int PlanningStatus::kPullOverFieldNumber;
const int PlanningStatus::kReroutingFieldNumber;
const int PlanningStatus::kSpeedDeciderFieldNumber;
const int PlanningStatus::kStopSignFieldNumber;
const int PlanningStatus::kTrafficLightFieldNumber;
const int PlanningStatus::kYieldSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningStatus::PlanningStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_5fstatus_2eproto::scc_info_PlanningStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningStatus)
}
PlanningStatus::PlanningStatus(const PlanningStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bare_intersection()) {
    bare_intersection_ = new ::apollo::planning::BareIntersectionStatus(*from.bare_intersection_);
  } else {
    bare_intersection_ = NULL;
  }
  if (from.has_change_lane()) {
    change_lane_ = new ::apollo::planning::ChangeLaneStatus(*from.change_lane_);
  } else {
    change_lane_ = NULL;
  }
  if (from.has_creep_decider()) {
    creep_decider_ = new ::apollo::planning::CreepDeciderStatus(*from.creep_decider_);
  } else {
    creep_decider_ = NULL;
  }
  if (from.has_crosswalk()) {
    crosswalk_ = new ::apollo::planning::CrosswalkStatus(*from.crosswalk_);
  } else {
    crosswalk_ = NULL;
  }
  if (from.has_destination()) {
    destination_ = new ::apollo::planning::DestinationStatus(*from.destination_);
  } else {
    destination_ = NULL;
  }
  if (from.has_open_space()) {
    open_space_ = new ::apollo::planning::OpenSpaceStatus(*from.open_space_);
  } else {
    open_space_ = NULL;
  }
  if (from.has_park_and_go()) {
    park_and_go_ = new ::apollo::planning::ParkAndGoStatus(*from.park_and_go_);
  } else {
    park_and_go_ = NULL;
  }
  if (from.has_path_decider()) {
    path_decider_ = new ::apollo::planning::PathDeciderStatus(*from.path_decider_);
  } else {
    path_decider_ = NULL;
  }
  if (from.has_pull_over()) {
    pull_over_ = new ::apollo::planning::PullOverStatus(*from.pull_over_);
  } else {
    pull_over_ = NULL;
  }
  if (from.has_rerouting()) {
    rerouting_ = new ::apollo::planning::ReroutingStatus(*from.rerouting_);
  } else {
    rerouting_ = NULL;
  }
  if (from.has_speed_decider()) {
    speed_decider_ = new ::apollo::planning::SpeedDeciderStatus(*from.speed_decider_);
  } else {
    speed_decider_ = NULL;
  }
  if (from.has_stop_sign()) {
    stop_sign_ = new ::apollo::planning::StopSignStatus(*from.stop_sign_);
  } else {
    stop_sign_ = NULL;
  }
  if (from.has_traffic_light()) {
    traffic_light_ = new ::apollo::planning::TrafficLightStatus(*from.traffic_light_);
  } else {
    traffic_light_ = NULL;
  }
  if (from.has_yield_sign()) {
    yield_sign_ = new ::apollo::planning::YieldSignStatus(*from.yield_sign_);
  } else {
    yield_sign_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningStatus)
}

void PlanningStatus::SharedCtor() {
  ::memset(&bare_intersection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yield_sign_) -
      reinterpret_cast<char*>(&bare_intersection_)) + sizeof(yield_sign_));
}

PlanningStatus::~PlanningStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningStatus)
  SharedDtor();
}

void PlanningStatus::SharedDtor() {
  if (this != internal_default_instance()) delete bare_intersection_;
  if (this != internal_default_instance()) delete change_lane_;
  if (this != internal_default_instance()) delete creep_decider_;
  if (this != internal_default_instance()) delete crosswalk_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete open_space_;
  if (this != internal_default_instance()) delete park_and_go_;
  if (this != internal_default_instance()) delete path_decider_;
  if (this != internal_default_instance()) delete pull_over_;
  if (this != internal_default_instance()) delete rerouting_;
  if (this != internal_default_instance()) delete speed_decider_;
  if (this != internal_default_instance()) delete stop_sign_;
  if (this != internal_default_instance()) delete traffic_light_;
  if (this != internal_default_instance()) delete yield_sign_;
}

void PlanningStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningStatus::descriptor() {
  ::protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningStatus& PlanningStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_5fstatus_2eproto::scc_info_PlanningStatus.base);
  return *internal_default_instance();
}


void PlanningStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bare_intersection_ != NULL);
      bare_intersection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_lane_ != NULL);
      change_lane_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creep_decider_ != NULL);
      creep_decider_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(crosswalk_ != NULL);
      crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(destination_ != NULL);
      destination_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(open_space_ != NULL);
      open_space_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(park_and_go_ != NULL);
      park_and_go_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(path_decider_ != NULL);
      path_decider_->Clear();
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pull_over_ != NULL);
      pull_over_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(rerouting_ != NULL);
      rerouting_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(speed_decider_ != NULL);
      speed_decider_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(stop_sign_ != NULL);
      stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(traffic_light_ != NULL);
      traffic_light_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(yield_sign_ != NULL);
      yield_sign_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bare_intersection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.CreepDeciderStatus creep_decider = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_creep_decider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.CrosswalkStatus crosswalk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DestinationStatus destination = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OpenSpaceStatus open_space = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ParkAndGoStatus park_and_go = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_park_and_go()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathDeciderStatus path_decider = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_decider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PullOverStatus pull_over = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pull_over()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ReroutingStatus rerouting = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rerouting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.SpeedDeciderStatus speed_decider = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_decider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StopSignStatus stop_sign = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.TrafficLightStatus traffic_light = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.YieldSignStatus yield_sign = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yield_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningStatus)
  return false;
#undef DO_
}

void PlanningStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_bare_intersection(), output);
  }

  // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_change_lane(), output);
  }

  // optional .apollo.planning.CreepDeciderStatus creep_decider = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_creep_decider(), output);
  }

  // optional .apollo.planning.CrosswalkStatus crosswalk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_crosswalk(), output);
  }

  // optional .apollo.planning.DestinationStatus destination = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_destination(), output);
  }

  // optional .apollo.planning.OpenSpaceStatus open_space = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_open_space(), output);
  }

  // optional .apollo.planning.ParkAndGoStatus park_and_go = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_park_and_go(), output);
  }

  // optional .apollo.planning.PathDeciderStatus path_decider = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_path_decider(), output);
  }

  // optional .apollo.planning.PullOverStatus pull_over = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_pull_over(), output);
  }

  // optional .apollo.planning.ReroutingStatus rerouting = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_rerouting(), output);
  }

  // optional .apollo.planning.SpeedDeciderStatus speed_decider = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_speed_decider(), output);
  }

  // optional .apollo.planning.StopSignStatus stop_sign = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_stop_sign(), output);
  }

  // optional .apollo.planning.TrafficLightStatus traffic_light = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_traffic_light(), output);
  }

  // optional .apollo.planning.YieldSignStatus yield_sign = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_yield_sign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningStatus)
}

::google::protobuf::uint8* PlanningStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_bare_intersection(), deterministic, target);
  }

  // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_change_lane(), deterministic, target);
  }

  // optional .apollo.planning.CreepDeciderStatus creep_decider = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_creep_decider(), deterministic, target);
  }

  // optional .apollo.planning.CrosswalkStatus crosswalk = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_crosswalk(), deterministic, target);
  }

  // optional .apollo.planning.DestinationStatus destination = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_destination(), deterministic, target);
  }

  // optional .apollo.planning.OpenSpaceStatus open_space = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_open_space(), deterministic, target);
  }

  // optional .apollo.planning.ParkAndGoStatus park_and_go = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_park_and_go(), deterministic, target);
  }

  // optional .apollo.planning.PathDeciderStatus path_decider = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_path_decider(), deterministic, target);
  }

  // optional .apollo.planning.PullOverStatus pull_over = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_pull_over(), deterministic, target);
  }

  // optional .apollo.planning.ReroutingStatus rerouting = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_rerouting(), deterministic, target);
  }

  // optional .apollo.planning.SpeedDeciderStatus speed_decider = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_speed_decider(), deterministic, target);
  }

  // optional .apollo.planning.StopSignStatus stop_sign = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_stop_sign(), deterministic, target);
  }

  // optional .apollo.planning.TrafficLightStatus traffic_light = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_traffic_light(), deterministic, target);
  }

  // optional .apollo.planning.YieldSignStatus yield_sign = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_yield_sign(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningStatus)
  return target;
}

size_t PlanningStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
    if (has_bare_intersection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bare_intersection_);
    }

    // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
    if (has_change_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_lane_);
    }

    // optional .apollo.planning.CreepDeciderStatus creep_decider = 3;
    if (has_creep_decider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *creep_decider_);
    }

    // optional .apollo.planning.CrosswalkStatus crosswalk = 4;
    if (has_crosswalk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *crosswalk_);
    }

    // optional .apollo.planning.DestinationStatus destination = 5;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *destination_);
    }

    // optional .apollo.planning.OpenSpaceStatus open_space = 7;
    if (has_open_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *open_space_);
    }

    // optional .apollo.planning.ParkAndGoStatus park_and_go = 8;
    if (has_park_and_go()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *park_and_go_);
    }

    // optional .apollo.planning.PathDeciderStatus path_decider = 9;
    if (has_path_decider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *path_decider_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .apollo.planning.PullOverStatus pull_over = 10;
    if (has_pull_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pull_over_);
    }

    // optional .apollo.planning.ReroutingStatus rerouting = 11;
    if (has_rerouting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rerouting_);
    }

    // optional .apollo.planning.SpeedDeciderStatus speed_decider = 13;
    if (has_speed_decider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speed_decider_);
    }

    // optional .apollo.planning.StopSignStatus stop_sign = 14;
    if (has_stop_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stop_sign_);
    }

    // optional .apollo.planning.TrafficLightStatus traffic_light = 15;
    if (has_traffic_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *traffic_light_);
    }

    // optional .apollo.planning.YieldSignStatus yield_sign = 16;
    if (has_yield_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yield_sign_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningStatus)
    MergeFrom(*source);
  }
}

void PlanningStatus::MergeFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bare_intersection()->::apollo::planning::BareIntersectionStatus::MergeFrom(from.bare_intersection());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_change_lane()->::apollo::planning::ChangeLaneStatus::MergeFrom(from.change_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_creep_decider()->::apollo::planning::CreepDeciderStatus::MergeFrom(from.creep_decider());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_crosswalk()->::apollo::planning::CrosswalkStatus::MergeFrom(from.crosswalk());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_destination()->::apollo::planning::DestinationStatus::MergeFrom(from.destination());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_open_space()->::apollo::planning::OpenSpaceStatus::MergeFrom(from.open_space());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_park_and_go()->::apollo::planning::ParkAndGoStatus::MergeFrom(from.park_and_go());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_path_decider()->::apollo::planning::PathDeciderStatus::MergeFrom(from.path_decider());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_pull_over()->::apollo::planning::PullOverStatus::MergeFrom(from.pull_over());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_rerouting()->::apollo::planning::ReroutingStatus::MergeFrom(from.rerouting());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_speed_decider()->::apollo::planning::SpeedDeciderStatus::MergeFrom(from.speed_decider());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_stop_sign()->::apollo::planning::StopSignStatus::MergeFrom(from.stop_sign());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_traffic_light()->::apollo::planning::TrafficLightStatus::MergeFrom(from.traffic_light());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_yield_sign()->::apollo::planning::YieldSignStatus::MergeFrom(from.yield_sign());
    }
  }
}

void PlanningStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStatus::CopyFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStatus::IsInitialized() const {
  return true;
}

void PlanningStatus::Swap(PlanningStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningStatus::InternalSwap(PlanningStatus* other) {
  using std::swap;
  swap(bare_intersection_, other->bare_intersection_);
  swap(change_lane_, other->change_lane_);
  swap(creep_decider_, other->creep_decider_);
  swap(crosswalk_, other->crosswalk_);
  swap(destination_, other->destination_);
  swap(open_space_, other->open_space_);
  swap(park_and_go_, other->park_and_go_);
  swap(path_decider_, other->path_decider_);
  swap(pull_over_, other->pull_over_);
  swap(rerouting_, other->rerouting_);
  swap(speed_decider_, other->speed_decider_);
  swap(stop_sign_, other->stop_sign_);
  swap(traffic_light_, other->traffic_light_);
  swap(yield_sign_, other->yield_sign_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningStatus::GetMetadata() const {
  protobuf_planning_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::BareIntersectionStatus* Arena::CreateMaybeMessage< ::apollo::planning::BareIntersectionStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::BareIntersectionStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ChangeLaneStatus* Arena::CreateMaybeMessage< ::apollo::planning::ChangeLaneStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ChangeLaneStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CreepDeciderStatus* Arena::CreateMaybeMessage< ::apollo::planning::CreepDeciderStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CreepDeciderStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::StopTime* Arena::CreateMaybeMessage< ::apollo::planning::StopTime >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StopTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CrosswalkStatus* Arena::CreateMaybeMessage< ::apollo::planning::CrosswalkStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CrosswalkStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DestinationStatus* Arena::CreateMaybeMessage< ::apollo::planning::DestinationStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DestinationStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpaceStatus* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ParkAndGoStatus* Arena::CreateMaybeMessage< ::apollo::planning::ParkAndGoStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ParkAndGoStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathDeciderStatus* Arena::CreateMaybeMessage< ::apollo::planning::PathDeciderStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathDeciderStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PullOverStatus* Arena::CreateMaybeMessage< ::apollo::planning::PullOverStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PullOverStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ReroutingStatus* Arena::CreateMaybeMessage< ::apollo::planning::ReroutingStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReroutingStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::SpeedDeciderStatus* Arena::CreateMaybeMessage< ::apollo::planning::SpeedDeciderStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SpeedDeciderStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::StopSignStatus* Arena::CreateMaybeMessage< ::apollo::planning::StopSignStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StopSignStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrafficLightStatus* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficLightStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::YieldSignStatus* Arena::CreateMaybeMessage< ::apollo::planning::YieldSignStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::YieldSignStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlanningStatus* Arena::CreateMaybeMessage< ::apollo::planning::PlanningStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

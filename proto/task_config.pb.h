// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_config.proto

#ifndef PROTOBUF_INCLUDED_task_5fconfig_2eproto
#define PROTOBUF_INCLUDED_task_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fconfig_2eproto 

namespace protobuf_task_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_task_5fconfig_2eproto
namespace apollo {
namespace planning {
class CreepDeciderConfig;
class CreepDeciderConfigDefaultTypeInternal;
extern CreepDeciderConfigDefaultTypeInternal _CreepDeciderConfig_default_instance_;
class DpStSpeedOptimizerConfig;
class DpStSpeedOptimizerConfigDefaultTypeInternal;
extern DpStSpeedOptimizerConfigDefaultTypeInternal _DpStSpeedOptimizerConfig_default_instance_;
class LaneChangeDeciderConfig;
class LaneChangeDeciderConfigDefaultTypeInternal;
extern LaneChangeDeciderConfigDefaultTypeInternal _LaneChangeDeciderConfig_default_instance_;
class LearningModelInferenceTaskConfig;
class LearningModelInferenceTaskConfigDefaultTypeInternal;
extern LearningModelInferenceTaskConfigDefaultTypeInternal _LearningModelInferenceTaskConfig_default_instance_;
class LearningModelInferenceTrajectoryTaskConfig;
class LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal;
extern LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal _LearningModelInferenceTrajectoryTaskConfig_default_instance_;
class MoveDestLaneConfigTable;
class MoveDestLaneConfigTableDefaultTypeInternal;
extern MoveDestLaneConfigTableDefaultTypeInternal _MoveDestLaneConfigTable_default_instance_;
class NaviObstacleDeciderConfig;
class NaviObstacleDeciderConfigDefaultTypeInternal;
extern NaviObstacleDeciderConfigDefaultTypeInternal _NaviObstacleDeciderConfig_default_instance_;
class NaviPathDeciderConfig;
class NaviPathDeciderConfigDefaultTypeInternal;
extern NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
class NaviSpeedDeciderConfig;
class NaviSpeedDeciderConfigDefaultTypeInternal;
extern NaviSpeedDeciderConfigDefaultTypeInternal _NaviSpeedDeciderConfig_default_instance_;
class PathAssessmentDeciderConfig;
class PathAssessmentDeciderConfigDefaultTypeInternal;
extern PathAssessmentDeciderConfigDefaultTypeInternal _PathAssessmentDeciderConfig_default_instance_;
class PathBoundsDeciderConfig;
class PathBoundsDeciderConfigDefaultTypeInternal;
extern PathBoundsDeciderConfigDefaultTypeInternal _PathBoundsDeciderConfig_default_instance_;
class PathDeciderConfig;
class PathDeciderConfigDefaultTypeInternal;
extern PathDeciderConfigDefaultTypeInternal _PathDeciderConfig_default_instance_;
class PathLaneBorrowDeciderConfig;
class PathLaneBorrowDeciderConfigDefaultTypeInternal;
extern PathLaneBorrowDeciderConfigDefaultTypeInternal _PathLaneBorrowDeciderConfig_default_instance_;
class PathReferenceDeciderConfig;
class PathReferenceDeciderConfigDefaultTypeInternal;
extern PathReferenceDeciderConfigDefaultTypeInternal _PathReferenceDeciderConfig_default_instance_;
class PathReuseDeciderConfig;
class PathReuseDeciderConfigDefaultTypeInternal;
extern PathReuseDeciderConfigDefaultTypeInternal _PathReuseDeciderConfig_default_instance_;
class PiecewiseJerkNonlinearSpeedOptimizerConfig;
class PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_;
class PiecewiseJerkPathOptimizerConfig;
class PiecewiseJerkPathOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkPathOptimizerConfigDefaultTypeInternal _PiecewiseJerkPathOptimizerConfig_default_instance_;
class PiecewiseJerkPathWeights;
class PiecewiseJerkPathWeightsDefaultTypeInternal;
extern PiecewiseJerkPathWeightsDefaultTypeInternal _PiecewiseJerkPathWeights_default_instance_;
class PiecewiseJerkSpeedOptimizerConfig;
class PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
class RuleBasedStopDeciderConfig;
class RuleBasedStopDeciderConfigDefaultTypeInternal;
extern RuleBasedStopDeciderConfigDefaultTypeInternal _RuleBasedStopDeciderConfig_default_instance_;
class STBoundsDeciderConfig;
class STBoundsDeciderConfigDefaultTypeInternal;
extern STBoundsDeciderConfigDefaultTypeInternal _STBoundsDeciderConfig_default_instance_;
class ShiftConfig;
class ShiftConfigDefaultTypeInternal;
extern ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
class SpeedBoundsDeciderConfig;
class SpeedBoundsDeciderConfigDefaultTypeInternal;
extern SpeedBoundsDeciderConfigDefaultTypeInternal _SpeedBoundsDeciderConfig_default_instance_;
class SpeedHeuristicOptimizerConfig;
class SpeedHeuristicOptimizerConfigDefaultTypeInternal;
extern SpeedHeuristicOptimizerConfigDefaultTypeInternal _SpeedHeuristicOptimizerConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::CreepDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::CreepDeciderConfig>(Arena*);
template<> ::apollo::planning::DpStSpeedOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::DpStSpeedOptimizerConfig>(Arena*);
template<> ::apollo::planning::LaneChangeDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::LaneChangeDeciderConfig>(Arena*);
template<> ::apollo::planning::LearningModelInferenceTaskConfig* Arena::CreateMaybeMessage<::apollo::planning::LearningModelInferenceTaskConfig>(Arena*);
template<> ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* Arena::CreateMaybeMessage<::apollo::planning::LearningModelInferenceTrajectoryTaskConfig>(Arena*);
template<> ::apollo::planning::MoveDestLaneConfigTable* Arena::CreateMaybeMessage<::apollo::planning::MoveDestLaneConfigTable>(Arena*);
template<> ::apollo::planning::NaviObstacleDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviObstacleDeciderConfig>(Arena*);
template<> ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviPathDeciderConfig>(Arena*);
template<> ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviSpeedDeciderConfig>(Arena*);
template<> ::apollo::planning::PathAssessmentDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathAssessmentDeciderConfig>(Arena*);
template<> ::apollo::planning::PathBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathBoundsDeciderConfig>(Arena*);
template<> ::apollo::planning::PathDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathDeciderConfig>(Arena*);
template<> ::apollo::planning::PathLaneBorrowDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathLaneBorrowDeciderConfig>(Arena*);
template<> ::apollo::planning::PathReferenceDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathReferenceDeciderConfig>(Arena*);
template<> ::apollo::planning::PathReuseDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathReuseDeciderConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkPathOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathOptimizerConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkPathWeights* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(Arena*);
template<> ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkSpeedOptimizerConfig>(Arena*);
template<> ::apollo::planning::RuleBasedStopDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::RuleBasedStopDeciderConfig>(Arena*);
template<> ::apollo::planning::STBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::STBoundsDeciderConfig>(Arena*);
template<> ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage<::apollo::planning::ShiftConfig>(Arena*);
template<> ::apollo::planning::SpeedBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::SpeedBoundsDeciderConfig>(Arena*);
template<> ::apollo::planning::SpeedHeuristicOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::SpeedHeuristicOptimizerConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {

enum LearningModelInferenceTaskConfig_ModelType {
  LearningModelInferenceTaskConfig_ModelType_CNN = 1,
  LearningModelInferenceTaskConfig_ModelType_CNN_LSTM = 2
};
bool LearningModelInferenceTaskConfig_ModelType_IsValid(int value);
const LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig_ModelType_ModelType_MIN = LearningModelInferenceTaskConfig_ModelType_CNN;
const LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig_ModelType_ModelType_MAX = LearningModelInferenceTaskConfig_ModelType_CNN_LSTM;
const int LearningModelInferenceTaskConfig_ModelType_ModelType_ARRAYSIZE = LearningModelInferenceTaskConfig_ModelType_ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LearningModelInferenceTaskConfig_ModelType_descriptor();
inline const ::std::string& LearningModelInferenceTaskConfig_ModelType_Name(LearningModelInferenceTaskConfig_ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LearningModelInferenceTaskConfig_ModelType_descriptor(), value);
}
inline bool LearningModelInferenceTaskConfig_ModelType_Parse(
    const ::std::string& name, LearningModelInferenceTaskConfig_ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LearningModelInferenceTaskConfig_ModelType>(
    LearningModelInferenceTaskConfig_ModelType_descriptor(), name, value);
}
// ===================================================================

class CreepDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.CreepDeciderConfig) */ {
 public:
  CreepDeciderConfig();
  virtual ~CreepDeciderConfig();

  CreepDeciderConfig(const CreepDeciderConfig& from);

  inline CreepDeciderConfig& operator=(const CreepDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreepDeciderConfig(CreepDeciderConfig&& from) noexcept
    : CreepDeciderConfig() {
    *this = ::std::move(from);
  }

  inline CreepDeciderConfig& operator=(CreepDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreepDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreepDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const CreepDeciderConfig*>(
               &_CreepDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreepDeciderConfig* other);
  friend void swap(CreepDeciderConfig& a, CreepDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreepDeciderConfig* New() const final {
    return CreateMaybeMessage<CreepDeciderConfig>(NULL);
  }

  CreepDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreepDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreepDeciderConfig& from);
  void MergeFrom(const CreepDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreepDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double stop_distance = 1 [default = 0.5];
  bool has_stop_distance() const;
  void clear_stop_distance();
  static const int kStopDistanceFieldNumber = 1;
  double stop_distance() const;
  void set_stop_distance(double value);

  // optional double speed_limit = 2 [default = 1];
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 2;
  double speed_limit() const;
  void set_speed_limit(double value);

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  bool has_max_valid_stop_distance() const;
  void clear_max_valid_stop_distance();
  static const int kMaxValidStopDistanceFieldNumber = 3;
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);

  // optional double min_boundary_t = 4 [default = 6];
  bool has_min_boundary_t() const;
  void clear_min_boundary_t();
  static const int kMinBoundaryTFieldNumber = 4;
  double min_boundary_t() const;
  void set_min_boundary_t(double value);

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  bool has_ignore_max_st_min_t() const;
  void clear_ignore_max_st_min_t();
  static const int kIgnoreMaxStMinTFieldNumber = 5;
  double ignore_max_st_min_t() const;
  void set_ignore_max_st_min_t(double value);

  // optional double ignore_min_st_min_s = 6 [default = 15];
  bool has_ignore_min_st_min_s() const;
  void clear_ignore_min_st_min_s();
  static const int kIgnoreMinStMinSFieldNumber = 6;
  double ignore_min_st_min_s() const;
  void set_ignore_min_st_min_s(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.CreepDeciderConfig)
 private:
  void set_has_stop_distance();
  void clear_has_stop_distance();
  void set_has_speed_limit();
  void clear_has_speed_limit();
  void set_has_max_valid_stop_distance();
  void clear_has_max_valid_stop_distance();
  void set_has_min_boundary_t();
  void clear_has_min_boundary_t();
  void set_has_ignore_max_st_min_t();
  void clear_has_ignore_max_st_min_t();
  void set_has_ignore_min_st_min_s();
  void clear_has_ignore_min_st_min_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double stop_distance_;
  double speed_limit_;
  double max_valid_stop_distance_;
  double min_boundary_t_;
  double ignore_max_st_min_t_;
  double ignore_min_st_min_s_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneChangeDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LaneChangeDeciderConfig) */ {
 public:
  LaneChangeDeciderConfig();
  virtual ~LaneChangeDeciderConfig();

  LaneChangeDeciderConfig(const LaneChangeDeciderConfig& from);

  inline LaneChangeDeciderConfig& operator=(const LaneChangeDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneChangeDeciderConfig(LaneChangeDeciderConfig&& from) noexcept
    : LaneChangeDeciderConfig() {
    *this = ::std::move(from);
  }

  inline LaneChangeDeciderConfig& operator=(LaneChangeDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneChangeDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneChangeDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const LaneChangeDeciderConfig*>(
               &_LaneChangeDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LaneChangeDeciderConfig* other);
  friend void swap(LaneChangeDeciderConfig& a, LaneChangeDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneChangeDeciderConfig* New() const final {
    return CreateMaybeMessage<LaneChangeDeciderConfig>(NULL);
  }

  LaneChangeDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneChangeDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneChangeDeciderConfig& from);
  void MergeFrom(const LaneChangeDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneChangeDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable_lane_change_urgency_check = 1;
  bool has_enable_lane_change_urgency_check() const;
  void clear_enable_lane_change_urgency_check();
  static const int kEnableLaneChangeUrgencyCheckFieldNumber = 1;
  bool enable_lane_change_urgency_check() const;
  void set_enable_lane_change_urgency_check(bool value);

  // optional bool enable_prioritize_change_lane = 2 [default = false];
  bool has_enable_prioritize_change_lane() const;
  void clear_enable_prioritize_change_lane();
  static const int kEnablePrioritizeChangeLaneFieldNumber = 2;
  bool enable_prioritize_change_lane() const;
  void set_enable_prioritize_change_lane(bool value);

  // optional bool enable_remove_change_lane = 3 [default = false];
  bool has_enable_remove_change_lane() const;
  void clear_enable_remove_change_lane();
  static const int kEnableRemoveChangeLaneFieldNumber = 3;
  bool enable_remove_change_lane() const;
  void set_enable_remove_change_lane(bool value);

  // optional bool reckless_change_lane = 4 [default = false];
  bool has_reckless_change_lane() const;
  void clear_reckless_change_lane();
  static const int kRecklessChangeLaneFieldNumber = 4;
  bool reckless_change_lane() const;
  void set_reckless_change_lane(bool value);

  // optional double change_lane_success_freeze_time = 5 [default = 1.5];
  bool has_change_lane_success_freeze_time() const;
  void clear_change_lane_success_freeze_time();
  static const int kChangeLaneSuccessFreezeTimeFieldNumber = 5;
  double change_lane_success_freeze_time() const;
  void set_change_lane_success_freeze_time(double value);

  // optional double change_lane_fail_freeze_time = 6 [default = 1];
  bool has_change_lane_fail_freeze_time() const;
  void clear_change_lane_fail_freeze_time();
  static const int kChangeLaneFailFreezeTimeFieldNumber = 6;
  double change_lane_fail_freeze_time() const;
  void set_change_lane_fail_freeze_time(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.LaneChangeDeciderConfig)
 private:
  void set_has_enable_lane_change_urgency_check();
  void clear_has_enable_lane_change_urgency_check();
  void set_has_enable_prioritize_change_lane();
  void clear_has_enable_prioritize_change_lane();
  void set_has_enable_remove_change_lane();
  void clear_has_enable_remove_change_lane();
  void set_has_reckless_change_lane();
  void clear_has_reckless_change_lane();
  void set_has_change_lane_success_freeze_time();
  void clear_has_change_lane_success_freeze_time();
  void set_has_change_lane_fail_freeze_time();
  void clear_has_change_lane_fail_freeze_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool enable_lane_change_urgency_check_;
  bool enable_prioritize_change_lane_;
  bool enable_remove_change_lane_;
  bool reckless_change_lane_;
  double change_lane_success_freeze_time_;
  double change_lane_fail_freeze_time_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LearningModelInferenceTaskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LearningModelInferenceTaskConfig) */ {
 public:
  LearningModelInferenceTaskConfig();
  virtual ~LearningModelInferenceTaskConfig();

  LearningModelInferenceTaskConfig(const LearningModelInferenceTaskConfig& from);

  inline LearningModelInferenceTaskConfig& operator=(const LearningModelInferenceTaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LearningModelInferenceTaskConfig(LearningModelInferenceTaskConfig&& from) noexcept
    : LearningModelInferenceTaskConfig() {
    *this = ::std::move(from);
  }

  inline LearningModelInferenceTaskConfig& operator=(LearningModelInferenceTaskConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearningModelInferenceTaskConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LearningModelInferenceTaskConfig* internal_default_instance() {
    return reinterpret_cast<const LearningModelInferenceTaskConfig*>(
               &_LearningModelInferenceTaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LearningModelInferenceTaskConfig* other);
  friend void swap(LearningModelInferenceTaskConfig& a, LearningModelInferenceTaskConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LearningModelInferenceTaskConfig* New() const final {
    return CreateMaybeMessage<LearningModelInferenceTaskConfig>(NULL);
  }

  LearningModelInferenceTaskConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LearningModelInferenceTaskConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LearningModelInferenceTaskConfig& from);
  void MergeFrom(const LearningModelInferenceTaskConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearningModelInferenceTaskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LearningModelInferenceTaskConfig_ModelType ModelType;
  static const ModelType CNN =
    LearningModelInferenceTaskConfig_ModelType_CNN;
  static const ModelType CNN_LSTM =
    LearningModelInferenceTaskConfig_ModelType_CNN_LSTM;
  static inline bool ModelType_IsValid(int value) {
    return LearningModelInferenceTaskConfig_ModelType_IsValid(value);
  }
  static const ModelType ModelType_MIN =
    LearningModelInferenceTaskConfig_ModelType_ModelType_MIN;
  static const ModelType ModelType_MAX =
    LearningModelInferenceTaskConfig_ModelType_ModelType_MAX;
  static const int ModelType_ARRAYSIZE =
    LearningModelInferenceTaskConfig_ModelType_ModelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModelType_descriptor() {
    return LearningModelInferenceTaskConfig_ModelType_descriptor();
  }
  static inline const ::std::string& ModelType_Name(ModelType value) {
    return LearningModelInferenceTaskConfig_ModelType_Name(value);
  }
  static inline bool ModelType_Parse(const ::std::string& name,
      ModelType* value) {
    return LearningModelInferenceTaskConfig_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string cpu_model_file = 2;
  bool has_cpu_model_file() const;
  void clear_cpu_model_file();
  static const int kCpuModelFileFieldNumber = 2;
  const ::std::string& cpu_model_file() const;
  void set_cpu_model_file(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_model_file(::std::string&& value);
  #endif
  void set_cpu_model_file(const char* value);
  void set_cpu_model_file(const char* value, size_t size);
  ::std::string* mutable_cpu_model_file();
  ::std::string* release_cpu_model_file();
  void set_allocated_cpu_model_file(::std::string* cpu_model_file);

  // optional string gpu_model_file = 3;
  bool has_gpu_model_file() const;
  void clear_gpu_model_file();
  static const int kGpuModelFileFieldNumber = 3;
  const ::std::string& gpu_model_file() const;
  void set_gpu_model_file(const ::std::string& value);
  #if LANG_CXX11
  void set_gpu_model_file(::std::string&& value);
  #endif
  void set_gpu_model_file(const char* value);
  void set_gpu_model_file(const char* value, size_t size);
  ::std::string* mutable_gpu_model_file();
  ::std::string* release_gpu_model_file();
  void set_allocated_gpu_model_file(::std::string* gpu_model_file);

  // optional bool allow_empty_learning_based_data = 6 [default = false];
  bool has_allow_empty_learning_based_data() const;
  void clear_allow_empty_learning_based_data();
  static const int kAllowEmptyLearningBasedDataFieldNumber = 6;
  bool allow_empty_learning_based_data() const;
  void set_allow_empty_learning_based_data(bool value);

  // optional bool allow_empty_output_trajectory = 7 [default = false];
  bool has_allow_empty_output_trajectory() const;
  void clear_allow_empty_output_trajectory();
  static const int kAllowEmptyOutputTrajectoryFieldNumber = 7;
  bool allow_empty_output_trajectory() const;
  void set_allow_empty_output_trajectory(bool value);

  // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
  bool has_model_type() const;
  void clear_model_type();
  static const int kModelTypeFieldNumber = 1;
  ::apollo::planning::LearningModelInferenceTaskConfig_ModelType model_type() const;
  void set_model_type(::apollo::planning::LearningModelInferenceTaskConfig_ModelType value);

  // optional bool use_cuda = 4 [default = true];
  bool has_use_cuda() const;
  void clear_use_cuda();
  static const int kUseCudaFieldNumber = 4;
  bool use_cuda() const;
  void set_use_cuda(bool value);

  // optional double trajectory_delta_t = 5 [default = 0.2];
  bool has_trajectory_delta_t() const;
  void clear_trajectory_delta_t();
  static const int kTrajectoryDeltaTFieldNumber = 5;
  double trajectory_delta_t() const;
  void set_trajectory_delta_t(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.LearningModelInferenceTaskConfig)
 private:
  void set_has_model_type();
  void clear_has_model_type();
  void set_has_cpu_model_file();
  void clear_has_cpu_model_file();
  void set_has_gpu_model_file();
  void clear_has_gpu_model_file();
  void set_has_use_cuda();
  void clear_has_use_cuda();
  void set_has_trajectory_delta_t();
  void clear_has_trajectory_delta_t();
  void set_has_allow_empty_learning_based_data();
  void clear_has_allow_empty_learning_based_data();
  void set_has_allow_empty_output_trajectory();
  void clear_has_allow_empty_output_trajectory();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cpu_model_file_;
  ::google::protobuf::internal::ArenaStringPtr gpu_model_file_;
  bool allow_empty_learning_based_data_;
  bool allow_empty_output_trajectory_;
  int model_type_;
  bool use_cuda_;
  double trajectory_delta_t_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LearningModelInferenceTrajectoryTaskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LearningModelInferenceTrajectoryTaskConfig) */ {
 public:
  LearningModelInferenceTrajectoryTaskConfig();
  virtual ~LearningModelInferenceTrajectoryTaskConfig();

  LearningModelInferenceTrajectoryTaskConfig(const LearningModelInferenceTrajectoryTaskConfig& from);

  inline LearningModelInferenceTrajectoryTaskConfig& operator=(const LearningModelInferenceTrajectoryTaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LearningModelInferenceTrajectoryTaskConfig(LearningModelInferenceTrajectoryTaskConfig&& from) noexcept
    : LearningModelInferenceTrajectoryTaskConfig() {
    *this = ::std::move(from);
  }

  inline LearningModelInferenceTrajectoryTaskConfig& operator=(LearningModelInferenceTrajectoryTaskConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearningModelInferenceTrajectoryTaskConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LearningModelInferenceTrajectoryTaskConfig* internal_default_instance() {
    return reinterpret_cast<const LearningModelInferenceTrajectoryTaskConfig*>(
               &_LearningModelInferenceTrajectoryTaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LearningModelInferenceTrajectoryTaskConfig* other);
  friend void swap(LearningModelInferenceTrajectoryTaskConfig& a, LearningModelInferenceTrajectoryTaskConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LearningModelInferenceTrajectoryTaskConfig* New() const final {
    return CreateMaybeMessage<LearningModelInferenceTrajectoryTaskConfig>(NULL);
  }

  LearningModelInferenceTrajectoryTaskConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LearningModelInferenceTrajectoryTaskConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LearningModelInferenceTrajectoryTaskConfig& from);
  void MergeFrom(const LearningModelInferenceTrajectoryTaskConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearningModelInferenceTrajectoryTaskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  bool has_min_adc_future_trajectory_time_length() const;
  void clear_min_adc_future_trajectory_time_length();
  static const int kMinAdcFutureTrajectoryTimeLengthFieldNumber = 1;
  double min_adc_future_trajectory_time_length() const;
  void set_min_adc_future_trajectory_time_length(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
 private:
  void set_has_min_adc_future_trajectory_time_length();
  void clear_has_min_adc_future_trajectory_time_length();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double min_adc_future_trajectory_time_length_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NaviObstacleDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviObstacleDeciderConfig) */ {
 public:
  NaviObstacleDeciderConfig();
  virtual ~NaviObstacleDeciderConfig();

  NaviObstacleDeciderConfig(const NaviObstacleDeciderConfig& from);

  inline NaviObstacleDeciderConfig& operator=(const NaviObstacleDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NaviObstacleDeciderConfig(NaviObstacleDeciderConfig&& from) noexcept
    : NaviObstacleDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviObstacleDeciderConfig& operator=(NaviObstacleDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaviObstacleDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaviObstacleDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviObstacleDeciderConfig*>(
               &_NaviObstacleDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NaviObstacleDeciderConfig* other);
  friend void swap(NaviObstacleDeciderConfig& a, NaviObstacleDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NaviObstacleDeciderConfig* New() const final {
    return CreateMaybeMessage<NaviObstacleDeciderConfig>(NULL);
  }

  NaviObstacleDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NaviObstacleDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NaviObstacleDeciderConfig& from);
  void MergeFrom(const NaviObstacleDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviObstacleDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min_nudge_distance = 1 [default = 0.2];
  bool has_min_nudge_distance() const;
  void clear_min_nudge_distance();
  static const int kMinNudgeDistanceFieldNumber = 1;
  double min_nudge_distance() const;
  void set_min_nudge_distance(double value);

  // optional double max_nudge_distance = 2 [default = 1.2];
  bool has_max_nudge_distance() const;
  void clear_max_nudge_distance();
  static const int kMaxNudgeDistanceFieldNumber = 2;
  double max_nudge_distance() const;
  void set_max_nudge_distance(double value);

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  bool has_max_allow_nudge_speed() const;
  void clear_max_allow_nudge_speed();
  static const int kMaxAllowNudgeSpeedFieldNumber = 3;
  double max_allow_nudge_speed() const;
  void set_max_allow_nudge_speed(double value);

  // optional double safe_distance = 4 [default = 0.2];
  bool has_safe_distance() const;
  void clear_safe_distance();
  static const int kSafeDistanceFieldNumber = 4;
  double safe_distance() const;
  void set_safe_distance(double value);

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  bool has_nudge_allow_tolerance() const;
  void clear_nudge_allow_tolerance();
  static const int kNudgeAllowToleranceFieldNumber = 5;
  double nudge_allow_tolerance() const;
  void set_nudge_allow_tolerance(double value);

  // optional double judge_dis_coeff = 7 [default = 2];
  bool has_judge_dis_coeff() const;
  void clear_judge_dis_coeff();
  static const int kJudgeDisCoeffFieldNumber = 7;
  double judge_dis_coeff() const;
  void set_judge_dis_coeff(double value);

  // optional double basis_dis_value = 8 [default = 30];
  bool has_basis_dis_value() const;
  void clear_basis_dis_value();
  static const int kBasisDisValueFieldNumber = 8;
  double basis_dis_value() const;
  void set_basis_dis_value(double value);

  // optional uint32 cycles_number = 6 [default = 3];
  bool has_cycles_number() const;
  void clear_cycles_number();
  static const int kCyclesNumberFieldNumber = 6;
  ::google::protobuf::uint32 cycles_number() const;
  void set_cycles_number(::google::protobuf::uint32 value);

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  bool has_max_keep_nudge_cycles() const;
  void clear_max_keep_nudge_cycles();
  static const int kMaxKeepNudgeCyclesFieldNumber = 11;
  ::google::protobuf::uint32 max_keep_nudge_cycles() const;
  void set_max_keep_nudge_cycles(::google::protobuf::uint32 value);

  // optional double lateral_velocity_value = 9 [default = 0.5];
  bool has_lateral_velocity_value() const;
  void clear_lateral_velocity_value();
  static const int kLateralVelocityValueFieldNumber = 9;
  double lateral_velocity_value() const;
  void set_lateral_velocity_value(double value);

  // optional double speed_decider_detect_range = 10 [default = 1];
  bool has_speed_decider_detect_range() const;
  void clear_speed_decider_detect_range();
  static const int kSpeedDeciderDetectRangeFieldNumber = 10;
  double speed_decider_detect_range() const;
  void set_speed_decider_detect_range(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviObstacleDeciderConfig)
 private:
  void set_has_min_nudge_distance();
  void clear_has_min_nudge_distance();
  void set_has_max_nudge_distance();
  void clear_has_max_nudge_distance();
  void set_has_max_allow_nudge_speed();
  void clear_has_max_allow_nudge_speed();
  void set_has_safe_distance();
  void clear_has_safe_distance();
  void set_has_nudge_allow_tolerance();
  void clear_has_nudge_allow_tolerance();
  void set_has_cycles_number();
  void clear_has_cycles_number();
  void set_has_judge_dis_coeff();
  void clear_has_judge_dis_coeff();
  void set_has_basis_dis_value();
  void clear_has_basis_dis_value();
  void set_has_lateral_velocity_value();
  void clear_has_lateral_velocity_value();
  void set_has_speed_decider_detect_range();
  void clear_has_speed_decider_detect_range();
  void set_has_max_keep_nudge_cycles();
  void clear_has_max_keep_nudge_cycles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double min_nudge_distance_;
  double max_nudge_distance_;
  double max_allow_nudge_speed_;
  double safe_distance_;
  double nudge_allow_tolerance_;
  double judge_dis_coeff_;
  double basis_dis_value_;
  ::google::protobuf::uint32 cycles_number_;
  ::google::protobuf::uint32 max_keep_nudge_cycles_;
  double lateral_velocity_value_;
  double speed_decider_detect_range_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NaviPathDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviPathDeciderConfig) */ {
 public:
  NaviPathDeciderConfig();
  virtual ~NaviPathDeciderConfig();

  NaviPathDeciderConfig(const NaviPathDeciderConfig& from);

  inline NaviPathDeciderConfig& operator=(const NaviPathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NaviPathDeciderConfig(NaviPathDeciderConfig&& from) noexcept
    : NaviPathDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviPathDeciderConfig& operator=(NaviPathDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaviPathDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaviPathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviPathDeciderConfig*>(
               &_NaviPathDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NaviPathDeciderConfig* other);
  friend void swap(NaviPathDeciderConfig& a, NaviPathDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NaviPathDeciderConfig* New() const final {
    return CreateMaybeMessage<NaviPathDeciderConfig>(NULL);
  }

  NaviPathDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NaviPathDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NaviPathDeciderConfig& from);
  void MergeFrom(const NaviPathDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviPathDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  bool has_move_dest_lane_config_talbe() const;
  void clear_move_dest_lane_config_talbe();
  static const int kMoveDestLaneConfigTalbeFieldNumber = 7;
  private:
  const ::apollo::planning::MoveDestLaneConfigTable& _internal_move_dest_lane_config_talbe() const;
  public:
  const ::apollo::planning::MoveDestLaneConfigTable& move_dest_lane_config_talbe() const;
  ::apollo::planning::MoveDestLaneConfigTable* release_move_dest_lane_config_talbe();
  ::apollo::planning::MoveDestLaneConfigTable* mutable_move_dest_lane_config_talbe();
  void set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe);

  // optional double max_kappa_threshold = 9 [default = 0];
  bool has_max_kappa_threshold() const;
  void clear_max_kappa_threshold();
  static const int kMaxKappaThresholdFieldNumber = 9;
  double max_kappa_threshold() const;
  void set_max_kappa_threshold(double value);

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  bool has_kappa_move_dest_lane_compensation() const;
  void clear_kappa_move_dest_lane_compensation();
  static const int kKappaMoveDestLaneCompensationFieldNumber = 10;
  double kappa_move_dest_lane_compensation() const;
  void set_kappa_move_dest_lane_compensation(double value);

  // optional uint32 start_plan_point_from = 11 [default = 0];
  bool has_start_plan_point_from() const;
  void clear_start_plan_point_from();
  static const int kStartPlanPointFromFieldNumber = 11;
  ::google::protobuf::uint32 start_plan_point_from() const;
  void set_start_plan_point_from(::google::protobuf::uint32 value);

  // optional uint32 min_look_forward_time = 2 [default = 2];
  bool has_min_look_forward_time() const;
  void clear_min_look_forward_time();
  static const int kMinLookForwardTimeFieldNumber = 2;
  ::google::protobuf::uint32 min_look_forward_time() const;
  void set_min_look_forward_time(::google::protobuf::uint32 value);

  // optional double min_path_length = 1 [default = 5];
  bool has_min_path_length() const;
  void clear_min_path_length();
  static const int kMinPathLengthFieldNumber = 1;
  double min_path_length() const;
  void set_min_path_length(double value);

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  bool has_max_keep_lane_distance() const;
  void clear_max_keep_lane_distance();
  static const int kMaxKeepLaneDistanceFieldNumber = 3;
  double max_keep_lane_distance() const;
  void set_max_keep_lane_distance(double value);

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  bool has_max_keep_lane_shift_y() const;
  void clear_max_keep_lane_shift_y();
  static const int kMaxKeepLaneShiftYFieldNumber = 4;
  double max_keep_lane_shift_y() const;
  void set_max_keep_lane_shift_y(double value);

  // optional double min_keep_lane_offset = 5 [default = 15];
  bool has_min_keep_lane_offset() const;
  void clear_min_keep_lane_offset();
  static const int kMinKeepLaneOffsetFieldNumber = 5;
  double min_keep_lane_offset() const;
  void set_min_keep_lane_offset(double value);

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  bool has_keep_lane_shift_compensation() const;
  void clear_keep_lane_shift_compensation();
  static const int kKeepLaneShiftCompensationFieldNumber = 6;
  double keep_lane_shift_compensation() const;
  void set_keep_lane_shift_compensation(double value);

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  bool has_move_dest_lane_compensation() const;
  void clear_move_dest_lane_compensation();
  static const int kMoveDestLaneCompensationFieldNumber = 8;
  double move_dest_lane_compensation() const;
  void set_move_dest_lane_compensation(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviPathDeciderConfig)
 private:
  void set_has_min_path_length();
  void clear_has_min_path_length();
  void set_has_min_look_forward_time();
  void clear_has_min_look_forward_time();
  void set_has_max_keep_lane_distance();
  void clear_has_max_keep_lane_distance();
  void set_has_max_keep_lane_shift_y();
  void clear_has_max_keep_lane_shift_y();
  void set_has_min_keep_lane_offset();
  void clear_has_min_keep_lane_offset();
  void set_has_keep_lane_shift_compensation();
  void clear_has_keep_lane_shift_compensation();
  void set_has_move_dest_lane_config_talbe();
  void clear_has_move_dest_lane_config_talbe();
  void set_has_move_dest_lane_compensation();
  void clear_has_move_dest_lane_compensation();
  void set_has_max_kappa_threshold();
  void clear_has_max_kappa_threshold();
  void set_has_kappa_move_dest_lane_compensation();
  void clear_has_kappa_move_dest_lane_compensation();
  void set_has_start_plan_point_from();
  void clear_has_start_plan_point_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe_;
  double max_kappa_threshold_;
  double kappa_move_dest_lane_compensation_;
  ::google::protobuf::uint32 start_plan_point_from_;
  ::google::protobuf::uint32 min_look_forward_time_;
  double min_path_length_;
  double max_keep_lane_distance_;
  double max_keep_lane_shift_y_;
  double min_keep_lane_offset_;
  double keep_lane_shift_compensation_;
  double move_dest_lane_compensation_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveDestLaneConfigTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MoveDestLaneConfigTable) */ {
 public:
  MoveDestLaneConfigTable();
  virtual ~MoveDestLaneConfigTable();

  MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from);

  inline MoveDestLaneConfigTable& operator=(const MoveDestLaneConfigTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveDestLaneConfigTable(MoveDestLaneConfigTable&& from) noexcept
    : MoveDestLaneConfigTable() {
    *this = ::std::move(from);
  }

  inline MoveDestLaneConfigTable& operator=(MoveDestLaneConfigTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveDestLaneConfigTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveDestLaneConfigTable* internal_default_instance() {
    return reinterpret_cast<const MoveDestLaneConfigTable*>(
               &_MoveDestLaneConfigTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MoveDestLaneConfigTable* other);
  friend void swap(MoveDestLaneConfigTable& a, MoveDestLaneConfigTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveDestLaneConfigTable* New() const final {
    return CreateMaybeMessage<MoveDestLaneConfigTable>(NULL);
  }

  MoveDestLaneConfigTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveDestLaneConfigTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveDestLaneConfigTable& from);
  void MergeFrom(const MoveDestLaneConfigTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDestLaneConfigTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  int lateral_shift_size() const;
  void clear_lateral_shift();
  static const int kLateralShiftFieldNumber = 1;
  ::apollo::planning::ShiftConfig* mutable_lateral_shift(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
      mutable_lateral_shift();
  const ::apollo::planning::ShiftConfig& lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* add_lateral_shift();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
      lateral_shift() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.MoveDestLaneConfigTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig > lateral_shift_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShiftConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ShiftConfig) */ {
 public:
  ShiftConfig();
  virtual ~ShiftConfig();

  ShiftConfig(const ShiftConfig& from);

  inline ShiftConfig& operator=(const ShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShiftConfig(ShiftConfig&& from) noexcept
    : ShiftConfig() {
    *this = ::std::move(from);
  }

  inline ShiftConfig& operator=(ShiftConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShiftConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShiftConfig* internal_default_instance() {
    return reinterpret_cast<const ShiftConfig*>(
               &_ShiftConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ShiftConfig* other);
  friend void swap(ShiftConfig& a, ShiftConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShiftConfig* New() const final {
    return CreateMaybeMessage<ShiftConfig>(NULL);
  }

  ShiftConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShiftConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShiftConfig& from);
  void MergeFrom(const ShiftConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_speed = 1 [default = 4.16];
  bool has_max_speed() const;
  void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 1;
  double max_speed() const;
  void set_max_speed(double value);

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  bool has_max_move_dest_lane_shift_y() const;
  void clear_max_move_dest_lane_shift_y();
  static const int kMaxMoveDestLaneShiftYFieldNumber = 3;
  double max_move_dest_lane_shift_y() const;
  void set_max_move_dest_lane_shift_y(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ShiftConfig)
 private:
  void set_has_max_speed();
  void clear_has_max_speed();
  void set_has_max_move_dest_lane_shift_y();
  void clear_has_max_move_dest_lane_shift_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double max_speed_;
  double max_move_dest_lane_shift_y_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NaviSpeedDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviSpeedDeciderConfig) */ {
 public:
  NaviSpeedDeciderConfig();
  virtual ~NaviSpeedDeciderConfig();

  NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from);

  inline NaviSpeedDeciderConfig& operator=(const NaviSpeedDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NaviSpeedDeciderConfig(NaviSpeedDeciderConfig&& from) noexcept
    : NaviSpeedDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviSpeedDeciderConfig& operator=(NaviSpeedDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaviSpeedDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaviSpeedDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviSpeedDeciderConfig*>(
               &_NaviSpeedDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(NaviSpeedDeciderConfig* other);
  friend void swap(NaviSpeedDeciderConfig& a, NaviSpeedDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NaviSpeedDeciderConfig* New() const final {
    return CreateMaybeMessage<NaviSpeedDeciderConfig>(NULL);
  }

  NaviSpeedDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NaviSpeedDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NaviSpeedDeciderConfig& from);
  void MergeFrom(const NaviSpeedDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviSpeedDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double kappa_preview = 17 [default = 0];
  bool has_kappa_preview() const;
  void clear_kappa_preview();
  static const int kKappaPreviewFieldNumber = 17;
  double kappa_preview() const;
  void set_kappa_preview(double value);

  // optional double kappa_threshold = 18 [default = 0];
  bool has_kappa_threshold() const;
  void clear_kappa_threshold();
  static const int kKappaThresholdFieldNumber = 18;
  double kappa_threshold() const;
  void set_kappa_threshold(double value);

  // optional bool enable_safe_path = 14 [default = true];
  bool has_enable_safe_path() const;
  void clear_enable_safe_path();
  static const int kEnableSafePathFieldNumber = 14;
  bool enable_safe_path() const;
  void set_enable_safe_path(bool value);

  // optional bool enable_planning_start_point = 15 [default = true];
  bool has_enable_planning_start_point() const;
  void clear_enable_planning_start_point();
  static const int kEnablePlanningStartPointFieldNumber = 15;
  bool enable_planning_start_point() const;
  void set_enable_planning_start_point(bool value);

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  bool has_enable_accel_auto_compensation() const;
  void clear_enable_accel_auto_compensation();
  static const int kEnableAccelAutoCompensationFieldNumber = 16;
  bool enable_accel_auto_compensation() const;
  void set_enable_accel_auto_compensation(bool value);

  // optional double preferred_accel = 1 [default = 2];
  bool has_preferred_accel() const;
  void clear_preferred_accel();
  static const int kPreferredAccelFieldNumber = 1;
  double preferred_accel() const;
  void set_preferred_accel(double value);

  // optional double preferred_decel = 2 [default = 2];
  bool has_preferred_decel() const;
  void clear_preferred_decel();
  static const int kPreferredDecelFieldNumber = 2;
  double preferred_decel() const;
  void set_preferred_decel(double value);

  // optional double preferred_jerk = 3 [default = 2];
  bool has_preferred_jerk() const;
  void clear_preferred_jerk();
  static const int kPreferredJerkFieldNumber = 3;
  double preferred_jerk() const;
  void set_preferred_jerk(double value);

  // optional double max_accel = 4 [default = 4];
  bool has_max_accel() const;
  void clear_max_accel();
  static const int kMaxAccelFieldNumber = 4;
  double max_accel() const;
  void set_max_accel(double value);

  // optional double max_decel = 5 [default = 5];
  bool has_max_decel() const;
  void clear_max_decel();
  static const int kMaxDecelFieldNumber = 5;
  double max_decel() const;
  void set_max_decel(double value);

  // optional double obstacle_buffer = 6 [default = 0.5];
  bool has_obstacle_buffer() const;
  void clear_obstacle_buffer();
  static const int kObstacleBufferFieldNumber = 6;
  double obstacle_buffer() const;
  void set_obstacle_buffer(double value);

  // optional double safe_distance_base = 7 [default = 2];
  bool has_safe_distance_base() const;
  void clear_safe_distance_base();
  static const int kSafeDistanceBaseFieldNumber = 7;
  double safe_distance_base() const;
  void set_safe_distance_base(double value);

  // optional double safe_distance_ratio = 8 [default = 1];
  bool has_safe_distance_ratio() const;
  void clear_safe_distance_ratio();
  static const int kSafeDistanceRatioFieldNumber = 8;
  double safe_distance_ratio() const;
  void set_safe_distance_ratio(double value);

  // optional double following_accel_ratio = 9 [default = 0.5];
  bool has_following_accel_ratio() const;
  void clear_following_accel_ratio();
  static const int kFollowingAccelRatioFieldNumber = 9;
  double following_accel_ratio() const;
  void set_following_accel_ratio(double value);

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  bool has_soft_centric_accel_limit() const;
  void clear_soft_centric_accel_limit();
  static const int kSoftCentricAccelLimitFieldNumber = 10;
  double soft_centric_accel_limit() const;
  void set_soft_centric_accel_limit(double value);

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  bool has_hard_centric_accel_limit() const;
  void clear_hard_centric_accel_limit();
  static const int kHardCentricAccelLimitFieldNumber = 11;
  double hard_centric_accel_limit() const;
  void set_hard_centric_accel_limit(double value);

  // optional double hard_speed_limit = 12 [default = 100];
  bool has_hard_speed_limit() const;
  void clear_hard_speed_limit();
  static const int kHardSpeedLimitFieldNumber = 12;
  double hard_speed_limit() const;
  void set_hard_speed_limit(double value);

  // optional double hard_accel_limit = 13 [default = 10];
  bool has_hard_accel_limit() const;
  void clear_hard_accel_limit();
  static const int kHardAccelLimitFieldNumber = 13;
  double hard_accel_limit() const;
  void set_hard_accel_limit(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviSpeedDeciderConfig)
 private:
  void set_has_preferred_accel();
  void clear_has_preferred_accel();
  void set_has_preferred_decel();
  void clear_has_preferred_decel();
  void set_has_preferred_jerk();
  void clear_has_preferred_jerk();
  void set_has_max_accel();
  void clear_has_max_accel();
  void set_has_max_decel();
  void clear_has_max_decel();
  void set_has_obstacle_buffer();
  void clear_has_obstacle_buffer();
  void set_has_safe_distance_base();
  void clear_has_safe_distance_base();
  void set_has_safe_distance_ratio();
  void clear_has_safe_distance_ratio();
  void set_has_following_accel_ratio();
  void clear_has_following_accel_ratio();
  void set_has_soft_centric_accel_limit();
  void clear_has_soft_centric_accel_limit();
  void set_has_hard_centric_accel_limit();
  void clear_has_hard_centric_accel_limit();
  void set_has_hard_speed_limit();
  void clear_has_hard_speed_limit();
  void set_has_hard_accel_limit();
  void clear_has_hard_accel_limit();
  void set_has_enable_safe_path();
  void clear_has_enable_safe_path();
  void set_has_enable_planning_start_point();
  void clear_has_enable_planning_start_point();
  void set_has_enable_accel_auto_compensation();
  void clear_has_enable_accel_auto_compensation();
  void set_has_kappa_preview();
  void clear_has_kappa_preview();
  void set_has_kappa_threshold();
  void clear_has_kappa_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double kappa_preview_;
  double kappa_threshold_;
  bool enable_safe_path_;
  bool enable_planning_start_point_;
  bool enable_accel_auto_compensation_;
  double preferred_accel_;
  double preferred_decel_;
  double preferred_jerk_;
  double max_accel_;
  double max_decel_;
  double obstacle_buffer_;
  double safe_distance_base_;
  double safe_distance_ratio_;
  double following_accel_ratio_;
  double soft_centric_accel_limit_;
  double hard_centric_accel_limit_;
  double hard_speed_limit_;
  double hard_accel_limit_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathAssessmentDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathAssessmentDeciderConfig) */ {
 public:
  PathAssessmentDeciderConfig();
  virtual ~PathAssessmentDeciderConfig();

  PathAssessmentDeciderConfig(const PathAssessmentDeciderConfig& from);

  inline PathAssessmentDeciderConfig& operator=(const PathAssessmentDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathAssessmentDeciderConfig(PathAssessmentDeciderConfig&& from) noexcept
    : PathAssessmentDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathAssessmentDeciderConfig& operator=(PathAssessmentDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathAssessmentDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathAssessmentDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathAssessmentDeciderConfig*>(
               &_PathAssessmentDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PathAssessmentDeciderConfig* other);
  friend void swap(PathAssessmentDeciderConfig& a, PathAssessmentDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathAssessmentDeciderConfig* New() const final {
    return CreateMaybeMessage<PathAssessmentDeciderConfig>(NULL);
  }

  PathAssessmentDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathAssessmentDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathAssessmentDeciderConfig& from);
  void MergeFrom(const PathAssessmentDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathAssessmentDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.PathAssessmentDeciderConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathBoundsDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathBoundsDeciderConfig) */ {
 public:
  PathBoundsDeciderConfig();
  virtual ~PathBoundsDeciderConfig();

  PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from);

  inline PathBoundsDeciderConfig& operator=(const PathBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathBoundsDeciderConfig(PathBoundsDeciderConfig&& from) noexcept
    : PathBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathBoundsDeciderConfig& operator=(PathBoundsDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathBoundsDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathBoundsDeciderConfig*>(
               &_PathBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PathBoundsDeciderConfig* other);
  friend void swap(PathBoundsDeciderConfig& a, PathBoundsDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathBoundsDeciderConfig* New() const final {
    return CreateMaybeMessage<PathBoundsDeciderConfig>(NULL);
  }

  PathBoundsDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathBoundsDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathBoundsDeciderConfig& from);
  void MergeFrom(const PathBoundsDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathBoundsDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_lane_borrowing = 1;
  bool has_is_lane_borrowing() const;
  void clear_is_lane_borrowing();
  static const int kIsLaneBorrowingFieldNumber = 1;
  bool is_lane_borrowing() const;
  void set_is_lane_borrowing(bool value);

  // optional bool is_pull_over = 2;
  bool has_is_pull_over() const;
  void clear_is_pull_over();
  static const int kIsPullOverFieldNumber = 2;
  bool is_pull_over() const;
  void set_is_pull_over(bool value);

  // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
  bool has_is_extend_lane_bounds_to_include_adc() const;
  void clear_is_extend_lane_bounds_to_include_adc();
  static const int kIsExtendLaneBoundsToIncludeAdcFieldNumber = 8;
  bool is_extend_lane_bounds_to_include_adc() const;
  void set_is_extend_lane_bounds_to_include_adc(bool value);

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  bool has_pull_over_destination_to_adc_buffer() const;
  void clear_pull_over_destination_to_adc_buffer();
  static const int kPullOverDestinationToAdcBufferFieldNumber = 3;
  double pull_over_destination_to_adc_buffer() const;
  void set_pull_over_destination_to_adc_buffer(double value);

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  bool has_pull_over_destination_to_pathend_buffer() const;
  void clear_pull_over_destination_to_pathend_buffer();
  static const int kPullOverDestinationToPathendBufferFieldNumber = 4;
  double pull_over_destination_to_pathend_buffer() const;
  void set_pull_over_destination_to_pathend_buffer(double value);

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  bool has_pull_over_road_edge_buffer() const;
  void clear_pull_over_road_edge_buffer();
  static const int kPullOverRoadEdgeBufferFieldNumber = 5;
  double pull_over_road_edge_buffer() const;
  void set_pull_over_road_edge_buffer(double value);

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  bool has_pull_over_approach_lon_distance_adjust_factor() const;
  void clear_pull_over_approach_lon_distance_adjust_factor();
  static const int kPullOverApproachLonDistanceAdjustFactorFieldNumber = 6;
  double pull_over_approach_lon_distance_adjust_factor() const;
  void set_pull_over_approach_lon_distance_adjust_factor(double value);

  // optional double adc_buffer_coeff = 7 [default = 1];
  bool has_adc_buffer_coeff() const;
  void clear_adc_buffer_coeff();
  static const int kAdcBufferCoeffFieldNumber = 7;
  double adc_buffer_coeff() const;
  void set_adc_buffer_coeff(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathBoundsDeciderConfig)
 private:
  void set_has_is_lane_borrowing();
  void clear_has_is_lane_borrowing();
  void set_has_is_pull_over();
  void clear_has_is_pull_over();
  void set_has_pull_over_destination_to_adc_buffer();
  void clear_has_pull_over_destination_to_adc_buffer();
  void set_has_pull_over_destination_to_pathend_buffer();
  void clear_has_pull_over_destination_to_pathend_buffer();
  void set_has_pull_over_road_edge_buffer();
  void clear_has_pull_over_road_edge_buffer();
  void set_has_pull_over_approach_lon_distance_adjust_factor();
  void clear_has_pull_over_approach_lon_distance_adjust_factor();
  void set_has_adc_buffer_coeff();
  void clear_has_adc_buffer_coeff();
  void set_has_is_extend_lane_bounds_to_include_adc();
  void clear_has_is_extend_lane_bounds_to_include_adc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool is_lane_borrowing_;
  bool is_pull_over_;
  bool is_extend_lane_bounds_to_include_adc_;
  double pull_over_destination_to_adc_buffer_;
  double pull_over_destination_to_pathend_buffer_;
  double pull_over_road_edge_buffer_;
  double pull_over_approach_lon_distance_adjust_factor_;
  double adc_buffer_coeff_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathDeciderConfig) */ {
 public:
  PathDeciderConfig();
  virtual ~PathDeciderConfig();

  PathDeciderConfig(const PathDeciderConfig& from);

  inline PathDeciderConfig& operator=(const PathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathDeciderConfig(PathDeciderConfig&& from) noexcept
    : PathDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathDeciderConfig& operator=(PathDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathDeciderConfig*>(
               &_PathDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PathDeciderConfig* other);
  friend void swap(PathDeciderConfig& a, PathDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathDeciderConfig* New() const final {
    return CreateMaybeMessage<PathDeciderConfig>(NULL);
  }

  PathDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathDeciderConfig& from);
  void MergeFrom(const PathDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double static_obstacle_buffer = 1 [default = 0.3];
  bool has_static_obstacle_buffer() const;
  void clear_static_obstacle_buffer();
  static const int kStaticObstacleBufferFieldNumber = 1;
  double static_obstacle_buffer() const;
  void set_static_obstacle_buffer(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathDeciderConfig)
 private:
  void set_has_static_obstacle_buffer();
  void clear_has_static_obstacle_buffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double static_obstacle_buffer_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathLaneBorrowDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathLaneBorrowDeciderConfig) */ {
 public:
  PathLaneBorrowDeciderConfig();
  virtual ~PathLaneBorrowDeciderConfig();

  PathLaneBorrowDeciderConfig(const PathLaneBorrowDeciderConfig& from);

  inline PathLaneBorrowDeciderConfig& operator=(const PathLaneBorrowDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathLaneBorrowDeciderConfig(PathLaneBorrowDeciderConfig&& from) noexcept
    : PathLaneBorrowDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathLaneBorrowDeciderConfig& operator=(PathLaneBorrowDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathLaneBorrowDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathLaneBorrowDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathLaneBorrowDeciderConfig*>(
               &_PathLaneBorrowDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PathLaneBorrowDeciderConfig* other);
  friend void swap(PathLaneBorrowDeciderConfig& a, PathLaneBorrowDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathLaneBorrowDeciderConfig* New() const final {
    return CreateMaybeMessage<PathLaneBorrowDeciderConfig>(NULL);
  }

  PathLaneBorrowDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathLaneBorrowDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathLaneBorrowDeciderConfig& from);
  void MergeFrom(const PathLaneBorrowDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathLaneBorrowDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool allow_lane_borrowing = 1;
  bool has_allow_lane_borrowing() const;
  void clear_allow_lane_borrowing();
  static const int kAllowLaneBorrowingFieldNumber = 1;
  bool allow_lane_borrowing() const;
  void set_allow_lane_borrowing(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathLaneBorrowDeciderConfig)
 private:
  void set_has_allow_lane_borrowing();
  void clear_has_allow_lane_borrowing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool allow_lane_borrowing_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathReferenceDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathReferenceDeciderConfig) */ {
 public:
  PathReferenceDeciderConfig();
  virtual ~PathReferenceDeciderConfig();

  PathReferenceDeciderConfig(const PathReferenceDeciderConfig& from);

  inline PathReferenceDeciderConfig& operator=(const PathReferenceDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathReferenceDeciderConfig(PathReferenceDeciderConfig&& from) noexcept
    : PathReferenceDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathReferenceDeciderConfig& operator=(PathReferenceDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathReferenceDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathReferenceDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathReferenceDeciderConfig*>(
               &_PathReferenceDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(PathReferenceDeciderConfig* other);
  friend void swap(PathReferenceDeciderConfig& a, PathReferenceDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathReferenceDeciderConfig* New() const final {
    return CreateMaybeMessage<PathReferenceDeciderConfig>(NULL);
  }

  PathReferenceDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathReferenceDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathReferenceDeciderConfig& from);
  void MergeFrom(const PathReferenceDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathReferenceDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double weight_x_ref_path_reference = 2;
  bool has_weight_x_ref_path_reference() const;
  void clear_weight_x_ref_path_reference();
  static const int kWeightXRefPathReferenceFieldNumber = 2;
  double weight_x_ref_path_reference() const;
  void set_weight_x_ref_path_reference(double value);

  // optional uint32 min_path_reference_length = 1 [default = 20];
  bool has_min_path_reference_length() const;
  void clear_min_path_reference_length();
  static const int kMinPathReferenceLengthFieldNumber = 1;
  ::google::protobuf::uint32 min_path_reference_length() const;
  void set_min_path_reference_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathReferenceDeciderConfig)
 private:
  void set_has_min_path_reference_length();
  void clear_has_min_path_reference_length();
  void set_has_weight_x_ref_path_reference();
  void clear_has_weight_x_ref_path_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double weight_x_ref_path_reference_;
  ::google::protobuf::uint32 min_path_reference_length_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathReuseDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathReuseDeciderConfig) */ {
 public:
  PathReuseDeciderConfig();
  virtual ~PathReuseDeciderConfig();

  PathReuseDeciderConfig(const PathReuseDeciderConfig& from);

  inline PathReuseDeciderConfig& operator=(const PathReuseDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathReuseDeciderConfig(PathReuseDeciderConfig&& from) noexcept
    : PathReuseDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathReuseDeciderConfig& operator=(PathReuseDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathReuseDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathReuseDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathReuseDeciderConfig*>(
               &_PathReuseDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(PathReuseDeciderConfig* other);
  friend void swap(PathReuseDeciderConfig& a, PathReuseDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathReuseDeciderConfig* New() const final {
    return CreateMaybeMessage<PathReuseDeciderConfig>(NULL);
  }

  PathReuseDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathReuseDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathReuseDeciderConfig& from);
  void MergeFrom(const PathReuseDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathReuseDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool reuse_path = 1;
  bool has_reuse_path() const;
  void clear_reuse_path();
  static const int kReusePathFieldNumber = 1;
  bool reuse_path() const;
  void set_reuse_path(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PathReuseDeciderConfig)
 private:
  void set_has_reuse_path();
  void clear_has_reuse_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool reuse_path_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiecewiseJerkNonlinearSpeedOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig) */ {
 public:
  PiecewiseJerkNonlinearSpeedOptimizerConfig();
  virtual ~PiecewiseJerkNonlinearSpeedOptimizerConfig();

  PiecewiseJerkNonlinearSpeedOptimizerConfig(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from);

  inline PiecewiseJerkNonlinearSpeedOptimizerConfig& operator=(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiecewiseJerkNonlinearSpeedOptimizerConfig(PiecewiseJerkNonlinearSpeedOptimizerConfig&& from) noexcept
    : PiecewiseJerkNonlinearSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkNonlinearSpeedOptimizerConfig& operator=(PiecewiseJerkNonlinearSpeedOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkNonlinearSpeedOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseJerkNonlinearSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkNonlinearSpeedOptimizerConfig*>(
               &_PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other);
  friend void swap(PiecewiseJerkNonlinearSpeedOptimizerConfig& a, PiecewiseJerkNonlinearSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseJerkNonlinearSpeedOptimizerConfig* New() const final {
    return CreateMaybeMessage<PiecewiseJerkNonlinearSpeedOptimizerConfig>(NULL);
  }

  PiecewiseJerkNonlinearSpeedOptimizerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseJerkNonlinearSpeedOptimizerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from);
  void MergeFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_warm_start = 100 [default = true];
  bool has_use_warm_start() const;
  void clear_use_warm_start();
  static const int kUseWarmStartFieldNumber = 100;
  bool use_warm_start() const;
  void set_use_warm_start(bool value);

  // optional double acc_weight = 1 [default = 500];
  bool has_acc_weight() const;
  void clear_acc_weight();
  static const int kAccWeightFieldNumber = 1;
  double acc_weight() const;
  void set_acc_weight(double value);

  // optional double jerk_weight = 2 [default = 100];
  bool has_jerk_weight() const;
  void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 2;
  double jerk_weight() const;
  void set_jerk_weight(double value);

  // optional double lat_acc_weight = 3 [default = 500];
  bool has_lat_acc_weight() const;
  void clear_lat_acc_weight();
  static const int kLatAccWeightFieldNumber = 3;
  double lat_acc_weight() const;
  void set_lat_acc_weight(double value);

  // optional double s_potential_weight = 4 [default = 10];
  bool has_s_potential_weight() const;
  void clear_s_potential_weight();
  static const int kSPotentialWeightFieldNumber = 4;
  double s_potential_weight() const;
  void set_s_potential_weight(double value);

  // optional double ref_v_weight = 5 [default = 10];
  bool has_ref_v_weight() const;
  void clear_ref_v_weight();
  static const int kRefVWeightFieldNumber = 5;
  double ref_v_weight() const;
  void set_ref_v_weight(double value);

  // optional double ref_s_weight = 6 [default = 10];
  bool has_ref_s_weight() const;
  void clear_ref_s_weight();
  static const int kRefSWeightFieldNumber = 6;
  double ref_s_weight() const;
  void set_ref_s_weight(double value);

  // optional double end_s_weight = 7 [default = 10];
  bool has_end_s_weight() const;
  void clear_end_s_weight();
  static const int kEndSWeightFieldNumber = 7;
  double end_s_weight() const;
  void set_end_s_weight(double value);

  // optional double end_v_weight = 8 [default = 10];
  bool has_end_v_weight() const;
  void clear_end_v_weight();
  static const int kEndVWeightFieldNumber = 8;
  double end_v_weight() const;
  void set_end_v_weight(double value);

  // optional double end_a_weight = 9 [default = 10];
  bool has_end_a_weight() const;
  void clear_end_a_weight();
  static const int kEndAWeightFieldNumber = 9;
  double end_a_weight() const;
  void set_end_a_weight(double value);

  // optional double soft_s_bound_weight = 10 [default = 10];
  bool has_soft_s_bound_weight() const;
  void clear_soft_s_bound_weight();
  static const int kSoftSBoundWeightFieldNumber = 10;
  double soft_s_bound_weight() const;
  void set_soft_s_bound_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
 private:
  void set_has_acc_weight();
  void clear_has_acc_weight();
  void set_has_jerk_weight();
  void clear_has_jerk_weight();
  void set_has_lat_acc_weight();
  void clear_has_lat_acc_weight();
  void set_has_s_potential_weight();
  void clear_has_s_potential_weight();
  void set_has_ref_v_weight();
  void clear_has_ref_v_weight();
  void set_has_ref_s_weight();
  void clear_has_ref_s_weight();
  void set_has_end_s_weight();
  void clear_has_end_s_weight();
  void set_has_end_v_weight();
  void clear_has_end_v_weight();
  void set_has_end_a_weight();
  void clear_has_end_a_weight();
  void set_has_soft_s_bound_weight();
  void clear_has_soft_s_bound_weight();
  void set_has_use_warm_start();
  void clear_has_use_warm_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool use_warm_start_;
  double acc_weight_;
  double jerk_weight_;
  double lat_acc_weight_;
  double s_potential_weight_;
  double ref_v_weight_;
  double ref_s_weight_;
  double end_s_weight_;
  double end_v_weight_;
  double end_a_weight_;
  double soft_s_bound_weight_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiecewiseJerkPathOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkPathOptimizerConfig) */ {
 public:
  PiecewiseJerkPathOptimizerConfig();
  virtual ~PiecewiseJerkPathOptimizerConfig();

  PiecewiseJerkPathOptimizerConfig(const PiecewiseJerkPathOptimizerConfig& from);

  inline PiecewiseJerkPathOptimizerConfig& operator=(const PiecewiseJerkPathOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiecewiseJerkPathOptimizerConfig(PiecewiseJerkPathOptimizerConfig&& from) noexcept
    : PiecewiseJerkPathOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkPathOptimizerConfig& operator=(PiecewiseJerkPathOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkPathOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseJerkPathOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathOptimizerConfig*>(
               &_PiecewiseJerkPathOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(PiecewiseJerkPathOptimizerConfig* other);
  friend void swap(PiecewiseJerkPathOptimizerConfig& a, PiecewiseJerkPathOptimizerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseJerkPathOptimizerConfig* New() const final {
    return CreateMaybeMessage<PiecewiseJerkPathOptimizerConfig>(NULL);
  }

  PiecewiseJerkPathOptimizerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseJerkPathOptimizerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiecewiseJerkPathOptimizerConfig& from);
  void MergeFrom(const PiecewiseJerkPathOptimizerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkPathOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
  bool has_default_path_config() const;
  void clear_default_path_config();
  static const int kDefaultPathConfigFieldNumber = 1;
  private:
  const ::apollo::planning::PiecewiseJerkPathWeights& _internal_default_path_config() const;
  public:
  const ::apollo::planning::PiecewiseJerkPathWeights& default_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* release_default_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* mutable_default_path_config();
  void set_allocated_default_path_config(::apollo::planning::PiecewiseJerkPathWeights* default_path_config);

  // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  bool has_lane_change_path_config() const;
  void clear_lane_change_path_config();
  static const int kLaneChangePathConfigFieldNumber = 2;
  private:
  const ::apollo::planning::PiecewiseJerkPathWeights& _internal_lane_change_path_config() const;
  public:
  const ::apollo::planning::PiecewiseJerkPathWeights& lane_change_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* release_lane_change_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* mutable_lane_change_path_config();
  void set_allocated_lane_change_path_config(::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config);

  // optional double path_reference_l_weight = 3 [default = 0];
  bool has_path_reference_l_weight() const;
  void clear_path_reference_l_weight();
  static const int kPathReferenceLWeightFieldNumber = 3;
  double path_reference_l_weight() const;
  void set_path_reference_l_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkPathOptimizerConfig)
 private:
  void set_has_default_path_config();
  void clear_has_default_path_config();
  void set_has_lane_change_path_config();
  void clear_has_lane_change_path_config();
  void set_has_path_reference_l_weight();
  void clear_has_path_reference_l_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::PiecewiseJerkPathWeights* default_path_config_;
  ::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config_;
  double path_reference_l_weight_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiecewiseJerkPathWeights : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkPathWeights) */ {
 public:
  PiecewiseJerkPathWeights();
  virtual ~PiecewiseJerkPathWeights();

  PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from);

  inline PiecewiseJerkPathWeights& operator=(const PiecewiseJerkPathWeights& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiecewiseJerkPathWeights(PiecewiseJerkPathWeights&& from) noexcept
    : PiecewiseJerkPathWeights() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkPathWeights& operator=(PiecewiseJerkPathWeights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkPathWeights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseJerkPathWeights* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathWeights*>(
               &_PiecewiseJerkPathWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(PiecewiseJerkPathWeights* other);
  friend void swap(PiecewiseJerkPathWeights& a, PiecewiseJerkPathWeights& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseJerkPathWeights* New() const final {
    return CreateMaybeMessage<PiecewiseJerkPathWeights>(NULL);
  }

  PiecewiseJerkPathWeights* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseJerkPathWeights>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiecewiseJerkPathWeights& from);
  void MergeFrom(const PiecewiseJerkPathWeights& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkPathWeights* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double l_weight = 1 [default = 1];
  bool has_l_weight() const;
  void clear_l_weight();
  static const int kLWeightFieldNumber = 1;
  double l_weight() const;
  void set_l_weight(double value);

  // optional double dl_weight = 2 [default = 100];
  bool has_dl_weight() const;
  void clear_dl_weight();
  static const int kDlWeightFieldNumber = 2;
  double dl_weight() const;
  void set_dl_weight(double value);

  // optional double ddl_weight = 3 [default = 1000];
  bool has_ddl_weight() const;
  void clear_ddl_weight();
  static const int kDdlWeightFieldNumber = 3;
  double ddl_weight() const;
  void set_ddl_weight(double value);

  // optional double dddl_weight = 4 [default = 10000];
  bool has_dddl_weight() const;
  void clear_dddl_weight();
  static const int kDddlWeightFieldNumber = 4;
  double dddl_weight() const;
  void set_dddl_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkPathWeights)
 private:
  void set_has_l_weight();
  void clear_has_l_weight();
  void set_has_dl_weight();
  void clear_has_dl_weight();
  void set_has_ddl_weight();
  void clear_has_ddl_weight();
  void set_has_dddl_weight();
  void clear_has_dddl_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double l_weight_;
  double dl_weight_;
  double ddl_weight_;
  double dddl_weight_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiecewiseJerkSpeedOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkSpeedOptimizerConfig) */ {
 public:
  PiecewiseJerkSpeedOptimizerConfig();
  virtual ~PiecewiseJerkSpeedOptimizerConfig();

  PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from);

  inline PiecewiseJerkSpeedOptimizerConfig& operator=(const PiecewiseJerkSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiecewiseJerkSpeedOptimizerConfig(PiecewiseJerkSpeedOptimizerConfig&& from) noexcept
    : PiecewiseJerkSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkSpeedOptimizerConfig& operator=(PiecewiseJerkSpeedOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkSpeedOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseJerkSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkSpeedOptimizerConfig*>(
               &_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(PiecewiseJerkSpeedOptimizerConfig* other);
  friend void swap(PiecewiseJerkSpeedOptimizerConfig& a, PiecewiseJerkSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseJerkSpeedOptimizerConfig* New() const final {
    return CreateMaybeMessage<PiecewiseJerkSpeedOptimizerConfig>(NULL);
  }

  PiecewiseJerkSpeedOptimizerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseJerkSpeedOptimizerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  void MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double acc_weight = 1 [default = 1];
  bool has_acc_weight() const;
  void clear_acc_weight();
  static const int kAccWeightFieldNumber = 1;
  double acc_weight() const;
  void set_acc_weight(double value);

  // optional double jerk_weight = 2 [default = 10];
  bool has_jerk_weight() const;
  void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 2;
  double jerk_weight() const;
  void set_jerk_weight(double value);

  // optional double kappa_penalty_weight = 3 [default = 1000];
  bool has_kappa_penalty_weight() const;
  void clear_kappa_penalty_weight();
  static const int kKappaPenaltyWeightFieldNumber = 3;
  double kappa_penalty_weight() const;
  void set_kappa_penalty_weight(double value);

  // optional double ref_s_weight = 4 [default = 10];
  bool has_ref_s_weight() const;
  void clear_ref_s_weight();
  static const int kRefSWeightFieldNumber = 4;
  double ref_s_weight() const;
  void set_ref_s_weight(double value);

  // optional double ref_v_weight = 5 [default = 10];
  bool has_ref_v_weight() const;
  void clear_ref_v_weight();
  static const int kRefVWeightFieldNumber = 5;
  double ref_v_weight() const;
  void set_ref_v_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
 private:
  void set_has_acc_weight();
  void clear_has_acc_weight();
  void set_has_jerk_weight();
  void clear_has_jerk_weight();
  void set_has_kappa_penalty_weight();
  void clear_has_kappa_penalty_weight();
  void set_has_ref_s_weight();
  void clear_has_ref_s_weight();
  void set_has_ref_v_weight();
  void clear_has_ref_v_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double acc_weight_;
  double jerk_weight_;
  double kappa_penalty_weight_;
  double ref_s_weight_;
  double ref_v_weight_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuleBasedStopDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RuleBasedStopDeciderConfig) */ {
 public:
  RuleBasedStopDeciderConfig();
  virtual ~RuleBasedStopDeciderConfig();

  RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from);

  inline RuleBasedStopDeciderConfig& operator=(const RuleBasedStopDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuleBasedStopDeciderConfig(RuleBasedStopDeciderConfig&& from) noexcept
    : RuleBasedStopDeciderConfig() {
    *this = ::std::move(from);
  }

  inline RuleBasedStopDeciderConfig& operator=(RuleBasedStopDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleBasedStopDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleBasedStopDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const RuleBasedStopDeciderConfig*>(
               &_RuleBasedStopDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RuleBasedStopDeciderConfig* other);
  friend void swap(RuleBasedStopDeciderConfig& a, RuleBasedStopDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuleBasedStopDeciderConfig* New() const final {
    return CreateMaybeMessage<RuleBasedStopDeciderConfig>(NULL);
  }

  RuleBasedStopDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuleBasedStopDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuleBasedStopDeciderConfig& from);
  void MergeFrom(const RuleBasedStopDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleBasedStopDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_adc_stop_speed = 1 [default = 0.3];
  bool has_max_adc_stop_speed() const;
  void clear_max_adc_stop_speed();
  static const int kMaxAdcStopSpeedFieldNumber = 1;
  double max_adc_stop_speed() const;
  void set_max_adc_stop_speed(double value);

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  bool has_max_valid_stop_distance() const;
  void clear_max_valid_stop_distance();
  static const int kMaxValidStopDistanceFieldNumber = 2;
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);

  // optional double search_beam_length = 3 [default = 5];
  bool has_search_beam_length() const;
  void clear_search_beam_length();
  static const int kSearchBeamLengthFieldNumber = 3;
  double search_beam_length() const;
  void set_search_beam_length(double value);

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  bool has_search_beam_radius_intensity() const;
  void clear_search_beam_radius_intensity();
  static const int kSearchBeamRadiusIntensityFieldNumber = 4;
  double search_beam_radius_intensity() const;
  void set_search_beam_radius_intensity(double value);

  // optional double search_range = 5 [default = 3.14];
  bool has_search_range() const;
  void clear_search_range();
  static const int kSearchRangeFieldNumber = 5;
  double search_range() const;
  void set_search_range(double value);

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  bool has_is_block_angle_threshold() const;
  void clear_is_block_angle_threshold();
  static const int kIsBlockAngleThresholdFieldNumber = 6;
  double is_block_angle_threshold() const;
  void set_is_block_angle_threshold(double value);

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  bool has_approach_distance_for_lane_change() const;
  void clear_approach_distance_for_lane_change();
  static const int kApproachDistanceForLaneChangeFieldNumber = 10;
  double approach_distance_for_lane_change() const;
  void set_approach_distance_for_lane_change(double value);

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  bool has_urgent_distance_for_lane_change() const;
  void clear_urgent_distance_for_lane_change();
  static const int kUrgentDistanceForLaneChangeFieldNumber = 11;
  double urgent_distance_for_lane_change() const;
  void set_urgent_distance_for_lane_change(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.RuleBasedStopDeciderConfig)
 private:
  void set_has_max_adc_stop_speed();
  void clear_has_max_adc_stop_speed();
  void set_has_max_valid_stop_distance();
  void clear_has_max_valid_stop_distance();
  void set_has_search_beam_length();
  void clear_has_search_beam_length();
  void set_has_search_beam_radius_intensity();
  void clear_has_search_beam_radius_intensity();
  void set_has_search_range();
  void clear_has_search_range();
  void set_has_is_block_angle_threshold();
  void clear_has_is_block_angle_threshold();
  void set_has_approach_distance_for_lane_change();
  void clear_has_approach_distance_for_lane_change();
  void set_has_urgent_distance_for_lane_change();
  void clear_has_urgent_distance_for_lane_change();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double max_adc_stop_speed_;
  double max_valid_stop_distance_;
  double search_beam_length_;
  double search_beam_radius_intensity_;
  double search_range_;
  double is_block_angle_threshold_;
  double approach_distance_for_lane_change_;
  double urgent_distance_for_lane_change_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedBoundsDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpeedBoundsDeciderConfig) */ {
 public:
  SpeedBoundsDeciderConfig();
  virtual ~SpeedBoundsDeciderConfig();

  SpeedBoundsDeciderConfig(const SpeedBoundsDeciderConfig& from);

  inline SpeedBoundsDeciderConfig& operator=(const SpeedBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedBoundsDeciderConfig(SpeedBoundsDeciderConfig&& from) noexcept
    : SpeedBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline SpeedBoundsDeciderConfig& operator=(SpeedBoundsDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedBoundsDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedBoundsDeciderConfig*>(
               &_SpeedBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SpeedBoundsDeciderConfig* other);
  friend void swap(SpeedBoundsDeciderConfig& a, SpeedBoundsDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedBoundsDeciderConfig* New() const final {
    return CreateMaybeMessage<SpeedBoundsDeciderConfig>(NULL);
  }

  SpeedBoundsDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedBoundsDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedBoundsDeciderConfig& from);
  void MergeFrom(const SpeedBoundsDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedBoundsDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double static_obs_nudge_speed_ratio = 8;
  bool has_static_obs_nudge_speed_ratio() const;
  void clear_static_obs_nudge_speed_ratio();
  static const int kStaticObsNudgeSpeedRatioFieldNumber = 8;
  double static_obs_nudge_speed_ratio() const;
  void set_static_obs_nudge_speed_ratio(double value);

  // optional double dynamic_obs_nudge_speed_ratio = 9;
  bool has_dynamic_obs_nudge_speed_ratio() const;
  void clear_dynamic_obs_nudge_speed_ratio();
  static const int kDynamicObsNudgeSpeedRatioFieldNumber = 9;
  double dynamic_obs_nudge_speed_ratio() const;
  void set_dynamic_obs_nudge_speed_ratio(double value);

  // optional double total_time = 1 [default = 7];
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 1;
  double total_time() const;
  void set_total_time(double value);

  // optional double boundary_buffer = 2 [default = 0.1];
  bool has_boundary_buffer() const;
  void clear_boundary_buffer();
  static const int kBoundaryBufferFieldNumber = 2;
  double boundary_buffer() const;
  void set_boundary_buffer(double value);

  // optional double max_centric_acceleration_limit = 3 [default = 2];
  bool has_max_centric_acceleration_limit() const;
  void clear_max_centric_acceleration_limit();
  static const int kMaxCentricAccelerationLimitFieldNumber = 3;
  double max_centric_acceleration_limit() const;
  void set_max_centric_acceleration_limit(double value);

  // optional double minimal_kappa = 4 [default = 1e-05];
  bool has_minimal_kappa() const;
  void clear_minimal_kappa();
  static const int kMinimalKappaFieldNumber = 4;
  double minimal_kappa() const;
  void set_minimal_kappa(double value);

  // optional double point_extension = 5 [default = 1];
  bool has_point_extension() const;
  void clear_point_extension();
  static const int kPointExtensionFieldNumber = 5;
  double point_extension() const;
  void set_point_extension(double value);

  // optional double lowest_speed = 6 [default = 2.5];
  bool has_lowest_speed() const;
  void clear_lowest_speed();
  static const int kLowestSpeedFieldNumber = 6;
  double lowest_speed() const;
  void set_lowest_speed(double value);

  // optional double collision_safety_range = 7 [default = 1];
  bool has_collision_safety_range() const;
  void clear_collision_safety_range();
  static const int kCollisionSafetyRangeFieldNumber = 7;
  double collision_safety_range() const;
  void set_collision_safety_range(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.SpeedBoundsDeciderConfig)
 private:
  void set_has_total_time();
  void clear_has_total_time();
  void set_has_boundary_buffer();
  void clear_has_boundary_buffer();
  void set_has_max_centric_acceleration_limit();
  void clear_has_max_centric_acceleration_limit();
  void set_has_minimal_kappa();
  void clear_has_minimal_kappa();
  void set_has_point_extension();
  void clear_has_point_extension();
  void set_has_lowest_speed();
  void clear_has_lowest_speed();
  void set_has_collision_safety_range();
  void clear_has_collision_safety_range();
  void set_has_static_obs_nudge_speed_ratio();
  void clear_has_static_obs_nudge_speed_ratio();
  void set_has_dynamic_obs_nudge_speed_ratio();
  void clear_has_dynamic_obs_nudge_speed_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double static_obs_nudge_speed_ratio_;
  double dynamic_obs_nudge_speed_ratio_;
  double total_time_;
  double boundary_buffer_;
  double max_centric_acceleration_limit_;
  double minimal_kappa_;
  double point_extension_;
  double lowest_speed_;
  double collision_safety_range_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedHeuristicOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpeedHeuristicOptimizerConfig) */ {
 public:
  SpeedHeuristicOptimizerConfig();
  virtual ~SpeedHeuristicOptimizerConfig();

  SpeedHeuristicOptimizerConfig(const SpeedHeuristicOptimizerConfig& from);

  inline SpeedHeuristicOptimizerConfig& operator=(const SpeedHeuristicOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedHeuristicOptimizerConfig(SpeedHeuristicOptimizerConfig&& from) noexcept
    : SpeedHeuristicOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline SpeedHeuristicOptimizerConfig& operator=(SpeedHeuristicOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedHeuristicOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedHeuristicOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedHeuristicOptimizerConfig*>(
               &_SpeedHeuristicOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(SpeedHeuristicOptimizerConfig* other);
  friend void swap(SpeedHeuristicOptimizerConfig& a, SpeedHeuristicOptimizerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedHeuristicOptimizerConfig* New() const final {
    return CreateMaybeMessage<SpeedHeuristicOptimizerConfig>(NULL);
  }

  SpeedHeuristicOptimizerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedHeuristicOptimizerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedHeuristicOptimizerConfig& from);
  void MergeFrom(const SpeedHeuristicOptimizerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedHeuristicOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
  bool has_default_speed_config() const;
  void clear_default_speed_config();
  static const int kDefaultSpeedConfigFieldNumber = 1;
  private:
  const ::apollo::planning::DpStSpeedOptimizerConfig& _internal_default_speed_config() const;
  public:
  const ::apollo::planning::DpStSpeedOptimizerConfig& default_speed_config() const;
  ::apollo::planning::DpStSpeedOptimizerConfig* release_default_speed_config();
  ::apollo::planning::DpStSpeedOptimizerConfig* mutable_default_speed_config();
  void set_allocated_default_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config);

  // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
  bool has_lane_change_speed_config() const;
  void clear_lane_change_speed_config();
  static const int kLaneChangeSpeedConfigFieldNumber = 2;
  private:
  const ::apollo::planning::DpStSpeedOptimizerConfig& _internal_lane_change_speed_config() const;
  public:
  const ::apollo::planning::DpStSpeedOptimizerConfig& lane_change_speed_config() const;
  ::apollo::planning::DpStSpeedOptimizerConfig* release_lane_change_speed_config();
  ::apollo::planning::DpStSpeedOptimizerConfig* mutable_lane_change_speed_config();
  void set_allocated_lane_change_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.SpeedHeuristicOptimizerConfig)
 private:
  void set_has_default_speed_config();
  void clear_has_default_speed_config();
  void set_has_lane_change_speed_config();
  void clear_has_lane_change_speed_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config_;
  ::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DpStSpeedOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DpStSpeedOptimizerConfig) */ {
 public:
  DpStSpeedOptimizerConfig();
  virtual ~DpStSpeedOptimizerConfig();

  DpStSpeedOptimizerConfig(const DpStSpeedOptimizerConfig& from);

  inline DpStSpeedOptimizerConfig& operator=(const DpStSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DpStSpeedOptimizerConfig(DpStSpeedOptimizerConfig&& from) noexcept
    : DpStSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline DpStSpeedOptimizerConfig& operator=(DpStSpeedOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DpStSpeedOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DpStSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const DpStSpeedOptimizerConfig*>(
               &_DpStSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DpStSpeedOptimizerConfig* other);
  friend void swap(DpStSpeedOptimizerConfig& a, DpStSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DpStSpeedOptimizerConfig* New() const final {
    return CreateMaybeMessage<DpStSpeedOptimizerConfig>(NULL);
  }

  DpStSpeedOptimizerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DpStSpeedOptimizerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DpStSpeedOptimizerConfig& from);
  void MergeFrom(const DpStSpeedOptimizerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpStSpeedOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double speed_weight = 10 [default = 0];
  bool has_speed_weight() const;
  void clear_speed_weight();
  static const int kSpeedWeightFieldNumber = 10;
  double speed_weight() const;
  void set_speed_weight(double value);

  // optional double reference_weight = 14 [default = 0];
  bool has_reference_weight() const;
  void clear_reference_weight();
  static const int kReferenceWeightFieldNumber = 14;
  double reference_weight() const;
  void set_reference_weight(double value);

  // optional bool is_lane_changing = 81 [default = false];
  bool has_is_lane_changing() const;
  void clear_is_lane_changing();
  static const int kIsLaneChangingFieldNumber = 81;
  bool is_lane_changing() const;
  void set_is_lane_changing(bool value);

  // optional int32 dense_dimension_s = 2 [default = 41];
  bool has_dense_dimension_s() const;
  void clear_dense_dimension_s();
  static const int kDenseDimensionSFieldNumber = 2;
  ::google::protobuf::int32 dense_dimension_s() const;
  void set_dense_dimension_s(::google::protobuf::int32 value);

  // optional double unit_t = 1 [default = 1];
  bool has_unit_t() const;
  void clear_unit_t();
  static const int kUnitTFieldNumber = 1;
  double unit_t() const;
  void set_unit_t(double value);

  // optional double dense_unit_s = 3 [default = 0.5];
  bool has_dense_unit_s() const;
  void clear_dense_unit_s();
  static const int kDenseUnitSFieldNumber = 3;
  double dense_unit_s() const;
  void set_dense_unit_s(double value);

  // optional double sparse_unit_s = 4 [default = 1];
  bool has_sparse_unit_s() const;
  void clear_sparse_unit_s();
  static const int kSparseUnitSFieldNumber = 4;
  double sparse_unit_s() const;
  void set_sparse_unit_s(double value);

  // optional double accel_weight = 11 [default = 10];
  bool has_accel_weight() const;
  void clear_accel_weight();
  static const int kAccelWeightFieldNumber = 11;
  double accel_weight() const;
  void set_accel_weight(double value);

  // optional double jerk_weight = 12 [default = 10];
  bool has_jerk_weight() const;
  void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 12;
  double jerk_weight() const;
  void set_jerk_weight(double value);

  // optional double obstacle_weight = 13 [default = 1];
  bool has_obstacle_weight() const;
  void clear_obstacle_weight();
  static const int kObstacleWeightFieldNumber = 13;
  double obstacle_weight() const;
  void set_obstacle_weight(double value);

  // optional double go_down_buffer = 15 [default = 5];
  bool has_go_down_buffer() const;
  void clear_go_down_buffer();
  static const int kGoDownBufferFieldNumber = 15;
  double go_down_buffer() const;
  void set_go_down_buffer(double value);

  // optional double go_up_buffer = 16 [default = 5];
  bool has_go_up_buffer() const;
  void clear_go_up_buffer();
  static const int kGoUpBufferFieldNumber = 16;
  double go_up_buffer() const;
  void set_go_up_buffer(double value);

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  bool has_default_obstacle_cost() const;
  void clear_default_obstacle_cost();
  static const int kDefaultObstacleCostFieldNumber = 20;
  double default_obstacle_cost() const;
  void set_default_obstacle_cost(double value);

  // optional double default_speed_cost = 31 [default = 1];
  bool has_default_speed_cost() const;
  void clear_default_speed_cost();
  static const int kDefaultSpeedCostFieldNumber = 31;
  double default_speed_cost() const;
  void set_default_speed_cost(double value);

  // optional double exceed_speed_penalty = 32 [default = 10];
  bool has_exceed_speed_penalty() const;
  void clear_exceed_speed_penalty();
  static const int kExceedSpeedPenaltyFieldNumber = 32;
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);

  // optional double low_speed_penalty = 33 [default = 2.5];
  bool has_low_speed_penalty() const;
  void clear_low_speed_penalty();
  static const int kLowSpeedPenaltyFieldNumber = 33;
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);

  // optional double reference_speed_penalty = 34 [default = 1];
  bool has_reference_speed_penalty() const;
  void clear_reference_speed_penalty();
  static const int kReferenceSpeedPenaltyFieldNumber = 34;
  double reference_speed_penalty() const;
  void set_reference_speed_penalty(double value);

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  bool has_keep_clear_low_speed_penalty() const;
  void clear_keep_clear_low_speed_penalty();
  static const int kKeepClearLowSpeedPenaltyFieldNumber = 35;
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);

  // optional double accel_penalty = 40 [default = 2];
  bool has_accel_penalty() const;
  void clear_accel_penalty();
  static const int kAccelPenaltyFieldNumber = 40;
  double accel_penalty() const;
  void set_accel_penalty(double value);

  // optional double decel_penalty = 41 [default = 2];
  bool has_decel_penalty() const;
  void clear_decel_penalty();
  static const int kDecelPenaltyFieldNumber = 41;
  double decel_penalty() const;
  void set_decel_penalty(double value);

  // optional double positive_jerk_coeff = 50 [default = 1];
  bool has_positive_jerk_coeff() const;
  void clear_positive_jerk_coeff();
  static const int kPositiveJerkCoeffFieldNumber = 50;
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);

  // optional double negative_jerk_coeff = 51 [default = 300];
  bool has_negative_jerk_coeff() const;
  void clear_negative_jerk_coeff();
  static const int kNegativeJerkCoeffFieldNumber = 51;
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);

  // optional double max_acceleration = 60 [default = 4.5];
  bool has_max_acceleration() const;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 60;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // optional double max_deceleration = 61 [default = -4.5];
  bool has_max_deceleration() const;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 61;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // optional double safe_time_buffer = 70 [default = 3];
  bool has_safe_time_buffer() const;
  void clear_safe_time_buffer();
  static const int kSafeTimeBufferFieldNumber = 70;
  double safe_time_buffer() const;
  void set_safe_time_buffer(double value);

  // optional double safe_distance = 71 [default = 20];
  bool has_safe_distance() const;
  void clear_safe_distance();
  static const int kSafeDistanceFieldNumber = 71;
  double safe_distance() const;
  void set_safe_distance(double value);

  // optional double spatial_potential_penalty = 80 [default = 1];
  bool has_spatial_potential_penalty() const;
  void clear_spatial_potential_penalty();
  static const int kSpatialPotentialPenaltyFieldNumber = 80;
  double spatial_potential_penalty() const;
  void set_spatial_potential_penalty(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DpStSpeedOptimizerConfig)
 private:
  void set_has_unit_t();
  void clear_has_unit_t();
  void set_has_dense_dimension_s();
  void clear_has_dense_dimension_s();
  void set_has_dense_unit_s();
  void clear_has_dense_unit_s();
  void set_has_sparse_unit_s();
  void clear_has_sparse_unit_s();
  void set_has_speed_weight();
  void clear_has_speed_weight();
  void set_has_accel_weight();
  void clear_has_accel_weight();
  void set_has_jerk_weight();
  void clear_has_jerk_weight();
  void set_has_obstacle_weight();
  void clear_has_obstacle_weight();
  void set_has_reference_weight();
  void clear_has_reference_weight();
  void set_has_go_down_buffer();
  void clear_has_go_down_buffer();
  void set_has_go_up_buffer();
  void clear_has_go_up_buffer();
  void set_has_default_obstacle_cost();
  void clear_has_default_obstacle_cost();
  void set_has_default_speed_cost();
  void clear_has_default_speed_cost();
  void set_has_exceed_speed_penalty();
  void clear_has_exceed_speed_penalty();
  void set_has_low_speed_penalty();
  void clear_has_low_speed_penalty();
  void set_has_reference_speed_penalty();
  void clear_has_reference_speed_penalty();
  void set_has_keep_clear_low_speed_penalty();
  void clear_has_keep_clear_low_speed_penalty();
  void set_has_accel_penalty();
  void clear_has_accel_penalty();
  void set_has_decel_penalty();
  void clear_has_decel_penalty();
  void set_has_positive_jerk_coeff();
  void clear_has_positive_jerk_coeff();
  void set_has_negative_jerk_coeff();
  void clear_has_negative_jerk_coeff();
  void set_has_max_acceleration();
  void clear_has_max_acceleration();
  void set_has_max_deceleration();
  void clear_has_max_deceleration();
  void set_has_safe_time_buffer();
  void clear_has_safe_time_buffer();
  void set_has_safe_distance();
  void clear_has_safe_distance();
  void set_has_spatial_potential_penalty();
  void clear_has_spatial_potential_penalty();
  void set_has_is_lane_changing();
  void clear_has_is_lane_changing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double speed_weight_;
  double reference_weight_;
  bool is_lane_changing_;
  ::google::protobuf::int32 dense_dimension_s_;
  double unit_t_;
  double dense_unit_s_;
  double sparse_unit_s_;
  double accel_weight_;
  double jerk_weight_;
  double obstacle_weight_;
  double go_down_buffer_;
  double go_up_buffer_;
  double default_obstacle_cost_;
  double default_speed_cost_;
  double exceed_speed_penalty_;
  double low_speed_penalty_;
  double reference_speed_penalty_;
  double keep_clear_low_speed_penalty_;
  double accel_penalty_;
  double decel_penalty_;
  double positive_jerk_coeff_;
  double negative_jerk_coeff_;
  double max_acceleration_;
  double max_deceleration_;
  double safe_time_buffer_;
  double safe_distance_;
  double spatial_potential_penalty_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STBoundsDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.STBoundsDeciderConfig) */ {
 public:
  STBoundsDeciderConfig();
  virtual ~STBoundsDeciderConfig();

  STBoundsDeciderConfig(const STBoundsDeciderConfig& from);

  inline STBoundsDeciderConfig& operator=(const STBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  STBoundsDeciderConfig(STBoundsDeciderConfig&& from) noexcept
    : STBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline STBoundsDeciderConfig& operator=(STBoundsDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STBoundsDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const STBoundsDeciderConfig*>(
               &_STBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(STBoundsDeciderConfig* other);
  friend void swap(STBoundsDeciderConfig& a, STBoundsDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline STBoundsDeciderConfig* New() const final {
    return CreateMaybeMessage<STBoundsDeciderConfig>(NULL);
  }

  STBoundsDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<STBoundsDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const STBoundsDeciderConfig& from);
  void MergeFrom(const STBoundsDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STBoundsDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double total_time = 1 [default = 7];
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 1;
  double total_time() const;
  void set_total_time(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.STBoundsDeciderConfig)
 private:
  void set_has_total_time();
  void clear_has_total_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double total_time_;
  friend struct ::protobuf_task_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreepDeciderConfig

// optional double stop_distance = 1 [default = 0.5];
inline bool CreepDeciderConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreepDeciderConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreepDeciderConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreepDeciderConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
inline double CreepDeciderConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.stop_distance)
  return stop_distance_;
}
inline void CreepDeciderConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.stop_distance)
}

// optional double speed_limit = 2 [default = 1];
inline bool CreepDeciderConfig::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreepDeciderConfig::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreepDeciderConfig::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreepDeciderConfig::clear_speed_limit() {
  speed_limit_ = 1;
  clear_has_speed_limit();
}
inline double CreepDeciderConfig::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.speed_limit)
  return speed_limit_;
}
inline void CreepDeciderConfig::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.speed_limit)
}

// optional double max_valid_stop_distance = 3 [default = 0.3];
inline bool CreepDeciderConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreepDeciderConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreepDeciderConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreepDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.3;
  clear_has_max_valid_stop_distance();
}
inline double CreepDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
inline void CreepDeciderConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.max_valid_stop_distance)
}

// optional double min_boundary_t = 4 [default = 6];
inline bool CreepDeciderConfig::has_min_boundary_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreepDeciderConfig::set_has_min_boundary_t() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreepDeciderConfig::clear_has_min_boundary_t() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreepDeciderConfig::clear_min_boundary_t() {
  min_boundary_t_ = 6;
  clear_has_min_boundary_t();
}
inline double CreepDeciderConfig::min_boundary_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.min_boundary_t)
  return min_boundary_t_;
}
inline void CreepDeciderConfig::set_min_boundary_t(double value) {
  set_has_min_boundary_t();
  min_boundary_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.min_boundary_t)
}

// optional double ignore_max_st_min_t = 5 [default = 0.1];
inline bool CreepDeciderConfig::has_ignore_max_st_min_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreepDeciderConfig::set_has_ignore_max_st_min_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreepDeciderConfig::clear_has_ignore_max_st_min_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreepDeciderConfig::clear_ignore_max_st_min_t() {
  ignore_max_st_min_t_ = 0.1;
  clear_has_ignore_max_st_min_t();
}
inline double CreepDeciderConfig::ignore_max_st_min_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.ignore_max_st_min_t)
  return ignore_max_st_min_t_;
}
inline void CreepDeciderConfig::set_ignore_max_st_min_t(double value) {
  set_has_ignore_max_st_min_t();
  ignore_max_st_min_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.ignore_max_st_min_t)
}

// optional double ignore_min_st_min_s = 6 [default = 15];
inline bool CreepDeciderConfig::has_ignore_min_st_min_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreepDeciderConfig::set_has_ignore_min_st_min_s() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreepDeciderConfig::clear_has_ignore_min_st_min_s() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreepDeciderConfig::clear_ignore_min_st_min_s() {
  ignore_min_st_min_s_ = 15;
  clear_has_ignore_min_st_min_s();
}
inline double CreepDeciderConfig::ignore_min_st_min_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.ignore_min_st_min_s)
  return ignore_min_st_min_s_;
}
inline void CreepDeciderConfig::set_ignore_min_st_min_s(double value) {
  set_has_ignore_min_st_min_s();
  ignore_min_st_min_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.ignore_min_st_min_s)
}

// -------------------------------------------------------------------

// LaneChangeDeciderConfig

// optional bool enable_lane_change_urgency_check = 1;
inline bool LaneChangeDeciderConfig::has_enable_lane_change_urgency_check() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneChangeDeciderConfig::set_has_enable_lane_change_urgency_check() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneChangeDeciderConfig::clear_has_enable_lane_change_urgency_check() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneChangeDeciderConfig::clear_enable_lane_change_urgency_check() {
  enable_lane_change_urgency_check_ = false;
  clear_has_enable_lane_change_urgency_check();
}
inline bool LaneChangeDeciderConfig::enable_lane_change_urgency_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.enable_lane_change_urgency_check)
  return enable_lane_change_urgency_check_;
}
inline void LaneChangeDeciderConfig::set_enable_lane_change_urgency_check(bool value) {
  set_has_enable_lane_change_urgency_check();
  enable_lane_change_urgency_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.enable_lane_change_urgency_check)
}

// optional bool enable_prioritize_change_lane = 2 [default = false];
inline bool LaneChangeDeciderConfig::has_enable_prioritize_change_lane() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneChangeDeciderConfig::set_has_enable_prioritize_change_lane() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneChangeDeciderConfig::clear_has_enable_prioritize_change_lane() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneChangeDeciderConfig::clear_enable_prioritize_change_lane() {
  enable_prioritize_change_lane_ = false;
  clear_has_enable_prioritize_change_lane();
}
inline bool LaneChangeDeciderConfig::enable_prioritize_change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.enable_prioritize_change_lane)
  return enable_prioritize_change_lane_;
}
inline void LaneChangeDeciderConfig::set_enable_prioritize_change_lane(bool value) {
  set_has_enable_prioritize_change_lane();
  enable_prioritize_change_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.enable_prioritize_change_lane)
}

// optional bool enable_remove_change_lane = 3 [default = false];
inline bool LaneChangeDeciderConfig::has_enable_remove_change_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneChangeDeciderConfig::set_has_enable_remove_change_lane() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneChangeDeciderConfig::clear_has_enable_remove_change_lane() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneChangeDeciderConfig::clear_enable_remove_change_lane() {
  enable_remove_change_lane_ = false;
  clear_has_enable_remove_change_lane();
}
inline bool LaneChangeDeciderConfig::enable_remove_change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.enable_remove_change_lane)
  return enable_remove_change_lane_;
}
inline void LaneChangeDeciderConfig::set_enable_remove_change_lane(bool value) {
  set_has_enable_remove_change_lane();
  enable_remove_change_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.enable_remove_change_lane)
}

// optional bool reckless_change_lane = 4 [default = false];
inline bool LaneChangeDeciderConfig::has_reckless_change_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneChangeDeciderConfig::set_has_reckless_change_lane() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneChangeDeciderConfig::clear_has_reckless_change_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneChangeDeciderConfig::clear_reckless_change_lane() {
  reckless_change_lane_ = false;
  clear_has_reckless_change_lane();
}
inline bool LaneChangeDeciderConfig::reckless_change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.reckless_change_lane)
  return reckless_change_lane_;
}
inline void LaneChangeDeciderConfig::set_reckless_change_lane(bool value) {
  set_has_reckless_change_lane();
  reckless_change_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.reckless_change_lane)
}

// optional double change_lane_success_freeze_time = 5 [default = 1.5];
inline bool LaneChangeDeciderConfig::has_change_lane_success_freeze_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneChangeDeciderConfig::set_has_change_lane_success_freeze_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneChangeDeciderConfig::clear_has_change_lane_success_freeze_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneChangeDeciderConfig::clear_change_lane_success_freeze_time() {
  change_lane_success_freeze_time_ = 1.5;
  clear_has_change_lane_success_freeze_time();
}
inline double LaneChangeDeciderConfig::change_lane_success_freeze_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.change_lane_success_freeze_time)
  return change_lane_success_freeze_time_;
}
inline void LaneChangeDeciderConfig::set_change_lane_success_freeze_time(double value) {
  set_has_change_lane_success_freeze_time();
  change_lane_success_freeze_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.change_lane_success_freeze_time)
}

// optional double change_lane_fail_freeze_time = 6 [default = 1];
inline bool LaneChangeDeciderConfig::has_change_lane_fail_freeze_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneChangeDeciderConfig::set_has_change_lane_fail_freeze_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneChangeDeciderConfig::clear_has_change_lane_fail_freeze_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneChangeDeciderConfig::clear_change_lane_fail_freeze_time() {
  change_lane_fail_freeze_time_ = 1;
  clear_has_change_lane_fail_freeze_time();
}
inline double LaneChangeDeciderConfig::change_lane_fail_freeze_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.change_lane_fail_freeze_time)
  return change_lane_fail_freeze_time_;
}
inline void LaneChangeDeciderConfig::set_change_lane_fail_freeze_time(double value) {
  set_has_change_lane_fail_freeze_time();
  change_lane_fail_freeze_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.change_lane_fail_freeze_time)
}

// -------------------------------------------------------------------

// LearningModelInferenceTaskConfig

// optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
inline bool LearningModelInferenceTaskConfig::has_model_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_model_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LearningModelInferenceTaskConfig::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LearningModelInferenceTaskConfig::clear_model_type() {
  model_type_ = 1;
  clear_has_model_type();
}
inline ::apollo::planning::LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.model_type)
  return static_cast< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType >(model_type_);
}
inline void LearningModelInferenceTaskConfig::set_model_type(::apollo::planning::LearningModelInferenceTaskConfig_ModelType value) {
  assert(::apollo::planning::LearningModelInferenceTaskConfig_ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.model_type)
}

// optional string cpu_model_file = 2;
inline bool LearningModelInferenceTaskConfig::has_cpu_model_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_cpu_model_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearningModelInferenceTaskConfig::clear_has_cpu_model_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearningModelInferenceTaskConfig::clear_cpu_model_file() {
  cpu_model_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_model_file();
}
inline const ::std::string& LearningModelInferenceTaskConfig::cpu_model_file() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
  return cpu_model_file_.GetNoArena();
}
inline void LearningModelInferenceTaskConfig::set_cpu_model_file(const ::std::string& value) {
  set_has_cpu_model_file();
  cpu_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}
#if LANG_CXX11
inline void LearningModelInferenceTaskConfig::set_cpu_model_file(::std::string&& value) {
  set_has_cpu_model_file();
  cpu_model_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}
#endif
inline void LearningModelInferenceTaskConfig::set_cpu_model_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cpu_model_file();
  cpu_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}
inline void LearningModelInferenceTaskConfig::set_cpu_model_file(const char* value, size_t size) {
  set_has_cpu_model_file();
  cpu_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}
inline ::std::string* LearningModelInferenceTaskConfig::mutable_cpu_model_file() {
  set_has_cpu_model_file();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
  return cpu_model_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LearningModelInferenceTaskConfig::release_cpu_model_file() {
  // @@protoc_insertion_point(field_release:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
  if (!has_cpu_model_file()) {
    return NULL;
  }
  clear_has_cpu_model_file();
  return cpu_model_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LearningModelInferenceTaskConfig::set_allocated_cpu_model_file(::std::string* cpu_model_file) {
  if (cpu_model_file != NULL) {
    set_has_cpu_model_file();
  } else {
    clear_has_cpu_model_file();
  }
  cpu_model_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_model_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}

// optional string gpu_model_file = 3;
inline bool LearningModelInferenceTaskConfig::has_gpu_model_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_gpu_model_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LearningModelInferenceTaskConfig::clear_has_gpu_model_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LearningModelInferenceTaskConfig::clear_gpu_model_file() {
  gpu_model_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gpu_model_file();
}
inline const ::std::string& LearningModelInferenceTaskConfig::gpu_model_file() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
  return gpu_model_file_.GetNoArena();
}
inline void LearningModelInferenceTaskConfig::set_gpu_model_file(const ::std::string& value) {
  set_has_gpu_model_file();
  gpu_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}
#if LANG_CXX11
inline void LearningModelInferenceTaskConfig::set_gpu_model_file(::std::string&& value) {
  set_has_gpu_model_file();
  gpu_model_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}
#endif
inline void LearningModelInferenceTaskConfig::set_gpu_model_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gpu_model_file();
  gpu_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}
inline void LearningModelInferenceTaskConfig::set_gpu_model_file(const char* value, size_t size) {
  set_has_gpu_model_file();
  gpu_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}
inline ::std::string* LearningModelInferenceTaskConfig::mutable_gpu_model_file() {
  set_has_gpu_model_file();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
  return gpu_model_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LearningModelInferenceTaskConfig::release_gpu_model_file() {
  // @@protoc_insertion_point(field_release:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
  if (!has_gpu_model_file()) {
    return NULL;
  }
  clear_has_gpu_model_file();
  return gpu_model_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LearningModelInferenceTaskConfig::set_allocated_gpu_model_file(::std::string* gpu_model_file) {
  if (gpu_model_file != NULL) {
    set_has_gpu_model_file();
  } else {
    clear_has_gpu_model_file();
  }
  gpu_model_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_model_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}

// optional bool use_cuda = 4 [default = true];
inline bool LearningModelInferenceTaskConfig::has_use_cuda() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_use_cuda() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LearningModelInferenceTaskConfig::clear_has_use_cuda() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LearningModelInferenceTaskConfig::clear_use_cuda() {
  use_cuda_ = true;
  clear_has_use_cuda();
}
inline bool LearningModelInferenceTaskConfig::use_cuda() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.use_cuda)
  return use_cuda_;
}
inline void LearningModelInferenceTaskConfig::set_use_cuda(bool value) {
  set_has_use_cuda();
  use_cuda_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.use_cuda)
}

// optional double trajectory_delta_t = 5 [default = 0.2];
inline bool LearningModelInferenceTaskConfig::has_trajectory_delta_t() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_trajectory_delta_t() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LearningModelInferenceTaskConfig::clear_has_trajectory_delta_t() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LearningModelInferenceTaskConfig::clear_trajectory_delta_t() {
  trajectory_delta_t_ = 0.2;
  clear_has_trajectory_delta_t();
}
inline double LearningModelInferenceTaskConfig::trajectory_delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.trajectory_delta_t)
  return trajectory_delta_t_;
}
inline void LearningModelInferenceTaskConfig::set_trajectory_delta_t(double value) {
  set_has_trajectory_delta_t();
  trajectory_delta_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.trajectory_delta_t)
}

// optional bool allow_empty_learning_based_data = 6 [default = false];
inline bool LearningModelInferenceTaskConfig::has_allow_empty_learning_based_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_allow_empty_learning_based_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LearningModelInferenceTaskConfig::clear_has_allow_empty_learning_based_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LearningModelInferenceTaskConfig::clear_allow_empty_learning_based_data() {
  allow_empty_learning_based_data_ = false;
  clear_has_allow_empty_learning_based_data();
}
inline bool LearningModelInferenceTaskConfig::allow_empty_learning_based_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_learning_based_data)
  return allow_empty_learning_based_data_;
}
inline void LearningModelInferenceTaskConfig::set_allow_empty_learning_based_data(bool value) {
  set_has_allow_empty_learning_based_data();
  allow_empty_learning_based_data_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_learning_based_data)
}

// optional bool allow_empty_output_trajectory = 7 [default = false];
inline bool LearningModelInferenceTaskConfig::has_allow_empty_output_trajectory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LearningModelInferenceTaskConfig::set_has_allow_empty_output_trajectory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LearningModelInferenceTaskConfig::clear_has_allow_empty_output_trajectory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LearningModelInferenceTaskConfig::clear_allow_empty_output_trajectory() {
  allow_empty_output_trajectory_ = false;
  clear_has_allow_empty_output_trajectory();
}
inline bool LearningModelInferenceTaskConfig::allow_empty_output_trajectory() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_output_trajectory)
  return allow_empty_output_trajectory_;
}
inline void LearningModelInferenceTaskConfig::set_allow_empty_output_trajectory(bool value) {
  set_has_allow_empty_output_trajectory();
  allow_empty_output_trajectory_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_output_trajectory)
}

// -------------------------------------------------------------------

// LearningModelInferenceTrajectoryTaskConfig

// optional double min_adc_future_trajectory_time_length = 1 [default = 2];
inline bool LearningModelInferenceTrajectoryTaskConfig::has_min_adc_future_trajectory_time_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearningModelInferenceTrajectoryTaskConfig::set_has_min_adc_future_trajectory_time_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearningModelInferenceTrajectoryTaskConfig::clear_has_min_adc_future_trajectory_time_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearningModelInferenceTrajectoryTaskConfig::clear_min_adc_future_trajectory_time_length() {
  min_adc_future_trajectory_time_length_ = 2;
  clear_has_min_adc_future_trajectory_time_length();
}
inline double LearningModelInferenceTrajectoryTaskConfig::min_adc_future_trajectory_time_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTrajectoryTaskConfig.min_adc_future_trajectory_time_length)
  return min_adc_future_trajectory_time_length_;
}
inline void LearningModelInferenceTrajectoryTaskConfig::set_min_adc_future_trajectory_time_length(double value) {
  set_has_min_adc_future_trajectory_time_length();
  min_adc_future_trajectory_time_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTrajectoryTaskConfig.min_adc_future_trajectory_time_length)
}

// -------------------------------------------------------------------

// NaviObstacleDeciderConfig

// optional double min_nudge_distance = 1 [default = 0.2];
inline bool NaviObstacleDeciderConfig::has_min_nudge_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_min_nudge_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NaviObstacleDeciderConfig::clear_has_min_nudge_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NaviObstacleDeciderConfig::clear_min_nudge_distance() {
  min_nudge_distance_ = 0.2;
  clear_has_min_nudge_distance();
}
inline double NaviObstacleDeciderConfig::min_nudge_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.min_nudge_distance)
  return min_nudge_distance_;
}
inline void NaviObstacleDeciderConfig::set_min_nudge_distance(double value) {
  set_has_min_nudge_distance();
  min_nudge_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.min_nudge_distance)
}

// optional double max_nudge_distance = 2 [default = 1.2];
inline bool NaviObstacleDeciderConfig::has_max_nudge_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_max_nudge_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NaviObstacleDeciderConfig::clear_has_max_nudge_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NaviObstacleDeciderConfig::clear_max_nudge_distance() {
  max_nudge_distance_ = 1.2;
  clear_has_max_nudge_distance();
}
inline double NaviObstacleDeciderConfig::max_nudge_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.max_nudge_distance)
  return max_nudge_distance_;
}
inline void NaviObstacleDeciderConfig::set_max_nudge_distance(double value) {
  set_has_max_nudge_distance();
  max_nudge_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.max_nudge_distance)
}

// optional double max_allow_nudge_speed = 3 [default = 16.667];
inline bool NaviObstacleDeciderConfig::has_max_allow_nudge_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_max_allow_nudge_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NaviObstacleDeciderConfig::clear_has_max_allow_nudge_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NaviObstacleDeciderConfig::clear_max_allow_nudge_speed() {
  max_allow_nudge_speed_ = 16.667;
  clear_has_max_allow_nudge_speed();
}
inline double NaviObstacleDeciderConfig::max_allow_nudge_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.max_allow_nudge_speed)
  return max_allow_nudge_speed_;
}
inline void NaviObstacleDeciderConfig::set_max_allow_nudge_speed(double value) {
  set_has_max_allow_nudge_speed();
  max_allow_nudge_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.max_allow_nudge_speed)
}

// optional double safe_distance = 4 [default = 0.2];
inline bool NaviObstacleDeciderConfig::has_safe_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_safe_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NaviObstacleDeciderConfig::clear_has_safe_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NaviObstacleDeciderConfig::clear_safe_distance() {
  safe_distance_ = 0.2;
  clear_has_safe_distance();
}
inline double NaviObstacleDeciderConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.safe_distance)
  return safe_distance_;
}
inline void NaviObstacleDeciderConfig::set_safe_distance(double value) {
  set_has_safe_distance();
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.safe_distance)
}

// optional double nudge_allow_tolerance = 5 [default = 0.05];
inline bool NaviObstacleDeciderConfig::has_nudge_allow_tolerance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_nudge_allow_tolerance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NaviObstacleDeciderConfig::clear_has_nudge_allow_tolerance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NaviObstacleDeciderConfig::clear_nudge_allow_tolerance() {
  nudge_allow_tolerance_ = 0.05;
  clear_has_nudge_allow_tolerance();
}
inline double NaviObstacleDeciderConfig::nudge_allow_tolerance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.nudge_allow_tolerance)
  return nudge_allow_tolerance_;
}
inline void NaviObstacleDeciderConfig::set_nudge_allow_tolerance(double value) {
  set_has_nudge_allow_tolerance();
  nudge_allow_tolerance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.nudge_allow_tolerance)
}

// optional uint32 cycles_number = 6 [default = 3];
inline bool NaviObstacleDeciderConfig::has_cycles_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_cycles_number() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NaviObstacleDeciderConfig::clear_has_cycles_number() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NaviObstacleDeciderConfig::clear_cycles_number() {
  cycles_number_ = 3u;
  clear_has_cycles_number();
}
inline ::google::protobuf::uint32 NaviObstacleDeciderConfig::cycles_number() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.cycles_number)
  return cycles_number_;
}
inline void NaviObstacleDeciderConfig::set_cycles_number(::google::protobuf::uint32 value) {
  set_has_cycles_number();
  cycles_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.cycles_number)
}

// optional double judge_dis_coeff = 7 [default = 2];
inline bool NaviObstacleDeciderConfig::has_judge_dis_coeff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_judge_dis_coeff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NaviObstacleDeciderConfig::clear_has_judge_dis_coeff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NaviObstacleDeciderConfig::clear_judge_dis_coeff() {
  judge_dis_coeff_ = 2;
  clear_has_judge_dis_coeff();
}
inline double NaviObstacleDeciderConfig::judge_dis_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.judge_dis_coeff)
  return judge_dis_coeff_;
}
inline void NaviObstacleDeciderConfig::set_judge_dis_coeff(double value) {
  set_has_judge_dis_coeff();
  judge_dis_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.judge_dis_coeff)
}

// optional double basis_dis_value = 8 [default = 30];
inline bool NaviObstacleDeciderConfig::has_basis_dis_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_basis_dis_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NaviObstacleDeciderConfig::clear_has_basis_dis_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NaviObstacleDeciderConfig::clear_basis_dis_value() {
  basis_dis_value_ = 30;
  clear_has_basis_dis_value();
}
inline double NaviObstacleDeciderConfig::basis_dis_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.basis_dis_value)
  return basis_dis_value_;
}
inline void NaviObstacleDeciderConfig::set_basis_dis_value(double value) {
  set_has_basis_dis_value();
  basis_dis_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.basis_dis_value)
}

// optional double lateral_velocity_value = 9 [default = 0.5];
inline bool NaviObstacleDeciderConfig::has_lateral_velocity_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_lateral_velocity_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NaviObstacleDeciderConfig::clear_has_lateral_velocity_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NaviObstacleDeciderConfig::clear_lateral_velocity_value() {
  lateral_velocity_value_ = 0.5;
  clear_has_lateral_velocity_value();
}
inline double NaviObstacleDeciderConfig::lateral_velocity_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.lateral_velocity_value)
  return lateral_velocity_value_;
}
inline void NaviObstacleDeciderConfig::set_lateral_velocity_value(double value) {
  set_has_lateral_velocity_value();
  lateral_velocity_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.lateral_velocity_value)
}

// optional double speed_decider_detect_range = 10 [default = 1];
inline bool NaviObstacleDeciderConfig::has_speed_decider_detect_range() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_speed_decider_detect_range() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NaviObstacleDeciderConfig::clear_has_speed_decider_detect_range() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NaviObstacleDeciderConfig::clear_speed_decider_detect_range() {
  speed_decider_detect_range_ = 1;
  clear_has_speed_decider_detect_range();
}
inline double NaviObstacleDeciderConfig::speed_decider_detect_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.speed_decider_detect_range)
  return speed_decider_detect_range_;
}
inline void NaviObstacleDeciderConfig::set_speed_decider_detect_range(double value) {
  set_has_speed_decider_detect_range();
  speed_decider_detect_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.speed_decider_detect_range)
}

// optional uint32 max_keep_nudge_cycles = 11 [default = 100];
inline bool NaviObstacleDeciderConfig::has_max_keep_nudge_cycles() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_max_keep_nudge_cycles() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NaviObstacleDeciderConfig::clear_has_max_keep_nudge_cycles() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NaviObstacleDeciderConfig::clear_max_keep_nudge_cycles() {
  max_keep_nudge_cycles_ = 100u;
  clear_has_max_keep_nudge_cycles();
}
inline ::google::protobuf::uint32 NaviObstacleDeciderConfig::max_keep_nudge_cycles() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.max_keep_nudge_cycles)
  return max_keep_nudge_cycles_;
}
inline void NaviObstacleDeciderConfig::set_max_keep_nudge_cycles(::google::protobuf::uint32 value) {
  set_has_max_keep_nudge_cycles();
  max_keep_nudge_cycles_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.max_keep_nudge_cycles)
}

// -------------------------------------------------------------------

// NaviPathDeciderConfig

// optional double min_path_length = 1 [default = 5];
inline bool NaviPathDeciderConfig::has_min_path_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NaviPathDeciderConfig::set_has_min_path_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NaviPathDeciderConfig::clear_has_min_path_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NaviPathDeciderConfig::clear_min_path_length() {
  min_path_length_ = 5;
  clear_has_min_path_length();
}
inline double NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_path_length)
  return min_path_length_;
}
inline void NaviPathDeciderConfig::set_min_path_length(double value) {
  set_has_min_path_length();
  min_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
inline bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NaviPathDeciderConfig::set_has_min_look_forward_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NaviPathDeciderConfig::clear_has_min_look_forward_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NaviPathDeciderConfig::clear_min_look_forward_time() {
  min_look_forward_time_ = 2u;
  clear_has_min_look_forward_time();
}
inline ::google::protobuf::uint32 NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
  return min_look_forward_time_;
}
inline void NaviPathDeciderConfig::set_min_look_forward_time(::google::protobuf::uint32 value) {
  set_has_min_look_forward_time();
  min_look_forward_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double max_keep_lane_distance = 3 [default = 0.8];
inline bool NaviPathDeciderConfig::has_max_keep_lane_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NaviPathDeciderConfig::set_has_max_keep_lane_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NaviPathDeciderConfig::clear_has_max_keep_lane_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_distance() {
  max_keep_lane_distance_ = 0.8;
  clear_has_max_keep_lane_distance();
}
inline double NaviPathDeciderConfig::max_keep_lane_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
  return max_keep_lane_distance_;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_distance(double value) {
  set_has_max_keep_lane_distance();
  max_keep_lane_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
}

// optional double max_keep_lane_shift_y = 4 [default = 20];
inline bool NaviPathDeciderConfig::has_max_keep_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NaviPathDeciderConfig::set_has_max_keep_lane_shift_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NaviPathDeciderConfig::clear_has_max_keep_lane_shift_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_shift_y() {
  max_keep_lane_shift_y_ = 20;
  clear_has_max_keep_lane_shift_y();
}
inline double NaviPathDeciderConfig::max_keep_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
  return max_keep_lane_shift_y_;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_shift_y(double value) {
  set_has_max_keep_lane_shift_y();
  max_keep_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
}

// optional double min_keep_lane_offset = 5 [default = 15];
inline bool NaviPathDeciderConfig::has_min_keep_lane_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NaviPathDeciderConfig::set_has_min_keep_lane_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NaviPathDeciderConfig::clear_has_min_keep_lane_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NaviPathDeciderConfig::clear_min_keep_lane_offset() {
  min_keep_lane_offset_ = 15;
  clear_has_min_keep_lane_offset();
}
inline double NaviPathDeciderConfig::min_keep_lane_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
  return min_keep_lane_offset_;
}
inline void NaviPathDeciderConfig::set_min_keep_lane_offset(double value) {
  set_has_min_keep_lane_offset();
  min_keep_lane_offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
}

// optional double keep_lane_shift_compensation = 6 [default = 0.01];
inline bool NaviPathDeciderConfig::has_keep_lane_shift_compensation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NaviPathDeciderConfig::set_has_keep_lane_shift_compensation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NaviPathDeciderConfig::clear_has_keep_lane_shift_compensation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NaviPathDeciderConfig::clear_keep_lane_shift_compensation() {
  keep_lane_shift_compensation_ = 0.01;
  clear_has_keep_lane_shift_compensation();
}
inline double NaviPathDeciderConfig::keep_lane_shift_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
  return keep_lane_shift_compensation_;
}
inline void NaviPathDeciderConfig::set_keep_lane_shift_compensation(double value) {
  set_has_keep_lane_shift_compensation();
  keep_lane_shift_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
}

// optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
inline bool NaviPathDeciderConfig::has_move_dest_lane_config_talbe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NaviPathDeciderConfig::set_has_move_dest_lane_config_talbe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NaviPathDeciderConfig::clear_has_move_dest_lane_config_talbe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_config_talbe() {
  if (move_dest_lane_config_talbe_ != NULL) move_dest_lane_config_talbe_->Clear();
  clear_has_move_dest_lane_config_talbe();
}
inline const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::_internal_move_dest_lane_config_talbe() const {
  return *move_dest_lane_config_talbe_;
}
inline const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::move_dest_lane_config_talbe() const {
  const ::apollo::planning::MoveDestLaneConfigTable* p = move_dest_lane_config_talbe_;
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::MoveDestLaneConfigTable*>(
      &::apollo::planning::_MoveDestLaneConfigTable_default_instance_);
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::release_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  clear_has_move_dest_lane_config_talbe();
  ::apollo::planning::MoveDestLaneConfigTable* temp = move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = NULL;
  return temp;
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::mutable_move_dest_lane_config_talbe() {
  set_has_move_dest_lane_config_talbe();
  if (move_dest_lane_config_talbe_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::MoveDestLaneConfigTable>(GetArenaNoVirtual());
    move_dest_lane_config_talbe_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_;
}
inline void NaviPathDeciderConfig::set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete move_dest_lane_config_talbe_;
  }
  if (move_dest_lane_config_talbe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      move_dest_lane_config_talbe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, move_dest_lane_config_talbe, submessage_arena);
    }
    set_has_move_dest_lane_config_talbe();
  } else {
    clear_has_move_dest_lane_config_talbe();
  }
  move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}

// optional double move_dest_lane_compensation = 8 [default = 0.35];
inline bool NaviPathDeciderConfig::has_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NaviPathDeciderConfig::set_has_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NaviPathDeciderConfig::clear_has_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_compensation() {
  move_dest_lane_compensation_ = 0.35;
  clear_has_move_dest_lane_compensation();
}
inline double NaviPathDeciderConfig::move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
  return move_dest_lane_compensation_;
}
inline void NaviPathDeciderConfig::set_move_dest_lane_compensation(double value) {
  set_has_move_dest_lane_compensation();
  move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
}

// optional double max_kappa_threshold = 9 [default = 0];
inline bool NaviPathDeciderConfig::has_max_kappa_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NaviPathDeciderConfig::set_has_max_kappa_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NaviPathDeciderConfig::clear_has_max_kappa_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NaviPathDeciderConfig::clear_max_kappa_threshold() {
  max_kappa_threshold_ = 0;
  clear_has_max_kappa_threshold();
}
inline double NaviPathDeciderConfig::max_kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
  return max_kappa_threshold_;
}
inline void NaviPathDeciderConfig::set_max_kappa_threshold(double value) {
  set_has_max_kappa_threshold();
  max_kappa_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
}

// optional double kappa_move_dest_lane_compensation = 10 [default = 0];
inline bool NaviPathDeciderConfig::has_kappa_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NaviPathDeciderConfig::set_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NaviPathDeciderConfig::clear_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NaviPathDeciderConfig::clear_kappa_move_dest_lane_compensation() {
  kappa_move_dest_lane_compensation_ = 0;
  clear_has_kappa_move_dest_lane_compensation();
}
inline double NaviPathDeciderConfig::kappa_move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
  return kappa_move_dest_lane_compensation_;
}
inline void NaviPathDeciderConfig::set_kappa_move_dest_lane_compensation(double value) {
  set_has_kappa_move_dest_lane_compensation();
  kappa_move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
}

// optional uint32 start_plan_point_from = 11 [default = 0];
inline bool NaviPathDeciderConfig::has_start_plan_point_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NaviPathDeciderConfig::set_has_start_plan_point_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NaviPathDeciderConfig::clear_has_start_plan_point_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NaviPathDeciderConfig::clear_start_plan_point_from() {
  start_plan_point_from_ = 0u;
  clear_has_start_plan_point_from();
}
inline ::google::protobuf::uint32 NaviPathDeciderConfig::start_plan_point_from() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
  return start_plan_point_from_;
}
inline void NaviPathDeciderConfig::set_start_plan_point_from(::google::protobuf::uint32 value) {
  set_has_start_plan_point_from();
  start_plan_point_from_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
}

// -------------------------------------------------------------------

// MoveDestLaneConfigTable

// repeated .apollo.planning.ShiftConfig lateral_shift = 1;
inline int MoveDestLaneConfigTable::lateral_shift_size() const {
  return lateral_shift_.size();
}
inline void MoveDestLaneConfigTable::clear_lateral_shift() {
  lateral_shift_.Clear();
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
MoveDestLaneConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return &lateral_shift_;
}
inline const ::apollo::planning::ShiftConfig& MoveDestLaneConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Get(index);
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::add_lateral_shift() {
  // @@protoc_insertion_point(field_add:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
MoveDestLaneConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_;
}

// -------------------------------------------------------------------

// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
inline bool ShiftConfig::has_max_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShiftConfig::set_has_max_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShiftConfig::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShiftConfig::clear_max_speed() {
  max_speed_ = 4.16;
  clear_has_max_speed();
}
inline double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_speed)
  return max_speed_;
}
inline void ShiftConfig::set_max_speed(double value) {
  set_has_max_speed();
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_speed)
}

// optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
inline bool ShiftConfig::has_max_move_dest_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShiftConfig::set_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShiftConfig::clear_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShiftConfig::clear_max_move_dest_lane_shift_y() {
  max_move_dest_lane_shift_y_ = 0.4;
  clear_has_max_move_dest_lane_shift_y();
}
inline double ShiftConfig::max_move_dest_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
  return max_move_dest_lane_shift_y_;
}
inline void ShiftConfig::set_max_move_dest_lane_shift_y(double value) {
  set_has_max_move_dest_lane_shift_y();
  max_move_dest_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
}

// -------------------------------------------------------------------

// NaviSpeedDeciderConfig

// optional double preferred_accel = 1 [default = 2];
inline bool NaviSpeedDeciderConfig::has_preferred_accel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_preferred_accel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NaviSpeedDeciderConfig::clear_has_preferred_accel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NaviSpeedDeciderConfig::clear_preferred_accel() {
  preferred_accel_ = 2;
  clear_has_preferred_accel();
}
inline double NaviSpeedDeciderConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
  return preferred_accel_;
}
inline void NaviSpeedDeciderConfig::set_preferred_accel(double value) {
  set_has_preferred_accel();
  preferred_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
}

// optional double preferred_decel = 2 [default = 2];
inline bool NaviSpeedDeciderConfig::has_preferred_decel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_preferred_decel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NaviSpeedDeciderConfig::clear_has_preferred_decel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NaviSpeedDeciderConfig::clear_preferred_decel() {
  preferred_decel_ = 2;
  clear_has_preferred_decel();
}
inline double NaviSpeedDeciderConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
  return preferred_decel_;
}
inline void NaviSpeedDeciderConfig::set_preferred_decel(double value) {
  set_has_preferred_decel();
  preferred_decel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
}

// optional double preferred_jerk = 3 [default = 2];
inline bool NaviSpeedDeciderConfig::has_preferred_jerk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_preferred_jerk() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NaviSpeedDeciderConfig::clear_has_preferred_jerk() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NaviSpeedDeciderConfig::clear_preferred_jerk() {
  preferred_jerk_ = 2;
  clear_has_preferred_jerk();
}
inline double NaviSpeedDeciderConfig::preferred_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_jerk)
  return preferred_jerk_;
}
inline void NaviSpeedDeciderConfig::set_preferred_jerk(double value) {
  set_has_preferred_jerk();
  preferred_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_jerk)
}

// optional double max_accel = 4 [default = 4];
inline bool NaviSpeedDeciderConfig::has_max_accel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_max_accel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NaviSpeedDeciderConfig::clear_has_max_accel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NaviSpeedDeciderConfig::clear_max_accel() {
  max_accel_ = 4;
  clear_has_max_accel();
}
inline double NaviSpeedDeciderConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_accel)
  return max_accel_;
}
inline void NaviSpeedDeciderConfig::set_max_accel(double value) {
  set_has_max_accel();
  max_accel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_accel)
}

// optional double max_decel = 5 [default = 5];
inline bool NaviSpeedDeciderConfig::has_max_decel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_max_decel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NaviSpeedDeciderConfig::clear_has_max_decel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NaviSpeedDeciderConfig::clear_max_decel() {
  max_decel_ = 5;
  clear_has_max_decel();
}
inline double NaviSpeedDeciderConfig::max_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_decel)
  return max_decel_;
}
inline void NaviSpeedDeciderConfig::set_max_decel(double value) {
  set_has_max_decel();
  max_decel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_decel)
}

// optional double obstacle_buffer = 6 [default = 0.5];
inline bool NaviSpeedDeciderConfig::has_obstacle_buffer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_obstacle_buffer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NaviSpeedDeciderConfig::clear_has_obstacle_buffer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NaviSpeedDeciderConfig::clear_obstacle_buffer() {
  obstacle_buffer_ = 0.5;
  clear_has_obstacle_buffer();
}
inline double NaviSpeedDeciderConfig::obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
  return obstacle_buffer_;
}
inline void NaviSpeedDeciderConfig::set_obstacle_buffer(double value) {
  set_has_obstacle_buffer();
  obstacle_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
}

// optional double safe_distance_base = 7 [default = 2];
inline bool NaviSpeedDeciderConfig::has_safe_distance_base() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_safe_distance_base() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NaviSpeedDeciderConfig::clear_has_safe_distance_base() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_base() {
  safe_distance_base_ = 2;
  clear_has_safe_distance_base();
}
inline double NaviSpeedDeciderConfig::safe_distance_base() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
  return safe_distance_base_;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_base(double value) {
  set_has_safe_distance_base();
  safe_distance_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
}

// optional double safe_distance_ratio = 8 [default = 1];
inline bool NaviSpeedDeciderConfig::has_safe_distance_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_safe_distance_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NaviSpeedDeciderConfig::clear_has_safe_distance_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_ratio() {
  safe_distance_ratio_ = 1;
  clear_has_safe_distance_ratio();
}
inline double NaviSpeedDeciderConfig::safe_distance_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
  return safe_distance_ratio_;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_ratio(double value) {
  set_has_safe_distance_ratio();
  safe_distance_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
}

// optional double following_accel_ratio = 9 [default = 0.5];
inline bool NaviSpeedDeciderConfig::has_following_accel_ratio() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_following_accel_ratio() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NaviSpeedDeciderConfig::clear_has_following_accel_ratio() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NaviSpeedDeciderConfig::clear_following_accel_ratio() {
  following_accel_ratio_ = 0.5;
  clear_has_following_accel_ratio();
}
inline double NaviSpeedDeciderConfig::following_accel_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.following_accel_ratio)
  return following_accel_ratio_;
}
inline void NaviSpeedDeciderConfig::set_following_accel_ratio(double value) {
  set_has_following_accel_ratio();
  following_accel_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.following_accel_ratio)
}

// optional double soft_centric_accel_limit = 10 [default = 1.2];
inline bool NaviSpeedDeciderConfig::has_soft_centric_accel_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_soft_centric_accel_limit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NaviSpeedDeciderConfig::clear_has_soft_centric_accel_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NaviSpeedDeciderConfig::clear_soft_centric_accel_limit() {
  soft_centric_accel_limit_ = 1.2;
  clear_has_soft_centric_accel_limit();
}
inline double NaviSpeedDeciderConfig::soft_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
  return soft_centric_accel_limit_;
}
inline void NaviSpeedDeciderConfig::set_soft_centric_accel_limit(double value) {
  set_has_soft_centric_accel_limit();
  soft_centric_accel_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
}

// optional double hard_centric_accel_limit = 11 [default = 1.5];
inline bool NaviSpeedDeciderConfig::has_hard_centric_accel_limit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_hard_centric_accel_limit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NaviSpeedDeciderConfig::clear_has_hard_centric_accel_limit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NaviSpeedDeciderConfig::clear_hard_centric_accel_limit() {
  hard_centric_accel_limit_ = 1.5;
  clear_has_hard_centric_accel_limit();
}
inline double NaviSpeedDeciderConfig::hard_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
  return hard_centric_accel_limit_;
}
inline void NaviSpeedDeciderConfig::set_hard_centric_accel_limit(double value) {
  set_has_hard_centric_accel_limit();
  hard_centric_accel_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
}

// optional double hard_speed_limit = 12 [default = 100];
inline bool NaviSpeedDeciderConfig::has_hard_speed_limit() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_hard_speed_limit() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NaviSpeedDeciderConfig::clear_has_hard_speed_limit() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NaviSpeedDeciderConfig::clear_hard_speed_limit() {
  hard_speed_limit_ = 100;
  clear_has_hard_speed_limit();
}
inline double NaviSpeedDeciderConfig::hard_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_speed_limit)
  return hard_speed_limit_;
}
inline void NaviSpeedDeciderConfig::set_hard_speed_limit(double value) {
  set_has_hard_speed_limit();
  hard_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_speed_limit)
}

// optional double hard_accel_limit = 13 [default = 10];
inline bool NaviSpeedDeciderConfig::has_hard_accel_limit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_hard_accel_limit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NaviSpeedDeciderConfig::clear_has_hard_accel_limit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NaviSpeedDeciderConfig::clear_hard_accel_limit() {
  hard_accel_limit_ = 10;
  clear_has_hard_accel_limit();
}
inline double NaviSpeedDeciderConfig::hard_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_accel_limit)
  return hard_accel_limit_;
}
inline void NaviSpeedDeciderConfig::set_hard_accel_limit(double value) {
  set_has_hard_accel_limit();
  hard_accel_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_accel_limit)
}

// optional bool enable_safe_path = 14 [default = true];
inline bool NaviSpeedDeciderConfig::has_enable_safe_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_enable_safe_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NaviSpeedDeciderConfig::clear_has_enable_safe_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NaviSpeedDeciderConfig::clear_enable_safe_path() {
  enable_safe_path_ = true;
  clear_has_enable_safe_path();
}
inline bool NaviSpeedDeciderConfig::enable_safe_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_safe_path)
  return enable_safe_path_;
}
inline void NaviSpeedDeciderConfig::set_enable_safe_path(bool value) {
  set_has_enable_safe_path();
  enable_safe_path_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_safe_path)
}

// optional bool enable_planning_start_point = 15 [default = true];
inline bool NaviSpeedDeciderConfig::has_enable_planning_start_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_enable_planning_start_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NaviSpeedDeciderConfig::clear_has_enable_planning_start_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NaviSpeedDeciderConfig::clear_enable_planning_start_point() {
  enable_planning_start_point_ = true;
  clear_has_enable_planning_start_point();
}
inline bool NaviSpeedDeciderConfig::enable_planning_start_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
  return enable_planning_start_point_;
}
inline void NaviSpeedDeciderConfig::set_enable_planning_start_point(bool value) {
  set_has_enable_planning_start_point();
  enable_planning_start_point_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
}

// optional bool enable_accel_auto_compensation = 16 [default = true];
inline bool NaviSpeedDeciderConfig::has_enable_accel_auto_compensation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_enable_accel_auto_compensation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NaviSpeedDeciderConfig::clear_has_enable_accel_auto_compensation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NaviSpeedDeciderConfig::clear_enable_accel_auto_compensation() {
  enable_accel_auto_compensation_ = true;
  clear_has_enable_accel_auto_compensation();
}
inline bool NaviSpeedDeciderConfig::enable_accel_auto_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
  return enable_accel_auto_compensation_;
}
inline void NaviSpeedDeciderConfig::set_enable_accel_auto_compensation(bool value) {
  set_has_enable_accel_auto_compensation();
  enable_accel_auto_compensation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
}

// optional double kappa_preview = 17 [default = 0];
inline bool NaviSpeedDeciderConfig::has_kappa_preview() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_kappa_preview() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NaviSpeedDeciderConfig::clear_has_kappa_preview() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NaviSpeedDeciderConfig::clear_kappa_preview() {
  kappa_preview_ = 0;
  clear_has_kappa_preview();
}
inline double NaviSpeedDeciderConfig::kappa_preview() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.kappa_preview)
  return kappa_preview_;
}
inline void NaviSpeedDeciderConfig::set_kappa_preview(double value) {
  set_has_kappa_preview();
  kappa_preview_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.kappa_preview)
}

// optional double kappa_threshold = 18 [default = 0];
inline bool NaviSpeedDeciderConfig::has_kappa_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NaviSpeedDeciderConfig::set_has_kappa_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NaviSpeedDeciderConfig::clear_has_kappa_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NaviSpeedDeciderConfig::clear_kappa_threshold() {
  kappa_threshold_ = 0;
  clear_has_kappa_threshold();
}
inline double NaviSpeedDeciderConfig::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.kappa_threshold)
  return kappa_threshold_;
}
inline void NaviSpeedDeciderConfig::set_kappa_threshold(double value) {
  set_has_kappa_threshold();
  kappa_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.kappa_threshold)
}

// -------------------------------------------------------------------

// PathAssessmentDeciderConfig

// -------------------------------------------------------------------

// PathBoundsDeciderConfig

// optional bool is_lane_borrowing = 1;
inline bool PathBoundsDeciderConfig::has_is_lane_borrowing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_is_lane_borrowing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathBoundsDeciderConfig::clear_has_is_lane_borrowing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathBoundsDeciderConfig::clear_is_lane_borrowing() {
  is_lane_borrowing_ = false;
  clear_has_is_lane_borrowing();
}
inline bool PathBoundsDeciderConfig::is_lane_borrowing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.is_lane_borrowing)
  return is_lane_borrowing_;
}
inline void PathBoundsDeciderConfig::set_is_lane_borrowing(bool value) {
  set_has_is_lane_borrowing();
  is_lane_borrowing_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.is_lane_borrowing)
}

// optional bool is_pull_over = 2;
inline bool PathBoundsDeciderConfig::has_is_pull_over() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_is_pull_over() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathBoundsDeciderConfig::clear_has_is_pull_over() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathBoundsDeciderConfig::clear_is_pull_over() {
  is_pull_over_ = false;
  clear_has_is_pull_over();
}
inline bool PathBoundsDeciderConfig::is_pull_over() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.is_pull_over)
  return is_pull_over_;
}
inline void PathBoundsDeciderConfig::set_is_pull_over(bool value) {
  set_has_is_pull_over();
  is_pull_over_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.is_pull_over)
}

// optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
inline bool PathBoundsDeciderConfig::has_pull_over_destination_to_adc_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_pull_over_destination_to_adc_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathBoundsDeciderConfig::clear_has_pull_over_destination_to_adc_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathBoundsDeciderConfig::clear_pull_over_destination_to_adc_buffer() {
  pull_over_destination_to_adc_buffer_ = 25;
  clear_has_pull_over_destination_to_adc_buffer();
}
inline double PathBoundsDeciderConfig::pull_over_destination_to_adc_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_adc_buffer)
  return pull_over_destination_to_adc_buffer_;
}
inline void PathBoundsDeciderConfig::set_pull_over_destination_to_adc_buffer(double value) {
  set_has_pull_over_destination_to_adc_buffer();
  pull_over_destination_to_adc_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_adc_buffer)
}

// optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
inline bool PathBoundsDeciderConfig::has_pull_over_destination_to_pathend_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_pull_over_destination_to_pathend_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PathBoundsDeciderConfig::clear_has_pull_over_destination_to_pathend_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PathBoundsDeciderConfig::clear_pull_over_destination_to_pathend_buffer() {
  pull_over_destination_to_pathend_buffer_ = 10;
  clear_has_pull_over_destination_to_pathend_buffer();
}
inline double PathBoundsDeciderConfig::pull_over_destination_to_pathend_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_pathend_buffer)
  return pull_over_destination_to_pathend_buffer_;
}
inline void PathBoundsDeciderConfig::set_pull_over_destination_to_pathend_buffer(double value) {
  set_has_pull_over_destination_to_pathend_buffer();
  pull_over_destination_to_pathend_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_pathend_buffer)
}

// optional double pull_over_road_edge_buffer = 5 [default = 0.15];
inline bool PathBoundsDeciderConfig::has_pull_over_road_edge_buffer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_pull_over_road_edge_buffer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PathBoundsDeciderConfig::clear_has_pull_over_road_edge_buffer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PathBoundsDeciderConfig::clear_pull_over_road_edge_buffer() {
  pull_over_road_edge_buffer_ = 0.15;
  clear_has_pull_over_road_edge_buffer();
}
inline double PathBoundsDeciderConfig::pull_over_road_edge_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_road_edge_buffer)
  return pull_over_road_edge_buffer_;
}
inline void PathBoundsDeciderConfig::set_pull_over_road_edge_buffer(double value) {
  set_has_pull_over_road_edge_buffer();
  pull_over_road_edge_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_road_edge_buffer)
}

// optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
inline bool PathBoundsDeciderConfig::has_pull_over_approach_lon_distance_adjust_factor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_pull_over_approach_lon_distance_adjust_factor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PathBoundsDeciderConfig::clear_has_pull_over_approach_lon_distance_adjust_factor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PathBoundsDeciderConfig::clear_pull_over_approach_lon_distance_adjust_factor() {
  pull_over_approach_lon_distance_adjust_factor_ = 1.5;
  clear_has_pull_over_approach_lon_distance_adjust_factor();
}
inline double PathBoundsDeciderConfig::pull_over_approach_lon_distance_adjust_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_approach_lon_distance_adjust_factor)
  return pull_over_approach_lon_distance_adjust_factor_;
}
inline void PathBoundsDeciderConfig::set_pull_over_approach_lon_distance_adjust_factor(double value) {
  set_has_pull_over_approach_lon_distance_adjust_factor();
  pull_over_approach_lon_distance_adjust_factor_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_approach_lon_distance_adjust_factor)
}

// optional double adc_buffer_coeff = 7 [default = 1];
inline bool PathBoundsDeciderConfig::has_adc_buffer_coeff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_adc_buffer_coeff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PathBoundsDeciderConfig::clear_has_adc_buffer_coeff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PathBoundsDeciderConfig::clear_adc_buffer_coeff() {
  adc_buffer_coeff_ = 1;
  clear_has_adc_buffer_coeff();
}
inline double PathBoundsDeciderConfig::adc_buffer_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.adc_buffer_coeff)
  return adc_buffer_coeff_;
}
inline void PathBoundsDeciderConfig::set_adc_buffer_coeff(double value) {
  set_has_adc_buffer_coeff();
  adc_buffer_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.adc_buffer_coeff)
}

// optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
inline bool PathBoundsDeciderConfig::has_is_extend_lane_bounds_to_include_adc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathBoundsDeciderConfig::set_has_is_extend_lane_bounds_to_include_adc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathBoundsDeciderConfig::clear_has_is_extend_lane_bounds_to_include_adc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathBoundsDeciderConfig::clear_is_extend_lane_bounds_to_include_adc() {
  is_extend_lane_bounds_to_include_adc_ = true;
  clear_has_is_extend_lane_bounds_to_include_adc();
}
inline bool PathBoundsDeciderConfig::is_extend_lane_bounds_to_include_adc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.is_extend_lane_bounds_to_include_adc)
  return is_extend_lane_bounds_to_include_adc_;
}
inline void PathBoundsDeciderConfig::set_is_extend_lane_bounds_to_include_adc(bool value) {
  set_has_is_extend_lane_bounds_to_include_adc();
  is_extend_lane_bounds_to_include_adc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.is_extend_lane_bounds_to_include_adc)
}

// -------------------------------------------------------------------

// PathDeciderConfig

// optional double static_obstacle_buffer = 1 [default = 0.3];
inline bool PathDeciderConfig::has_static_obstacle_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathDeciderConfig::set_has_static_obstacle_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathDeciderConfig::clear_has_static_obstacle_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathDeciderConfig::clear_static_obstacle_buffer() {
  static_obstacle_buffer_ = 0.3;
  clear_has_static_obstacle_buffer();
}
inline double PathDeciderConfig::static_obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathDeciderConfig.static_obstacle_buffer)
  return static_obstacle_buffer_;
}
inline void PathDeciderConfig::set_static_obstacle_buffer(double value) {
  set_has_static_obstacle_buffer();
  static_obstacle_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathDeciderConfig.static_obstacle_buffer)
}

// -------------------------------------------------------------------

// PathLaneBorrowDeciderConfig

// optional bool allow_lane_borrowing = 1;
inline bool PathLaneBorrowDeciderConfig::has_allow_lane_borrowing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathLaneBorrowDeciderConfig::set_has_allow_lane_borrowing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathLaneBorrowDeciderConfig::clear_has_allow_lane_borrowing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathLaneBorrowDeciderConfig::clear_allow_lane_borrowing() {
  allow_lane_borrowing_ = false;
  clear_has_allow_lane_borrowing();
}
inline bool PathLaneBorrowDeciderConfig::allow_lane_borrowing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathLaneBorrowDeciderConfig.allow_lane_borrowing)
  return allow_lane_borrowing_;
}
inline void PathLaneBorrowDeciderConfig::set_allow_lane_borrowing(bool value) {
  set_has_allow_lane_borrowing();
  allow_lane_borrowing_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathLaneBorrowDeciderConfig.allow_lane_borrowing)
}

// -------------------------------------------------------------------

// PathReferenceDeciderConfig

// optional uint32 min_path_reference_length = 1 [default = 20];
inline bool PathReferenceDeciderConfig::has_min_path_reference_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathReferenceDeciderConfig::set_has_min_path_reference_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathReferenceDeciderConfig::clear_has_min_path_reference_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathReferenceDeciderConfig::clear_min_path_reference_length() {
  min_path_reference_length_ = 20u;
  clear_has_min_path_reference_length();
}
inline ::google::protobuf::uint32 PathReferenceDeciderConfig::min_path_reference_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathReferenceDeciderConfig.min_path_reference_length)
  return min_path_reference_length_;
}
inline void PathReferenceDeciderConfig::set_min_path_reference_length(::google::protobuf::uint32 value) {
  set_has_min_path_reference_length();
  min_path_reference_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathReferenceDeciderConfig.min_path_reference_length)
}

// optional double weight_x_ref_path_reference = 2;
inline bool PathReferenceDeciderConfig::has_weight_x_ref_path_reference() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathReferenceDeciderConfig::set_has_weight_x_ref_path_reference() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathReferenceDeciderConfig::clear_has_weight_x_ref_path_reference() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathReferenceDeciderConfig::clear_weight_x_ref_path_reference() {
  weight_x_ref_path_reference_ = 0;
  clear_has_weight_x_ref_path_reference();
}
inline double PathReferenceDeciderConfig::weight_x_ref_path_reference() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathReferenceDeciderConfig.weight_x_ref_path_reference)
  return weight_x_ref_path_reference_;
}
inline void PathReferenceDeciderConfig::set_weight_x_ref_path_reference(double value) {
  set_has_weight_x_ref_path_reference();
  weight_x_ref_path_reference_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathReferenceDeciderConfig.weight_x_ref_path_reference)
}

// -------------------------------------------------------------------

// PathReuseDeciderConfig

// optional bool reuse_path = 1;
inline bool PathReuseDeciderConfig::has_reuse_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathReuseDeciderConfig::set_has_reuse_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathReuseDeciderConfig::clear_has_reuse_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathReuseDeciderConfig::clear_reuse_path() {
  reuse_path_ = false;
  clear_has_reuse_path();
}
inline bool PathReuseDeciderConfig::reuse_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathReuseDeciderConfig.reuse_path)
  return reuse_path_;
}
inline void PathReuseDeciderConfig::set_reuse_path(bool value) {
  set_has_reuse_path();
  reuse_path_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PathReuseDeciderConfig.reuse_path)
}

// -------------------------------------------------------------------

// PiecewiseJerkNonlinearSpeedOptimizerConfig

// optional double acc_weight = 1 [default = 500];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_acc_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_acc_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_acc_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_acc_weight() {
  acc_weight_ = 500;
  clear_has_acc_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.acc_weight)
  return acc_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_acc_weight(double value) {
  set_has_acc_weight();
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 100];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 100;
  clear_has_jerk_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.jerk_weight)
  return jerk_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.jerk_weight)
}

// optional double lat_acc_weight = 3 [default = 500];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_lat_acc_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_lat_acc_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_lat_acc_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_lat_acc_weight() {
  lat_acc_weight_ = 500;
  clear_has_lat_acc_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::lat_acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.lat_acc_weight)
  return lat_acc_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_lat_acc_weight(double value) {
  set_has_lat_acc_weight();
  lat_acc_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.lat_acc_weight)
}

// optional double s_potential_weight = 4 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_s_potential_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_s_potential_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_s_potential_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_s_potential_weight() {
  s_potential_weight_ = 10;
  clear_has_s_potential_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::s_potential_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.s_potential_weight)
  return s_potential_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_s_potential_weight(double value) {
  set_has_s_potential_weight();
  s_potential_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.s_potential_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_ref_v_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_ref_v_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_ref_v_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  clear_has_ref_v_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_v_weight)
  return ref_v_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_ref_v_weight(double value) {
  set_has_ref_v_weight();
  ref_v_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_v_weight)
}

// optional double ref_s_weight = 6 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_ref_s_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_ref_s_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_ref_s_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  clear_has_ref_s_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_s_weight)
  return ref_s_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_ref_s_weight(double value) {
  set_has_ref_s_weight();
  ref_s_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_s_weight)
}

// optional double end_s_weight = 7 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_end_s_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_end_s_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_end_s_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_end_s_weight() {
  end_s_weight_ = 10;
  clear_has_end_s_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::end_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_s_weight)
  return end_s_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_end_s_weight(double value) {
  set_has_end_s_weight();
  end_s_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_s_weight)
}

// optional double end_v_weight = 8 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_end_v_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_end_v_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_end_v_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_end_v_weight() {
  end_v_weight_ = 10;
  clear_has_end_v_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::end_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_v_weight)
  return end_v_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_end_v_weight(double value) {
  set_has_end_v_weight();
  end_v_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_v_weight)
}

// optional double end_a_weight = 9 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_end_a_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_end_a_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_end_a_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_end_a_weight() {
  end_a_weight_ = 10;
  clear_has_end_a_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::end_a_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_a_weight)
  return end_a_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_end_a_weight(double value) {
  set_has_end_a_weight();
  end_a_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_a_weight)
}

// optional double soft_s_bound_weight = 10 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_soft_s_bound_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_soft_s_bound_weight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_soft_s_bound_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_soft_s_bound_weight() {
  soft_s_bound_weight_ = 10;
  clear_has_soft_s_bound_weight();
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::soft_s_bound_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.soft_s_bound_weight)
  return soft_s_bound_weight_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_soft_s_bound_weight(double value) {
  set_has_soft_s_bound_weight();
  soft_s_bound_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.soft_s_bound_weight)
}

// optional bool use_warm_start = 100 [default = true];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_use_warm_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_has_use_warm_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_has_use_warm_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_use_warm_start() {
  use_warm_start_ = true;
  clear_has_use_warm_start();
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::use_warm_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.use_warm_start)
  return use_warm_start_;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_use_warm_start(bool value) {
  set_has_use_warm_start();
  use_warm_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.use_warm_start)
}

// -------------------------------------------------------------------

// PiecewiseJerkPathOptimizerConfig

// optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
inline bool PiecewiseJerkPathOptimizerConfig::has_default_path_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkPathOptimizerConfig::set_has_default_path_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkPathOptimizerConfig::clear_has_default_path_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkPathOptimizerConfig::clear_default_path_config() {
  if (default_path_config_ != NULL) default_path_config_->Clear();
  clear_has_default_path_config();
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::_internal_default_path_config() const {
  return *default_path_config_;
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::default_path_config() const {
  const ::apollo::planning::PiecewiseJerkPathWeights* p = default_path_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::PiecewiseJerkPathWeights*>(
      &::apollo::planning::_PiecewiseJerkPathWeights_default_instance_);
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::release_default_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
  clear_has_default_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* temp = default_path_config_;
  default_path_config_ = NULL;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::mutable_default_path_config() {
  set_has_default_path_config();
  if (default_path_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(GetArenaNoVirtual());
    default_path_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
  return default_path_config_;
}
inline void PiecewiseJerkPathOptimizerConfig::set_allocated_default_path_config(::apollo::planning::PiecewiseJerkPathWeights* default_path_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_path_config_;
  }
  if (default_path_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_path_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_path_config, submessage_arena);
    }
    set_has_default_path_config();
  } else {
    clear_has_default_path_config();
  }
  default_path_config_ = default_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
}

// optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
inline bool PiecewiseJerkPathOptimizerConfig::has_lane_change_path_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkPathOptimizerConfig::set_has_lane_change_path_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkPathOptimizerConfig::clear_has_lane_change_path_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkPathOptimizerConfig::clear_lane_change_path_config() {
  if (lane_change_path_config_ != NULL) lane_change_path_config_->Clear();
  clear_has_lane_change_path_config();
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::_internal_lane_change_path_config() const {
  return *lane_change_path_config_;
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::lane_change_path_config() const {
  const ::apollo::planning::PiecewiseJerkPathWeights* p = lane_change_path_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::PiecewiseJerkPathWeights*>(
      &::apollo::planning::_PiecewiseJerkPathWeights_default_instance_);
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::release_lane_change_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
  clear_has_lane_change_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* temp = lane_change_path_config_;
  lane_change_path_config_ = NULL;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::mutable_lane_change_path_config() {
  set_has_lane_change_path_config();
  if (lane_change_path_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(GetArenaNoVirtual());
    lane_change_path_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
  return lane_change_path_config_;
}
inline void PiecewiseJerkPathOptimizerConfig::set_allocated_lane_change_path_config(::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_change_path_config_;
  }
  if (lane_change_path_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_change_path_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_change_path_config, submessage_arena);
    }
    set_has_lane_change_path_config();
  } else {
    clear_has_lane_change_path_config();
  }
  lane_change_path_config_ = lane_change_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
}

// optional double path_reference_l_weight = 3 [default = 0];
inline bool PiecewiseJerkPathOptimizerConfig::has_path_reference_l_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkPathOptimizerConfig::set_has_path_reference_l_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkPathOptimizerConfig::clear_has_path_reference_l_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkPathOptimizerConfig::clear_path_reference_l_weight() {
  path_reference_l_weight_ = 0;
  clear_has_path_reference_l_weight();
}
inline double PiecewiseJerkPathOptimizerConfig::path_reference_l_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathOptimizerConfig.path_reference_l_weight)
  return path_reference_l_weight_;
}
inline void PiecewiseJerkPathOptimizerConfig::set_path_reference_l_weight(double value) {
  set_has_path_reference_l_weight();
  path_reference_l_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathOptimizerConfig.path_reference_l_weight)
}

// -------------------------------------------------------------------

// PiecewiseJerkPathWeights

// optional double l_weight = 1 [default = 1];
inline bool PiecewiseJerkPathWeights::has_l_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_l_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkPathWeights::clear_has_l_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkPathWeights::clear_l_weight() {
  l_weight_ = 1;
  clear_has_l_weight();
}
inline double PiecewiseJerkPathWeights::l_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.l_weight)
  return l_weight_;
}
inline void PiecewiseJerkPathWeights::set_l_weight(double value) {
  set_has_l_weight();
  l_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.l_weight)
}

// optional double dl_weight = 2 [default = 100];
inline bool PiecewiseJerkPathWeights::has_dl_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_dl_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkPathWeights::clear_has_dl_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkPathWeights::clear_dl_weight() {
  dl_weight_ = 100;
  clear_has_dl_weight();
}
inline double PiecewiseJerkPathWeights::dl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.dl_weight)
  return dl_weight_;
}
inline void PiecewiseJerkPathWeights::set_dl_weight(double value) {
  set_has_dl_weight();
  dl_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.dl_weight)
}

// optional double ddl_weight = 3 [default = 1000];
inline bool PiecewiseJerkPathWeights::has_ddl_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_ddl_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkPathWeights::clear_has_ddl_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkPathWeights::clear_ddl_weight() {
  ddl_weight_ = 1000;
  clear_has_ddl_weight();
}
inline double PiecewiseJerkPathWeights::ddl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.ddl_weight)
  return ddl_weight_;
}
inline void PiecewiseJerkPathWeights::set_ddl_weight(double value) {
  set_has_ddl_weight();
  ddl_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.ddl_weight)
}

// optional double dddl_weight = 4 [default = 10000];
inline bool PiecewiseJerkPathWeights::has_dddl_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_dddl_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiecewiseJerkPathWeights::clear_has_dddl_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiecewiseJerkPathWeights::clear_dddl_weight() {
  dddl_weight_ = 10000;
  clear_has_dddl_weight();
}
inline double PiecewiseJerkPathWeights::dddl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.dddl_weight)
  return dddl_weight_;
}
inline void PiecewiseJerkPathWeights::set_dddl_weight(double value) {
  set_has_dddl_weight();
  dddl_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.dddl_weight)
}

// -------------------------------------------------------------------

// PiecewiseJerkSpeedOptimizerConfig

// optional double acc_weight = 1 [default = 1];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_acc_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_acc_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_acc_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_acc_weight() {
  acc_weight_ = 1;
  clear_has_acc_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
  return acc_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_acc_weight(double value) {
  set_has_acc_weight();
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
  return jerk_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
}

// optional double kappa_penalty_weight = 3 [default = 1000];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_kappa_penalty_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_kappa_penalty_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_kappa_penalty_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_kappa_penalty_weight() {
  kappa_penalty_weight_ = 1000;
  clear_has_kappa_penalty_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::kappa_penalty_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
  return kappa_penalty_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_kappa_penalty_weight(double value) {
  set_has_kappa_penalty_weight();
  kappa_penalty_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
}

// optional double ref_s_weight = 4 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_ref_s_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_ref_s_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_ref_s_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  clear_has_ref_s_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
  return ref_s_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_s_weight(double value) {
  set_has_ref_s_weight();
  ref_s_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_ref_v_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_ref_v_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_ref_v_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  clear_has_ref_v_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
  return ref_v_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_v_weight(double value) {
  set_has_ref_v_weight();
  ref_v_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
}

// -------------------------------------------------------------------

// RuleBasedStopDeciderConfig

// optional double max_adc_stop_speed = 1 [default = 0.3];
inline bool RuleBasedStopDeciderConfig::has_max_adc_stop_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_max_adc_stop_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuleBasedStopDeciderConfig::clear_has_max_adc_stop_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuleBasedStopDeciderConfig::clear_max_adc_stop_speed() {
  max_adc_stop_speed_ = 0.3;
  clear_has_max_adc_stop_speed();
}
inline double RuleBasedStopDeciderConfig::max_adc_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
  return max_adc_stop_speed_;
}
inline void RuleBasedStopDeciderConfig::set_max_adc_stop_speed(double value) {
  set_has_max_adc_stop_speed();
  max_adc_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
}

// optional double max_valid_stop_distance = 2 [default = 0.5];
inline bool RuleBasedStopDeciderConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuleBasedStopDeciderConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuleBasedStopDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.5;
  clear_has_max_valid_stop_distance();
}
inline double RuleBasedStopDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
inline void RuleBasedStopDeciderConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
}

// optional double search_beam_length = 3 [default = 5];
inline bool RuleBasedStopDeciderConfig::has_search_beam_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_search_beam_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RuleBasedStopDeciderConfig::clear_has_search_beam_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_length() {
  search_beam_length_ = 5;
  clear_has_search_beam_length();
}
inline double RuleBasedStopDeciderConfig::search_beam_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_beam_length)
  return search_beam_length_;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_length(double value) {
  set_has_search_beam_length();
  search_beam_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_beam_length)
}

// optional double search_beam_radius_intensity = 4 [default = 0.08];
inline bool RuleBasedStopDeciderConfig::has_search_beam_radius_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_search_beam_radius_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RuleBasedStopDeciderConfig::clear_has_search_beam_radius_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_radius_intensity() {
  search_beam_radius_intensity_ = 0.08;
  clear_has_search_beam_radius_intensity();
}
inline double RuleBasedStopDeciderConfig::search_beam_radius_intensity() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
  return search_beam_radius_intensity_;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_radius_intensity(double value) {
  set_has_search_beam_radius_intensity();
  search_beam_radius_intensity_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
}

// optional double search_range = 5 [default = 3.14];
inline bool RuleBasedStopDeciderConfig::has_search_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_search_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RuleBasedStopDeciderConfig::clear_has_search_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RuleBasedStopDeciderConfig::clear_search_range() {
  search_range_ = 3.14;
  clear_has_search_range();
}
inline double RuleBasedStopDeciderConfig::search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_range)
  return search_range_;
}
inline void RuleBasedStopDeciderConfig::set_search_range(double value) {
  set_has_search_range();
  search_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_range)
}

// optional double is_block_angle_threshold = 6 [default = 1.57];
inline bool RuleBasedStopDeciderConfig::has_is_block_angle_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_is_block_angle_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RuleBasedStopDeciderConfig::clear_has_is_block_angle_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RuleBasedStopDeciderConfig::clear_is_block_angle_threshold() {
  is_block_angle_threshold_ = 1.57;
  clear_has_is_block_angle_threshold();
}
inline double RuleBasedStopDeciderConfig::is_block_angle_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
  return is_block_angle_threshold_;
}
inline void RuleBasedStopDeciderConfig::set_is_block_angle_threshold(double value) {
  set_has_is_block_angle_threshold();
  is_block_angle_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
}

// optional double approach_distance_for_lane_change = 10 [default = 80];
inline bool RuleBasedStopDeciderConfig::has_approach_distance_for_lane_change() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_approach_distance_for_lane_change() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RuleBasedStopDeciderConfig::clear_has_approach_distance_for_lane_change() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RuleBasedStopDeciderConfig::clear_approach_distance_for_lane_change() {
  approach_distance_for_lane_change_ = 80;
  clear_has_approach_distance_for_lane_change();
}
inline double RuleBasedStopDeciderConfig::approach_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
  return approach_distance_for_lane_change_;
}
inline void RuleBasedStopDeciderConfig::set_approach_distance_for_lane_change(double value) {
  set_has_approach_distance_for_lane_change();
  approach_distance_for_lane_change_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
}

// optional double urgent_distance_for_lane_change = 11 [default = 50];
inline bool RuleBasedStopDeciderConfig::has_urgent_distance_for_lane_change() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_urgent_distance_for_lane_change() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RuleBasedStopDeciderConfig::clear_has_urgent_distance_for_lane_change() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RuleBasedStopDeciderConfig::clear_urgent_distance_for_lane_change() {
  urgent_distance_for_lane_change_ = 50;
  clear_has_urgent_distance_for_lane_change();
}
inline double RuleBasedStopDeciderConfig::urgent_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
  return urgent_distance_for_lane_change_;
}
inline void RuleBasedStopDeciderConfig::set_urgent_distance_for_lane_change(double value) {
  set_has_urgent_distance_for_lane_change();
  urgent_distance_for_lane_change_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
}

// -------------------------------------------------------------------

// SpeedBoundsDeciderConfig

// optional double total_time = 1 [default = 7];
inline bool SpeedBoundsDeciderConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedBoundsDeciderConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedBoundsDeciderConfig::clear_total_time() {
  total_time_ = 7;
  clear_has_total_time();
}
inline double SpeedBoundsDeciderConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.total_time)
  return total_time_;
}
inline void SpeedBoundsDeciderConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.total_time)
}

// optional double boundary_buffer = 2 [default = 0.1];
inline bool SpeedBoundsDeciderConfig::has_boundary_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_boundary_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedBoundsDeciderConfig::clear_has_boundary_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedBoundsDeciderConfig::clear_boundary_buffer() {
  boundary_buffer_ = 0.1;
  clear_has_boundary_buffer();
}
inline double SpeedBoundsDeciderConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.boundary_buffer)
  return boundary_buffer_;
}
inline void SpeedBoundsDeciderConfig::set_boundary_buffer(double value) {
  set_has_boundary_buffer();
  boundary_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.boundary_buffer)
}

// optional double max_centric_acceleration_limit = 3 [default = 2];
inline bool SpeedBoundsDeciderConfig::has_max_centric_acceleration_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_max_centric_acceleration_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedBoundsDeciderConfig::clear_has_max_centric_acceleration_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedBoundsDeciderConfig::clear_max_centric_acceleration_limit() {
  max_centric_acceleration_limit_ = 2;
  clear_has_max_centric_acceleration_limit();
}
inline double SpeedBoundsDeciderConfig::max_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.max_centric_acceleration_limit)
  return max_centric_acceleration_limit_;
}
inline void SpeedBoundsDeciderConfig::set_max_centric_acceleration_limit(double value) {
  set_has_max_centric_acceleration_limit();
  max_centric_acceleration_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.max_centric_acceleration_limit)
}

// optional double minimal_kappa = 4 [default = 1e-05];
inline bool SpeedBoundsDeciderConfig::has_minimal_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_minimal_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpeedBoundsDeciderConfig::clear_has_minimal_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpeedBoundsDeciderConfig::clear_minimal_kappa() {
  minimal_kappa_ = 1e-05;
  clear_has_minimal_kappa();
}
inline double SpeedBoundsDeciderConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.minimal_kappa)
  return minimal_kappa_;
}
inline void SpeedBoundsDeciderConfig::set_minimal_kappa(double value) {
  set_has_minimal_kappa();
  minimal_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.minimal_kappa)
}

// optional double point_extension = 5 [default = 1];
inline bool SpeedBoundsDeciderConfig::has_point_extension() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_point_extension() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpeedBoundsDeciderConfig::clear_has_point_extension() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpeedBoundsDeciderConfig::clear_point_extension() {
  point_extension_ = 1;
  clear_has_point_extension();
}
inline double SpeedBoundsDeciderConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.point_extension)
  return point_extension_;
}
inline void SpeedBoundsDeciderConfig::set_point_extension(double value) {
  set_has_point_extension();
  point_extension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.point_extension)
}

// optional double lowest_speed = 6 [default = 2.5];
inline bool SpeedBoundsDeciderConfig::has_lowest_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_lowest_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpeedBoundsDeciderConfig::clear_has_lowest_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpeedBoundsDeciderConfig::clear_lowest_speed() {
  lowest_speed_ = 2.5;
  clear_has_lowest_speed();
}
inline double SpeedBoundsDeciderConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.lowest_speed)
  return lowest_speed_;
}
inline void SpeedBoundsDeciderConfig::set_lowest_speed(double value) {
  set_has_lowest_speed();
  lowest_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.lowest_speed)
}

// optional double collision_safety_range = 7 [default = 1];
inline bool SpeedBoundsDeciderConfig::has_collision_safety_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_collision_safety_range() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpeedBoundsDeciderConfig::clear_has_collision_safety_range() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpeedBoundsDeciderConfig::clear_collision_safety_range() {
  collision_safety_range_ = 1;
  clear_has_collision_safety_range();
}
inline double SpeedBoundsDeciderConfig::collision_safety_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.collision_safety_range)
  return collision_safety_range_;
}
inline void SpeedBoundsDeciderConfig::set_collision_safety_range(double value) {
  set_has_collision_safety_range();
  collision_safety_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.collision_safety_range)
}

// optional double static_obs_nudge_speed_ratio = 8;
inline bool SpeedBoundsDeciderConfig::has_static_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedBoundsDeciderConfig::clear_has_static_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedBoundsDeciderConfig::clear_static_obs_nudge_speed_ratio() {
  static_obs_nudge_speed_ratio_ = 0;
  clear_has_static_obs_nudge_speed_ratio();
}
inline double SpeedBoundsDeciderConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.static_obs_nudge_speed_ratio)
  return static_obs_nudge_speed_ratio_;
}
inline void SpeedBoundsDeciderConfig::set_static_obs_nudge_speed_ratio(double value) {
  set_has_static_obs_nudge_speed_ratio();
  static_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 9;
inline bool SpeedBoundsDeciderConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedBoundsDeciderConfig::set_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedBoundsDeciderConfig::clear_has_dynamic_obs_nudge_speed_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedBoundsDeciderConfig::clear_dynamic_obs_nudge_speed_ratio() {
  dynamic_obs_nudge_speed_ratio_ = 0;
  clear_has_dynamic_obs_nudge_speed_ratio();
}
inline double SpeedBoundsDeciderConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.dynamic_obs_nudge_speed_ratio)
  return dynamic_obs_nudge_speed_ratio_;
}
inline void SpeedBoundsDeciderConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  set_has_dynamic_obs_nudge_speed_ratio();
  dynamic_obs_nudge_speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.dynamic_obs_nudge_speed_ratio)
}

// -------------------------------------------------------------------

// SpeedHeuristicOptimizerConfig

// optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
inline bool SpeedHeuristicOptimizerConfig::has_default_speed_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedHeuristicOptimizerConfig::set_has_default_speed_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedHeuristicOptimizerConfig::clear_has_default_speed_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedHeuristicOptimizerConfig::clear_default_speed_config() {
  if (default_speed_config_ != NULL) default_speed_config_->Clear();
  clear_has_default_speed_config();
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::_internal_default_speed_config() const {
  return *default_speed_config_;
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::default_speed_config() const {
  const ::apollo::planning::DpStSpeedOptimizerConfig* p = default_speed_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::DpStSpeedOptimizerConfig*>(
      &::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_);
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::release_default_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
  clear_has_default_speed_config();
  ::apollo::planning::DpStSpeedOptimizerConfig* temp = default_speed_config_;
  default_speed_config_ = NULL;
  return temp;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::mutable_default_speed_config() {
  set_has_default_speed_config();
  if (default_speed_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::DpStSpeedOptimizerConfig>(GetArenaNoVirtual());
    default_speed_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
  return default_speed_config_;
}
inline void SpeedHeuristicOptimizerConfig::set_allocated_default_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_speed_config_;
  }
  if (default_speed_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_speed_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_speed_config, submessage_arena);
    }
    set_has_default_speed_config();
  } else {
    clear_has_default_speed_config();
  }
  default_speed_config_ = default_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
}

// optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
inline bool SpeedHeuristicOptimizerConfig::has_lane_change_speed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedHeuristicOptimizerConfig::set_has_lane_change_speed_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedHeuristicOptimizerConfig::clear_has_lane_change_speed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedHeuristicOptimizerConfig::clear_lane_change_speed_config() {
  if (lane_change_speed_config_ != NULL) lane_change_speed_config_->Clear();
  clear_has_lane_change_speed_config();
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::_internal_lane_change_speed_config() const {
  return *lane_change_speed_config_;
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::lane_change_speed_config() const {
  const ::apollo::planning::DpStSpeedOptimizerConfig* p = lane_change_speed_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::DpStSpeedOptimizerConfig*>(
      &::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_);
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::release_lane_change_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
  clear_has_lane_change_speed_config();
  ::apollo::planning::DpStSpeedOptimizerConfig* temp = lane_change_speed_config_;
  lane_change_speed_config_ = NULL;
  return temp;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::mutable_lane_change_speed_config() {
  set_has_lane_change_speed_config();
  if (lane_change_speed_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::DpStSpeedOptimizerConfig>(GetArenaNoVirtual());
    lane_change_speed_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
  return lane_change_speed_config_;
}
inline void SpeedHeuristicOptimizerConfig::set_allocated_lane_change_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_change_speed_config_;
  }
  if (lane_change_speed_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_change_speed_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_change_speed_config, submessage_arena);
    }
    set_has_lane_change_speed_config();
  } else {
    clear_has_lane_change_speed_config();
  }
  lane_change_speed_config_ = lane_change_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
}

// -------------------------------------------------------------------

// DpStSpeedOptimizerConfig

// optional double unit_t = 1 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_unit_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_unit_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DpStSpeedOptimizerConfig::clear_has_unit_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DpStSpeedOptimizerConfig::clear_unit_t() {
  unit_t_ = 1;
  clear_has_unit_t();
}
inline double DpStSpeedOptimizerConfig::unit_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.unit_t)
  return unit_t_;
}
inline void DpStSpeedOptimizerConfig::set_unit_t(double value) {
  set_has_unit_t();
  unit_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.unit_t)
}

// optional int32 dense_dimension_s = 2 [default = 41];
inline bool DpStSpeedOptimizerConfig::has_dense_dimension_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_dense_dimension_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DpStSpeedOptimizerConfig::clear_has_dense_dimension_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DpStSpeedOptimizerConfig::clear_dense_dimension_s() {
  dense_dimension_s_ = 41;
  clear_has_dense_dimension_s();
}
inline ::google::protobuf::int32 DpStSpeedOptimizerConfig::dense_dimension_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.dense_dimension_s)
  return dense_dimension_s_;
}
inline void DpStSpeedOptimizerConfig::set_dense_dimension_s(::google::protobuf::int32 value) {
  set_has_dense_dimension_s();
  dense_dimension_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.dense_dimension_s)
}

// optional double dense_unit_s = 3 [default = 0.5];
inline bool DpStSpeedOptimizerConfig::has_dense_unit_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_dense_unit_s() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DpStSpeedOptimizerConfig::clear_has_dense_unit_s() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DpStSpeedOptimizerConfig::clear_dense_unit_s() {
  dense_unit_s_ = 0.5;
  clear_has_dense_unit_s();
}
inline double DpStSpeedOptimizerConfig::dense_unit_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.dense_unit_s)
  return dense_unit_s_;
}
inline void DpStSpeedOptimizerConfig::set_dense_unit_s(double value) {
  set_has_dense_unit_s();
  dense_unit_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.dense_unit_s)
}

// optional double sparse_unit_s = 4 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_sparse_unit_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_sparse_unit_s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DpStSpeedOptimizerConfig::clear_has_sparse_unit_s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DpStSpeedOptimizerConfig::clear_sparse_unit_s() {
  sparse_unit_s_ = 1;
  clear_has_sparse_unit_s();
}
inline double DpStSpeedOptimizerConfig::sparse_unit_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.sparse_unit_s)
  return sparse_unit_s_;
}
inline void DpStSpeedOptimizerConfig::set_sparse_unit_s(double value) {
  set_has_sparse_unit_s();
  sparse_unit_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.sparse_unit_s)
}

// optional double speed_weight = 10 [default = 0];
inline bool DpStSpeedOptimizerConfig::has_speed_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_speed_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DpStSpeedOptimizerConfig::clear_has_speed_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DpStSpeedOptimizerConfig::clear_speed_weight() {
  speed_weight_ = 0;
  clear_has_speed_weight();
}
inline double DpStSpeedOptimizerConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.speed_weight)
  return speed_weight_;
}
inline void DpStSpeedOptimizerConfig::set_speed_weight(double value) {
  set_has_speed_weight();
  speed_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.speed_weight)
}

// optional double accel_weight = 11 [default = 10];
inline bool DpStSpeedOptimizerConfig::has_accel_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_accel_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DpStSpeedOptimizerConfig::clear_has_accel_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DpStSpeedOptimizerConfig::clear_accel_weight() {
  accel_weight_ = 10;
  clear_has_accel_weight();
}
inline double DpStSpeedOptimizerConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.accel_weight)
  return accel_weight_;
}
inline void DpStSpeedOptimizerConfig::set_accel_weight(double value) {
  set_has_accel_weight();
  accel_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.accel_weight)
}

// optional double jerk_weight = 12 [default = 10];
inline bool DpStSpeedOptimizerConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DpStSpeedOptimizerConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DpStSpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
inline double DpStSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.jerk_weight)
  return jerk_weight_;
}
inline void DpStSpeedOptimizerConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.jerk_weight)
}

// optional double obstacle_weight = 13 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_obstacle_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_obstacle_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DpStSpeedOptimizerConfig::clear_has_obstacle_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DpStSpeedOptimizerConfig::clear_obstacle_weight() {
  obstacle_weight_ = 1;
  clear_has_obstacle_weight();
}
inline double DpStSpeedOptimizerConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.obstacle_weight)
  return obstacle_weight_;
}
inline void DpStSpeedOptimizerConfig::set_obstacle_weight(double value) {
  set_has_obstacle_weight();
  obstacle_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.obstacle_weight)
}

// optional double reference_weight = 14 [default = 0];
inline bool DpStSpeedOptimizerConfig::has_reference_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_reference_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DpStSpeedOptimizerConfig::clear_has_reference_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DpStSpeedOptimizerConfig::clear_reference_weight() {
  reference_weight_ = 0;
  clear_has_reference_weight();
}
inline double DpStSpeedOptimizerConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.reference_weight)
  return reference_weight_;
}
inline void DpStSpeedOptimizerConfig::set_reference_weight(double value) {
  set_has_reference_weight();
  reference_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.reference_weight)
}

// optional double go_down_buffer = 15 [default = 5];
inline bool DpStSpeedOptimizerConfig::has_go_down_buffer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_go_down_buffer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DpStSpeedOptimizerConfig::clear_has_go_down_buffer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DpStSpeedOptimizerConfig::clear_go_down_buffer() {
  go_down_buffer_ = 5;
  clear_has_go_down_buffer();
}
inline double DpStSpeedOptimizerConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.go_down_buffer)
  return go_down_buffer_;
}
inline void DpStSpeedOptimizerConfig::set_go_down_buffer(double value) {
  set_has_go_down_buffer();
  go_down_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.go_down_buffer)
}

// optional double go_up_buffer = 16 [default = 5];
inline bool DpStSpeedOptimizerConfig::has_go_up_buffer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_go_up_buffer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DpStSpeedOptimizerConfig::clear_has_go_up_buffer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DpStSpeedOptimizerConfig::clear_go_up_buffer() {
  go_up_buffer_ = 5;
  clear_has_go_up_buffer();
}
inline double DpStSpeedOptimizerConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.go_up_buffer)
  return go_up_buffer_;
}
inline void DpStSpeedOptimizerConfig::set_go_up_buffer(double value) {
  set_has_go_up_buffer();
  go_up_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 20 [default = 10000000000];
inline bool DpStSpeedOptimizerConfig::has_default_obstacle_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_default_obstacle_cost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_default_obstacle_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DpStSpeedOptimizerConfig::clear_default_obstacle_cost() {
  default_obstacle_cost_ = 10000000000;
  clear_has_default_obstacle_cost();
}
inline double DpStSpeedOptimizerConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.default_obstacle_cost)
  return default_obstacle_cost_;
}
inline void DpStSpeedOptimizerConfig::set_default_obstacle_cost(double value) {
  set_has_default_obstacle_cost();
  default_obstacle_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 31 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_default_speed_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_default_speed_cost() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_default_speed_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DpStSpeedOptimizerConfig::clear_default_speed_cost() {
  default_speed_cost_ = 1;
  clear_has_default_speed_cost();
}
inline double DpStSpeedOptimizerConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.default_speed_cost)
  return default_speed_cost_;
}
inline void DpStSpeedOptimizerConfig::set_default_speed_cost(double value) {
  set_has_default_speed_cost();
  default_speed_cost_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 32 [default = 10];
inline bool DpStSpeedOptimizerConfig::has_exceed_speed_penalty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_exceed_speed_penalty() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_exceed_speed_penalty() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DpStSpeedOptimizerConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 10;
  clear_has_exceed_speed_penalty();
}
inline double DpStSpeedOptimizerConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.exceed_speed_penalty)
  return exceed_speed_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_exceed_speed_penalty(double value) {
  set_has_exceed_speed_penalty();
  exceed_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 33 [default = 2.5];
inline bool DpStSpeedOptimizerConfig::has_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_low_speed_penalty() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_low_speed_penalty() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DpStSpeedOptimizerConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 2.5;
  clear_has_low_speed_penalty();
}
inline double DpStSpeedOptimizerConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.low_speed_penalty)
  return low_speed_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_low_speed_penalty(double value) {
  set_has_low_speed_penalty();
  low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.low_speed_penalty)
}

// optional double reference_speed_penalty = 34 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_reference_speed_penalty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_reference_speed_penalty() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_reference_speed_penalty() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DpStSpeedOptimizerConfig::clear_reference_speed_penalty() {
  reference_speed_penalty_ = 1;
  clear_has_reference_speed_penalty();
}
inline double DpStSpeedOptimizerConfig::reference_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.reference_speed_penalty)
  return reference_speed_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_reference_speed_penalty(double value) {
  set_has_reference_speed_penalty();
  reference_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.reference_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 35 [default = 10];
inline bool DpStSpeedOptimizerConfig::has_keep_clear_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DpStSpeedOptimizerConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 10;
  clear_has_keep_clear_low_speed_penalty();
}
inline double DpStSpeedOptimizerConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.keep_clear_low_speed_penalty)
  return keep_clear_low_speed_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_keep_clear_low_speed_penalty(double value) {
  set_has_keep_clear_low_speed_penalty();
  keep_clear_low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 40 [default = 2];
inline bool DpStSpeedOptimizerConfig::has_accel_penalty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_accel_penalty() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_accel_penalty() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DpStSpeedOptimizerConfig::clear_accel_penalty() {
  accel_penalty_ = 2;
  clear_has_accel_penalty();
}
inline double DpStSpeedOptimizerConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.accel_penalty)
  return accel_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_accel_penalty(double value) {
  set_has_accel_penalty();
  accel_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.accel_penalty)
}

// optional double decel_penalty = 41 [default = 2];
inline bool DpStSpeedOptimizerConfig::has_decel_penalty() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_decel_penalty() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_decel_penalty() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DpStSpeedOptimizerConfig::clear_decel_penalty() {
  decel_penalty_ = 2;
  clear_has_decel_penalty();
}
inline double DpStSpeedOptimizerConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.decel_penalty)
  return decel_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_decel_penalty(double value) {
  set_has_decel_penalty();
  decel_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 50 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_positive_jerk_coeff() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_positive_jerk_coeff() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_positive_jerk_coeff() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DpStSpeedOptimizerConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 1;
  clear_has_positive_jerk_coeff();
}
inline double DpStSpeedOptimizerConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.positive_jerk_coeff)
  return positive_jerk_coeff_;
}
inline void DpStSpeedOptimizerConfig::set_positive_jerk_coeff(double value) {
  set_has_positive_jerk_coeff();
  positive_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 51 [default = 300];
inline bool DpStSpeedOptimizerConfig::has_negative_jerk_coeff() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_negative_jerk_coeff() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_negative_jerk_coeff() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DpStSpeedOptimizerConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 300;
  clear_has_negative_jerk_coeff();
}
inline double DpStSpeedOptimizerConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.negative_jerk_coeff)
  return negative_jerk_coeff_;
}
inline void DpStSpeedOptimizerConfig::set_negative_jerk_coeff(double value) {
  set_has_negative_jerk_coeff();
  negative_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 60 [default = 4.5];
inline bool DpStSpeedOptimizerConfig::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DpStSpeedOptimizerConfig::clear_max_acceleration() {
  max_acceleration_ = 4.5;
  clear_has_max_acceleration();
}
inline double DpStSpeedOptimizerConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.max_acceleration)
  return max_acceleration_;
}
inline void DpStSpeedOptimizerConfig::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.max_acceleration)
}

// optional double max_deceleration = 61 [default = -4.5];
inline bool DpStSpeedOptimizerConfig::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DpStSpeedOptimizerConfig::clear_max_deceleration() {
  max_deceleration_ = -4.5;
  clear_has_max_deceleration();
}
inline double DpStSpeedOptimizerConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.max_deceleration)
  return max_deceleration_;
}
inline void DpStSpeedOptimizerConfig::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.max_deceleration)
}

// optional double safe_time_buffer = 70 [default = 3];
inline bool DpStSpeedOptimizerConfig::has_safe_time_buffer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_safe_time_buffer() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_safe_time_buffer() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DpStSpeedOptimizerConfig::clear_safe_time_buffer() {
  safe_time_buffer_ = 3;
  clear_has_safe_time_buffer();
}
inline double DpStSpeedOptimizerConfig::safe_time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.safe_time_buffer)
  return safe_time_buffer_;
}
inline void DpStSpeedOptimizerConfig::set_safe_time_buffer(double value) {
  set_has_safe_time_buffer();
  safe_time_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.safe_time_buffer)
}

// optional double safe_distance = 71 [default = 20];
inline bool DpStSpeedOptimizerConfig::has_safe_distance() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_safe_distance() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_safe_distance() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DpStSpeedOptimizerConfig::clear_safe_distance() {
  safe_distance_ = 20;
  clear_has_safe_distance();
}
inline double DpStSpeedOptimizerConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.safe_distance)
  return safe_distance_;
}
inline void DpStSpeedOptimizerConfig::set_safe_distance(double value) {
  set_has_safe_distance();
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.safe_distance)
}

// optional double spatial_potential_penalty = 80 [default = 1];
inline bool DpStSpeedOptimizerConfig::has_spatial_potential_penalty() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_spatial_potential_penalty() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DpStSpeedOptimizerConfig::clear_has_spatial_potential_penalty() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DpStSpeedOptimizerConfig::clear_spatial_potential_penalty() {
  spatial_potential_penalty_ = 1;
  clear_has_spatial_potential_penalty();
}
inline double DpStSpeedOptimizerConfig::spatial_potential_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.spatial_potential_penalty)
  return spatial_potential_penalty_;
}
inline void DpStSpeedOptimizerConfig::set_spatial_potential_penalty(double value) {
  set_has_spatial_potential_penalty();
  spatial_potential_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.spatial_potential_penalty)
}

// optional bool is_lane_changing = 81 [default = false];
inline bool DpStSpeedOptimizerConfig::has_is_lane_changing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DpStSpeedOptimizerConfig::set_has_is_lane_changing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DpStSpeedOptimizerConfig::clear_has_is_lane_changing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DpStSpeedOptimizerConfig::clear_is_lane_changing() {
  is_lane_changing_ = false;
  clear_has_is_lane_changing();
}
inline bool DpStSpeedOptimizerConfig::is_lane_changing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.is_lane_changing)
  return is_lane_changing_;
}
inline void DpStSpeedOptimizerConfig::set_is_lane_changing(bool value) {
  set_has_is_lane_changing();
  is_lane_changing_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.is_lane_changing)
}

// -------------------------------------------------------------------

// STBoundsDeciderConfig

// optional double total_time = 1 [default = 7];
inline bool STBoundsDeciderConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STBoundsDeciderConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STBoundsDeciderConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STBoundsDeciderConfig::clear_total_time() {
  total_time_ = 7;
  clear_has_total_time();
}
inline double STBoundsDeciderConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.STBoundsDeciderConfig.total_time)
  return total_time_;
}
inline void STBoundsDeciderConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.STBoundsDeciderConfig.total_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType>() {
  return ::apollo::planning::LearningModelInferenceTaskConfig_ModelType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_task_5fconfig_2eproto

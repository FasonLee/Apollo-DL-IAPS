// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner_open_space_config.proto

#include "planner_open_space_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FemPosDeviationSmootherConfig;
}  // namespace protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto
namespace protobuf_planner_5fopen_5fspace_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IpoptConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OSQPConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ROIConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryPartitionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DistanceApproachConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WarmStartConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DualVariableWarmStartConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_IterativeAnchoringConfig;
}  // namespace protobuf_planner_5fopen_5fspace_5fconfig_2eproto
namespace protobuf_task_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig;
}  // namespace protobuf_task_5fconfig_2eproto
namespace apollo {
namespace planning {
class PlannerOpenSpaceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlannerOpenSpaceConfig>
      _instance;
} _PlannerOpenSpaceConfig_default_instance_;
class ROIConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ROIConfig>
      _instance;
} _ROIConfig_default_instance_;
class WarmStartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WarmStartConfig>
      _instance;
} _WarmStartConfig_default_instance_;
class DualVariableWarmStartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DualVariableWarmStartConfig>
      _instance;
} _DualVariableWarmStartConfig_default_instance_;
class DistanceApproachConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistanceApproachConfig>
      _instance;
} _DistanceApproachConfig_default_instance_;
class IpoptConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpoptConfig>
      _instance;
} _IpoptConfig_default_instance_;
class OSQPConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OSQPConfig>
      _instance;
} _OSQPConfig_default_instance_;
class IterativeAnchoringConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IterativeAnchoringConfig>
      _instance;
} _IterativeAnchoringConfig_default_instance_;
class TrajectoryPartitionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPartitionConfig>
      _instance;
} _TrajectoryPartitionConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_planner_5fopen_5fspace_5fconfig_2eproto {
static void InitDefaultsPlannerOpenSpaceConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlannerOpenSpaceConfig_default_instance_;
    new (ptr) ::apollo::planning::PlannerOpenSpaceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlannerOpenSpaceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_PlannerOpenSpaceConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsPlannerOpenSpaceConfig}, {
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_ROIConfig.base,
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_WarmStartConfig.base,
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_DualVariableWarmStartConfig.base,
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_DistanceApproachConfig.base,
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IterativeAnchoringConfig.base,
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_TrajectoryPartitionConfig.base,}};

static void InitDefaultsROIConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ROIConfig_default_instance_;
    new (ptr) ::apollo::planning::ROIConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ROIConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ROIConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsROIConfig}, {}};

static void InitDefaultsWarmStartConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_WarmStartConfig_default_instance_;
    new (ptr) ::apollo::planning::WarmStartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::WarmStartConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WarmStartConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWarmStartConfig}, {
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkSpeedOptimizerConfig.base,}};

static void InitDefaultsDualVariableWarmStartConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DualVariableWarmStartConfig_default_instance_;
    new (ptr) ::apollo::planning::DualVariableWarmStartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DualVariableWarmStartConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DualVariableWarmStartConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDualVariableWarmStartConfig}, {
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IpoptConfig.base,
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_OSQPConfig.base,}};

static void InitDefaultsDistanceApproachConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DistanceApproachConfig_default_instance_;
    new (ptr) ::apollo::planning::DistanceApproachConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DistanceApproachConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DistanceApproachConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDistanceApproachConfig}, {
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IpoptConfig.base,}};

static void InitDefaultsIpoptConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_IpoptConfig_default_instance_;
    new (ptr) ::apollo::planning::IpoptConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::IpoptConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IpoptConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIpoptConfig}, {}};

static void InitDefaultsOSQPConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OSQPConfig_default_instance_;
    new (ptr) ::apollo::planning::OSQPConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OSQPConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OSQPConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOSQPConfig}, {}};

static void InitDefaultsIterativeAnchoringConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_IterativeAnchoringConfig_default_instance_;
    new (ptr) ::apollo::planning::IterativeAnchoringConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::IterativeAnchoringConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_IterativeAnchoringConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsIterativeAnchoringConfig}, {
      &protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::scc_info_FemPosDeviationSmootherConfig.base,
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkSpeedOptimizerConfig.base,}};

static void InitDefaultsTrajectoryPartitionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrajectoryPartitionConfig_default_instance_;
    new (ptr) ::apollo::planning::TrajectoryPartitionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrajectoryPartitionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryPartitionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryPartitionConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlannerOpenSpaceConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ROIConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WarmStartConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DualVariableWarmStartConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistanceApproachConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IpoptConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OSQPConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IterativeAnchoringConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryPartitionConfig.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, roi_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, warm_start_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, dual_variable_warm_start_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, distance_approach_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, iterative_anchoring_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, trajectory_partition_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, is_near_destination_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, enable_check_parallel_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, enable_linear_interpolation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, is_near_destination_theta_threshold_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  6,
  7,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ROIConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ROIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ROIConfig, roi_longitudinal_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ROIConfig, roi_longitudinal_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ROIConfig, parking_start_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ROIConfig, parking_inwards_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, xy_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, phi_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, next_node_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_forward_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_back_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_gear_switch_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_steer_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_steer_change_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, grid_a_star_xy_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, node_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, s_curve_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_kappa_contraint_ratio_),
  3,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  11,
  12,
  0,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, weight_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, qp_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, debug_osqp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, osqp_config_),
  5,
  0,
  3,
  2,
  4,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_steer_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_a_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_steer_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_a_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_first_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_second_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_speed_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_speed_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_acceleration_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_acceleration_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, min_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, use_fix_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_constraint_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_hand_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_derivative_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_initial_final_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, distance_approach_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_jacobian_ad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_check_initial_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_end_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_slack_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  24,
  25,
  26,
  27,
  28,
  29,
  14,
  0,
  15,
  16,
  17,
  21,
  18,
  22,
  23,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_print_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, mumps_mem_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, mumps_pivtol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_acceptable_constr_viol_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_min_hessian_perturbation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_jacobian_regularization_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_print_timing_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_alpha_for_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_recalc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, eps_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, eps_rel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, polish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OSQPConfig, osqp_debug_log_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, interpolated_delta_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, reanchoring_trails_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, reanchoring_pos_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, reanchoring_length_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, estimate_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, default_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, vehicle_shortest_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, fem_pos_deviation_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, collision_decrease_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, max_forward_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, max_reverse_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, max_forward_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, max_reverse_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, max_acc_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, s_curve_config_),
  4,
  3,
  5,
  6,
  2,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, interpolated_pieces_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, initial_gear_check_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, heading_searching_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, gear_shift_period_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, gear_shift_max_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, gear_shift_unit_t_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::planning::PlannerOpenSpaceConfig)},
  { 27, 36, sizeof(::apollo::planning::ROIConfig)},
  { 40, 58, sizeof(::apollo::planning::WarmStartConfig)},
  { 71, 83, sizeof(::apollo::planning::DualVariableWarmStartConfig)},
  { 90, 125, sizeof(::apollo::planning::DistanceApproachConfig)},
  { 155, 172, sizeof(::apollo::planning::IpoptConfig)},
  { 184, 195, sizeof(::apollo::planning::OSQPConfig)},
  { 201, 222, sizeof(::apollo::planning::IterativeAnchoringConfig)},
  { 238, 249, sizeof(::apollo::planning::TrajectoryPartitionConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlannerOpenSpaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ROIConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_WarmStartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DualVariableWarmStartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DistanceApproachConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_IpoptConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OSQPConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_IterativeAnchoringConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrajectoryPartitionConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planner_open_space_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037planner_open_space_config.proto\022\017apoll"
      "o.planning\032\'fem_pos_deviation_smoother_c"
      "onfig.proto\032\021task_config.proto\"\242\005\n\026Plann"
      "erOpenSpaceConfig\022.\n\nroi_config\030\001 \001(\0132\032."
      "apollo.planning.ROIConfig\022;\n\021warm_start_"
      "config\030\002 \001(\0132 .apollo.planning.WarmStart"
      "Config\022U\n\037dual_variable_warm_start_confi"
      "g\030\003 \001(\0132,.apollo.planning.DualVariableWa"
      "rmStartConfig\022I\n\030distance_approach_confi"
      "g\030\004 \001(\0132\'.apollo.planning.DistanceApproa"
      "chConfig\022V\n#iterative_anchoring_smoother"
      "_config\030\005 \001(\0132).apollo.planning.Iterativ"
      "eAnchoringConfig\022O\n\033trajectory_partition"
      "_config\030\006 \001(\0132*.apollo.planning.Trajecto"
      "ryPartitionConfig\022\022\n\007delta_t\030\007 \001(\002:\0011\022,\n"
      "\035is_near_destination_threshold\030\010 \001(\001:\0050."
      "001\022/\n enable_check_parallel_trajectory\030"
      "\t \001(\010:\005false\022*\n\033enable_linear_interpolat"
      "ion\030\n \001(\010:\005false\0221\n#is_near_destination_"
      "theta_threshold\030\013 \001(\001:\0040.05\"\235\001\n\tROIConfi"
      "g\022(\n\034roi_longitudinal_range_start\030\001 \001(\001:"
      "\00210\022&\n\032roi_longitudinal_range_end\030\002 \001(\001:"
      "\00210\022\036\n\023parking_start_range\030\003 \001(\001:\0017\022\036\n\017p"
      "arking_inwards\030\004 \001(\010:\005false\"\354\003\n\017WarmStar"
      "tConfig\022\037\n\022xy_grid_resolution\030\001 \001(\001:\0030.2"
      "\022!\n\023phi_grid_resolution\030\002 \001(\001:\0040.05\022\031\n\rn"
      "ext_node_num\030\003 \001(\004:\00210\022\026\n\tstep_size\030\004 \001("
      "\001:\0030.5\022\037\n\024traj_forward_penalty\030\005 \001(\001:\0010\022"
      "\034\n\021traj_back_penalty\030\006 \001(\001:\0010\022$\n\030traj_ge"
      "ar_switch_penalty\030\007 \001(\001:\00210\022\037\n\022traj_stee"
      "r_penalty\030\010 \001(\001:\003100\022%\n\031traj_steer_chang"
      "e_penalty\030\t \001(\001:\00210\022&\n\031grid_a_star_xy_re"
      "solution\030\017 \001(\001:\0030.1\022\030\n\013node_radius\030\020 \001(\001"
      ":\0030.5\022J\n\016s_curve_config\030\021 \001(\01322.apollo.p"
      "lanning.PiecewiseJerkSpeedOptimizerConfi"
      "g\022\'\n\032traj_kappa_contraint_ratio\030\n \001(\001:\0030"
      ".7\"\230\002\n\033DualVariableWarmStartConfig\022\023\n\010we"
      "ight_d\030\001 \001(\001:\0011\0222\n\014ipopt_config\030\002 \001(\0132\034."
      "apollo.planning.IpoptConfig\0222\n\tqp_format"
      "\030\003 \001(\0162\037.apollo.planning.DualWarmUpMode\022"
      "\036\n\023min_safety_distance\030\004 \001(\001:\0010\022\031\n\ndebug"
      "_osqp\030\005 \001(\010:\005false\022\017\n\004beta\030\006 \001(\001:\0011\0220\n\013o"
      "sqp_config\030\007 \001(\0132\033.apollo.planning.OSQPC"
      "onfig\"\325\007\n\026DistanceApproachConfig\022\024\n\014weig"
      "ht_steer\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001\022\031\n\021weig"
      "ht_steer_rate\030\003 \001(\001\022\025\n\rweight_a_rate\030\004 \001"
      "(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n\010weight_y\030\006 \001(\001\022\022"
      "\n\nweight_phi\030\007 \001(\001\022\020\n\010weight_v\030\010 \001(\001\022\036\n\026"
      "weight_steer_stitching\030\t \001(\001\022\032\n\022weight_a"
      "_stitching\030\n \001(\001\022\037\n\027weight_first_order_t"
      "ime\030\013 \001(\001\022 \n\030weight_second_order_time\030\014 "
      "\001(\001\022\036\n\023min_safety_distance\030\r \001(\001:\0010\022\034\n\021m"
      "ax_speed_forward\030\016 \001(\001:\0013\022\034\n\021max_speed_r"
      "everse\030\017 \001(\001:\0012\022#\n\030max_acceleration_forw"
      "ard\030\020 \001(\001:\0012\022#\n\030max_acceleration_reverse"
      "\030\021 \001(\001:\0012\022$\n\027min_time_sample_scaling\030\022 \001"
      "(\001:\0030.1\022#\n\027max_time_sample_scaling\030\023 \001(\001"
      ":\00210\022\033\n\014use_fix_time\030\024 \001(\010:\005false\0222\n\014ipo"
      "pt_config\030\025 \001(\0132\034.apollo.planning.IpoptC"
      "onfig\022\037\n\027enable_constraint_check\030\026 \001(\010\022\036"
      "\n\026enable_hand_derivative\030\027 \001(\010\022\037\n\027enable"
      "_derivative_check\030\030 \001(\010\022)\n\032enable_initia"
      "l_final_check\030\031 \001(\010:\005false\022E\n\026distance_a"
      "pproach_mode\030\032 \001(\0162%.apollo.planning.Dis"
      "tanceApproachMode\022!\n\022enable_jacobian_ad\030"
      "\033 \001(\010:\005false\022)\n\032enable_check_initial_sta"
      "te\030\034 \001(\010:\005false\022\033\n\020weight_end_state\030\035 \001("
      "\001:\0010\022\027\n\014weight_slack\030\036 \001(\001:\0010\"\371\002\n\013IpoptC"
      "onfig\022\031\n\021ipopt_print_level\030\001 \001(\005\022\031\n\021mump"
      "s_mem_percent\030\002 \001(\005\022\024\n\014mumps_pivtol\030\003 \001("
      "\001\022\026\n\016ipopt_max_iter\030\004 \001(\005\022\021\n\tipopt_tol\030\005"
      " \001(\001\022(\n ipopt_acceptable_constr_viol_tol"
      "\030\006 \001(\001\022&\n\036ipopt_min_hessian_perturbation"
      "\030\007 \001(\001\022+\n#ipopt_jacobian_regularization_"
      "value\030\010 \001(\001\022%\n\035ipopt_print_timing_statis"
      "tics\030\t \001(\t\022\031\n\021ipopt_alpha_for_y\030\n \001(\t\022\026\n"
      "\016ipopt_recalc_y\030\013 \001(\t\022\032\n\ripopt_mu_init\030\014"
      " \001(\001:\0030.1\"\234\001\n\nOSQPConfig\022\020\n\005alpha\030\001 \001(\001:"
      "\0011\022\026\n\007eps_abs\030\002 \001(\001:\0050.001\022\026\n\007eps_rel\030\003 "
      "\001(\001:\0050.001\022\027\n\010max_iter\030\004 \001(\005:\00510000\022\024\n\006p"
      "olish\030\005 \001(\010:\004true\022\035\n\016osqp_debug_log\030\006 \001("
      "\010:\005false\"\371\004\n\030IterativeAnchoringConfig\022!\n"
      "\024interpolated_delta_s\030\001 \001(\001:\0030.1\022\"\n\026rean"
      "choring_trails_num\030\002 \001(\005:\00250\022$\n\026reanchor"
      "ing_pos_stddev\030\003 \001(\001:\0040.25\022$\n\031reanchorin"
      "g_length_stddev\030\004 \001(\001:\0011\022\035\n\016estimate_bou"
      "nd\030\005 \001(\010:\005false\022\030\n\rdefault_bound\030\006 \001(\001:\001"
      "2\022(\n\032vehicle_shortest_dimension\030\007 \001(\001:\0041"
      ".04\022Y\n!fem_pos_deviation_smoother_config"
      "\030\010 \001(\0132..apollo.planning.FemPosDeviation"
      "SmootherConfig\022%\n\030collision_decrease_rat"
      "io\030\t \001(\001:\0030.9\022\030\n\rmax_forward_v\030\n \001(\001:\0012\022"
      "\030\n\rmax_reverse_v\030\013 \001(\001:\0012\022\032\n\017max_forward"
      "_acc\030\014 \001(\001:\0013\022\032\n\017max_reverse_acc\030\r \001(\001:\001"
      "2\022\027\n\014max_acc_jerk\030\016 \001(\001:\0014\022\024\n\007delta_t\030\017 "
      "\001(\001:\0030.2\022J\n\016s_curve_config\030\020 \001(\01322.apoll"
      "o.planning.PiecewiseJerkSpeedOptimizerCo"
      "nfig\"\362\001\n\031TrajectoryPartitionConfig\022#\n\027in"
      "terpolated_pieces_num\030\001 \001(\004:\00250\022%\n\032initi"
      "al_gear_check_horizon\030\002 \001(\004:\0013\022$\n\027headin"
      "g_searching_range\030\003 \001(\001:\0030.3\022%\n\032gear_shi"
      "ft_period_duration\030\004 \001(\001:\0012\022\033\n\020gear_shif"
      "t_max_t\030\005 \001(\001:\0013\022\037\n\021gear_shift_unit_t\030\006 "
      "\001(\001:\0040.02*J\n\016DualWarmUpMode\022\t\n\005IPOPT\020\000\022\013"
      "\n\007IPOPTQP\020\001\022\010\n\004OSQP\020\002\022\t\n\005DEBUG\020\003\022\013\n\007SLAC"
      "KQP\020\004*\367\001\n\024DistanceApproachMode\022\033\n\027DISTAN"
      "CE_APPROACH_IPOPT\020\000\022 \n\034DISTANCE_APPROACH"
      "_IPOPT_CUDA\020\001\022$\n DISTANCE_APPROACH_IPOPT"
      "_FIXED_TS\020\002\022&\n\"DISTANCE_APPROACH_IPOPT_F"
      "IXED_DUAL\020\003\022%\n!DISTANCE_APPROACH_IPOPT_R"
      "ELAX_END\020\004\022+\n\'DISTANCE_APPROACH_IPOPT_RE"
      "LAX_END_SLACK\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planner_open_space_config.proto", &protobuf_RegisterTypes);
  ::protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::AddDescriptors();
  ::protobuf_task_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planner_5fopen_5fspace_5fconfig_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* DualWarmUpMode_descriptor() {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool DualWarmUpMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DistanceApproachMode_descriptor() {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool DistanceApproachMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlannerOpenSpaceConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->roi_config_ = const_cast< ::apollo::planning::ROIConfig*>(
      ::apollo::planning::ROIConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->warm_start_config_ = const_cast< ::apollo::planning::WarmStartConfig*>(
      ::apollo::planning::WarmStartConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->dual_variable_warm_start_config_ = const_cast< ::apollo::planning::DualVariableWarmStartConfig*>(
      ::apollo::planning::DualVariableWarmStartConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->distance_approach_config_ = const_cast< ::apollo::planning::DistanceApproachConfig*>(
      ::apollo::planning::DistanceApproachConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->iterative_anchoring_smoother_config_ = const_cast< ::apollo::planning::IterativeAnchoringConfig*>(
      ::apollo::planning::IterativeAnchoringConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->trajectory_partition_config_ = const_cast< ::apollo::planning::TrajectoryPartitionConfig*>(
      ::apollo::planning::TrajectoryPartitionConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerOpenSpaceConfig::kRoiConfigFieldNumber;
const int PlannerOpenSpaceConfig::kWarmStartConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDualVariableWarmStartConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDistanceApproachConfigFieldNumber;
const int PlannerOpenSpaceConfig::kIterativeAnchoringSmootherConfigFieldNumber;
const int PlannerOpenSpaceConfig::kTrajectoryPartitionConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDeltaTFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThresholdFieldNumber;
const int PlannerOpenSpaceConfig::kEnableCheckParallelTrajectoryFieldNumber;
const int PlannerOpenSpaceConfig::kEnableLinearInterpolationFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThetaThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerOpenSpaceConfig::PlannerOpenSpaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_PlannerOpenSpaceConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roi_config()) {
    roi_config_ = new ::apollo::planning::ROIConfig(*from.roi_config_);
  } else {
    roi_config_ = NULL;
  }
  if (from.has_warm_start_config()) {
    warm_start_config_ = new ::apollo::planning::WarmStartConfig(*from.warm_start_config_);
  } else {
    warm_start_config_ = NULL;
  }
  if (from.has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableWarmStartConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = NULL;
  }
  if (from.has_distance_approach_config()) {
    distance_approach_config_ = new ::apollo::planning::DistanceApproachConfig(*from.distance_approach_config_);
  } else {
    distance_approach_config_ = NULL;
  }
  if (from.has_iterative_anchoring_smoother_config()) {
    iterative_anchoring_smoother_config_ = new ::apollo::planning::IterativeAnchoringConfig(*from.iterative_anchoring_smoother_config_);
  } else {
    iterative_anchoring_smoother_config_ = NULL;
  }
  if (from.has_trajectory_partition_config()) {
    trajectory_partition_config_ = new ::apollo::planning::TrajectoryPartitionConfig(*from.trajectory_partition_config_);
  } else {
    trajectory_partition_config_ = NULL;
  }
  ::memcpy(&enable_check_parallel_trajectory_, &from.enable_check_parallel_trajectory_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(is_near_destination_theta_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerOpenSpaceConfig)
}

void PlannerOpenSpaceConfig::SharedCtor() {
  ::memset(&roi_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&roi_config_)) + sizeof(enable_linear_interpolation_));
  delta_t_ = 1;
  is_near_destination_threshold_ = 0.001;
  is_near_destination_theta_threshold_ = 0.05;
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerOpenSpaceConfig)
  SharedDtor();
}

void PlannerOpenSpaceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete roi_config_;
  if (this != internal_default_instance()) delete warm_start_config_;
  if (this != internal_default_instance()) delete dual_variable_warm_start_config_;
  if (this != internal_default_instance()) delete distance_approach_config_;
  if (this != internal_default_instance()) delete iterative_anchoring_smoother_config_;
  if (this != internal_default_instance()) delete trajectory_partition_config_;
}

void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlannerOpenSpaceConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlannerOpenSpaceConfig& PlannerOpenSpaceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_PlannerOpenSpaceConfig.base);
  return *internal_default_instance();
}


void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(roi_config_ != NULL);
      roi_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(warm_start_config_ != NULL);
      warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != NULL);
      dual_variable_warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(distance_approach_config_ != NULL);
      distance_approach_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(iterative_anchoring_smoother_config_ != NULL);
      iterative_anchoring_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(trajectory_partition_config_ != NULL);
      trajectory_partition_config_->Clear();
    }
  }
  ::memset(&enable_check_parallel_trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(enable_linear_interpolation_));
  if (cached_has_bits & 1792u) {
    delta_t_ = 1;
    is_near_destination_threshold_ = 0.001;
    is_near_destination_theta_threshold_ = 0.05;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlannerOpenSpaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlannerOpenSpaceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ROIConfig roi_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roi_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dual_variable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance_approach_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iterative_anchoring_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_partition_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_t = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_threshold = 8 [default = 0.001];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_is_near_destination_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_enable_check_parallel_trajectory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_check_parallel_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_enable_linear_interpolation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_linear_interpolation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_is_near_destination_theta_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_theta_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlannerOpenSpaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlannerOpenSpaceConfig)
  return false;
#undef DO_
}

void PlannerOpenSpaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ROIConfig roi_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_roi_config(), output);
  }

  // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_warm_start_config(), output);
  }

  // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_dual_variable_warm_start_config(), output);
  }

  // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_distance_approach_config(), output);
  }

  // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_iterative_anchoring_smoother_config(), output);
  }

  // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_trajectory_partition_config(), output);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->delta_t(), output);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->is_near_destination_threshold(), output);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_check_parallel_trajectory(), output);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_linear_interpolation(), output);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->is_near_destination_theta_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlannerOpenSpaceConfig)
}

::google::protobuf::uint8* PlannerOpenSpaceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ROIConfig roi_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_roi_config(), deterministic, target);
  }

  // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_warm_start_config(), deterministic, target);
  }

  // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_dual_variable_warm_start_config(), deterministic, target);
  }

  // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_distance_approach_config(), deterministic, target);
  }

  // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_iterative_anchoring_smoother_config(), deterministic, target);
  }

  // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_trajectory_partition_config(), deterministic, target);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->delta_t(), target);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->is_near_destination_threshold(), target);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_check_parallel_trajectory(), target);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_linear_interpolation(), target);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->is_near_destination_theta_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.ROIConfig roi_config = 1;
    if (has_roi_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roi_config_);
    }

    // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
    if (has_warm_start_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *warm_start_config_);
    }

    // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
    if (has_dual_variable_warm_start_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dual_variable_warm_start_config_);
    }

    // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
    if (has_distance_approach_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *distance_approach_config_);
    }

    // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
    if (has_iterative_anchoring_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iterative_anchoring_smoother_config_);
    }

    // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
    if (has_trajectory_partition_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trajectory_partition_config_);
    }

    // optional bool enable_check_parallel_trajectory = 9 [default = false];
    if (has_enable_check_parallel_trajectory()) {
      total_size += 1 + 1;
    }

    // optional bool enable_linear_interpolation = 10 [default = false];
    if (has_enable_linear_interpolation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float delta_t = 7 [default = 1];
    if (has_delta_t()) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 8 [default = 0.001];
    if (has_is_near_destination_threshold()) {
      total_size += 1 + 8;
    }

    // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
    if (has_is_near_destination_theta_threshold()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerOpenSpaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerOpenSpaceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerOpenSpaceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerOpenSpaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerOpenSpaceConfig)
    MergeFrom(*source);
  }
}

void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_roi_config()->::apollo::planning::ROIConfig::MergeFrom(from.roi_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_warm_start_config()->::apollo::planning::WarmStartConfig::MergeFrom(from.warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dual_variable_warm_start_config()->::apollo::planning::DualVariableWarmStartConfig::MergeFrom(from.dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_distance_approach_config()->::apollo::planning::DistanceApproachConfig::MergeFrom(from.distance_approach_config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_iterative_anchoring_smoother_config()->::apollo::planning::IterativeAnchoringConfig::MergeFrom(from.iterative_anchoring_smoother_config());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_trajectory_partition_config()->::apollo::planning::TrajectoryPartitionConfig::MergeFrom(from.trajectory_partition_config());
    }
    if (cached_has_bits & 0x00000040u) {
      enable_check_parallel_trajectory_ = from.enable_check_parallel_trajectory_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_linear_interpolation_ = from.enable_linear_interpolation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_near_destination_theta_threshold_ = from.is_near_destination_theta_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlannerOpenSpaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::Swap(PlannerOpenSpaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  using std::swap;
  swap(roi_config_, other->roi_config_);
  swap(warm_start_config_, other->warm_start_config_);
  swap(dual_variable_warm_start_config_, other->dual_variable_warm_start_config_);
  swap(distance_approach_config_, other->distance_approach_config_);
  swap(iterative_anchoring_smoother_config_, other->iterative_anchoring_smoother_config_);
  swap(trajectory_partition_config_, other->trajectory_partition_config_);
  swap(enable_check_parallel_trajectory_, other->enable_check_parallel_trajectory_);
  swap(enable_linear_interpolation_, other->enable_linear_interpolation_);
  swap(delta_t_, other->delta_t_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
  swap(is_near_destination_theta_threshold_, other->is_near_destination_theta_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ROIConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIConfig::kRoiLongitudinalRangeStartFieldNumber;
const int ROIConfig::kRoiLongitudinalRangeEndFieldNumber;
const int ROIConfig::kParkingStartRangeFieldNumber;
const int ROIConfig::kParkingInwardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIConfig::ROIConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_ROIConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ROIConfig)
}
ROIConfig::ROIConfig(const ROIConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_inwards_, &from.parking_inwards_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_start_range_) -
    reinterpret_cast<char*>(&parking_inwards_)) + sizeof(parking_start_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ROIConfig)
}

void ROIConfig::SharedCtor() {
  parking_inwards_ = false;
  roi_longitudinal_range_start_ = 10;
  roi_longitudinal_range_end_ = 10;
  parking_start_range_ = 7;
}

ROIConfig::~ROIConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ROIConfig)
  SharedDtor();
}

void ROIConfig::SharedDtor() {
}

void ROIConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ROIConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROIConfig& ROIConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_ROIConfig.base);
  return *internal_default_instance();
}


void ROIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ROIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    parking_inwards_ = false;
    roi_longitudinal_range_start_ = 10;
    roi_longitudinal_range_end_ = 10;
    parking_start_range_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ROIConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double roi_longitudinal_range_start = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_roi_longitudinal_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_longitudinal_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_longitudinal_range_end = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_roi_longitudinal_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_longitudinal_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double parking_start_range = 3 [default = 7];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_parking_start_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parking_start_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_inwards = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_parking_inwards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_inwards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ROIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ROIConfig)
  return false;
#undef DO_
}

void ROIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ROIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double roi_longitudinal_range_start = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roi_longitudinal_range_start(), output);
  }

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->roi_longitudinal_range_end(), output);
  }

  // optional double parking_start_range = 3 [default = 7];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->parking_start_range(), output);
  }

  // optional bool parking_inwards = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->parking_inwards(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ROIConfig)
}

::google::protobuf::uint8* ROIConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ROIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double roi_longitudinal_range_start = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roi_longitudinal_range_start(), target);
  }

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->roi_longitudinal_range_end(), target);
  }

  // optional double parking_start_range = 3 [default = 7];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->parking_start_range(), target);
  }

  // optional bool parking_inwards = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->parking_inwards(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ROIConfig)
  return target;
}

size_t ROIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ROIConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool parking_inwards = 4 [default = false];
    if (has_parking_inwards()) {
      total_size += 1 + 1;
    }

    // optional double roi_longitudinal_range_start = 1 [default = 10];
    if (has_roi_longitudinal_range_start()) {
      total_size += 1 + 8;
    }

    // optional double roi_longitudinal_range_end = 2 [default = 10];
    if (has_roi_longitudinal_range_end()) {
      total_size += 1 + 8;
    }

    // optional double parking_start_range = 3 [default = 7];
    if (has_parking_start_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROIConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ROIConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ROIConfig)
    MergeFrom(*source);
  }
}

void ROIConfig::MergeFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      parking_inwards_ = from.parking_inwards_;
    }
    if (cached_has_bits & 0x00000002u) {
      roi_longitudinal_range_start_ = from.roi_longitudinal_range_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      roi_longitudinal_range_end_ = from.roi_longitudinal_range_end_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_start_range_ = from.parking_start_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIConfig::CopyFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIConfig::IsInitialized() const {
  return true;
}

void ROIConfig::Swap(ROIConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIConfig::InternalSwap(ROIConfig* other) {
  using std::swap;
  swap(parking_inwards_, other->parking_inwards_);
  swap(roi_longitudinal_range_start_, other->roi_longitudinal_range_start_);
  swap(roi_longitudinal_range_end_, other->roi_longitudinal_range_end_);
  swap(parking_start_range_, other->parking_start_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ROIConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WarmStartConfig::InitAsDefaultInstance() {
  ::apollo::planning::_WarmStartConfig_default_instance_._instance.get_mutable()->s_curve_config_ = const_cast< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::internal_default_instance());
}
void WarmStartConfig::clear_s_curve_config() {
  if (s_curve_config_ != NULL) s_curve_config_->Clear();
  clear_has_s_curve_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WarmStartConfig::kXyGridResolutionFieldNumber;
const int WarmStartConfig::kPhiGridResolutionFieldNumber;
const int WarmStartConfig::kNextNodeNumFieldNumber;
const int WarmStartConfig::kStepSizeFieldNumber;
const int WarmStartConfig::kTrajForwardPenaltyFieldNumber;
const int WarmStartConfig::kTrajBackPenaltyFieldNumber;
const int WarmStartConfig::kTrajGearSwitchPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerChangePenaltyFieldNumber;
const int WarmStartConfig::kGridAStarXyResolutionFieldNumber;
const int WarmStartConfig::kNodeRadiusFieldNumber;
const int WarmStartConfig::kSCurveConfigFieldNumber;
const int WarmStartConfig::kTrajKappaContraintRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WarmStartConfig::WarmStartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_WarmStartConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = NULL;
  }
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.WarmStartConfig)
}

void WarmStartConfig::SharedCtor() {
  ::memset(&s_curve_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traj_back_penalty_) -
      reinterpret_cast<char*>(&s_curve_config_)) + sizeof(traj_back_penalty_));
  xy_grid_resolution_ = 0.2;
  phi_grid_resolution_ = 0.05;
  next_node_num_ = GOOGLE_ULONGLONG(10);
  step_size_ = 0.5;
  traj_gear_switch_penalty_ = 10;
  traj_steer_penalty_ = 100;
  traj_steer_change_penalty_ = 10;
  traj_kappa_contraint_ratio_ = 0.7;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.WarmStartConfig)
  SharedDtor();
}

void WarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) delete s_curve_config_;
}

void WarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WarmStartConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WarmStartConfig& WarmStartConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_WarmStartConfig.base);
  return *internal_default_instance();
}


void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(s_curve_config_ != NULL);
    s_curve_config_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traj_back_penalty_) -
        reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = GOOGLE_ULONGLONG(10);
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
  }
  if (cached_has_bits & 7936u) {
    traj_steer_penalty_ = 100;
    traj_steer_change_penalty_ = 10;
    traj_kappa_contraint_ratio_ = 0.7;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WarmStartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.WarmStartConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_xy_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_phi_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_next_node_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_node_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_forward_penalty = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_traj_forward_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_forward_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_back_penalty = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_traj_back_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_back_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_traj_gear_switch_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_gear_switch_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_penalty = 8 [default = 100];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_traj_steer_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_traj_steer_change_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_kappa_contraint_ratio = 10 [default = 0.7];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_traj_kappa_contraint_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_kappa_contraint_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_grid_a_star_xy_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grid_a_star_xy_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double node_radius = 16 [default = 0.5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_node_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &node_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.WarmStartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.WarmStartConfig)
  return false;
#undef DO_
}

void WarmStartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xy_grid_resolution(), output);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_grid_resolution(), output);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next_node_num(), output);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_size(), output);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->traj_forward_penalty(), output);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->traj_back_penalty(), output);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->traj_gear_switch_penalty(), output);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traj_steer_penalty(), output);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->traj_steer_change_penalty(), output);
  }

  // optional double traj_kappa_contraint_ratio = 10 [default = 0.7];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->traj_kappa_contraint_ratio(), output);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->grid_a_star_xy_resolution(), output);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->node_radius(), output);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_s_curve_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.WarmStartConfig)
}

::google::protobuf::uint8* WarmStartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->traj_steer_change_penalty(), target);
  }

  // optional double traj_kappa_contraint_ratio = 10 [default = 0.7];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->traj_kappa_contraint_ratio(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->node_radius(), target);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_s_curve_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.WarmStartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
    if (has_s_curve_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *s_curve_config_);
    }

    // optional double traj_forward_penalty = 5 [default = 0];
    if (has_traj_forward_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (has_traj_back_penalty()) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (has_xy_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (has_phi_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (has_next_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (has_step_size()) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (has_traj_gear_switch_penalty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double traj_steer_penalty = 8 [default = 100];
    if (has_traj_steer_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (has_traj_steer_change_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_kappa_contraint_ratio = 10 [default = 0.7];
    if (has_traj_kappa_contraint_ratio()) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (has_grid_a_star_xy_resolution()) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (has_node_radius()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarmStartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmStartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WarmStartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.WarmStartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.WarmStartConfig)
    MergeFrom(*source);
  }
}

void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s_curve_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000002u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000400u) {
      traj_kappa_contraint_ratio_ = from.traj_kappa_contraint_ratio_;
    }
    if (cached_has_bits & 0x00000800u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00001000u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WarmStartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::Swap(WarmStartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  using std::swap;
  swap(s_curve_config_, other->s_curve_config_);
  swap(traj_forward_penalty_, other->traj_forward_penalty_);
  swap(traj_back_penalty_, other->traj_back_penalty_);
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(traj_kappa_contraint_ratio_, other->traj_kappa_contraint_ratio_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WarmStartConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DualVariableWarmStartConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DualVariableWarmStartConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptConfig*>(
      ::apollo::planning::IpoptConfig::internal_default_instance());
  ::apollo::planning::_DualVariableWarmStartConfig_default_instance_._instance.get_mutable()->osqp_config_ = const_cast< ::apollo::planning::OSQPConfig*>(
      ::apollo::planning::OSQPConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DualVariableWarmStartConfig::kWeightDFieldNumber;
const int DualVariableWarmStartConfig::kIpoptConfigFieldNumber;
const int DualVariableWarmStartConfig::kQpFormatFieldNumber;
const int DualVariableWarmStartConfig::kMinSafetyDistanceFieldNumber;
const int DualVariableWarmStartConfig::kDebugOsqpFieldNumber;
const int DualVariableWarmStartConfig::kBetaFieldNumber;
const int DualVariableWarmStartConfig::kOsqpConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DualVariableWarmStartConfig::DualVariableWarmStartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_DualVariableWarmStartConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DualVariableWarmStartConfig)
}
DualVariableWarmStartConfig::DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  if (from.has_osqp_config()) {
    osqp_config_ = new ::apollo::planning::OSQPConfig(*from.osqp_config_);
  } else {
    osqp_config_ = NULL;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DualVariableWarmStartConfig)
}

void DualVariableWarmStartConfig::SharedCtor() {
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_osqp_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(debug_osqp_));
  weight_d_ = 1;
  beta_ = 1;
}

DualVariableWarmStartConfig::~DualVariableWarmStartConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DualVariableWarmStartConfig)
  SharedDtor();
}

void DualVariableWarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
  if (this != internal_default_instance()) delete osqp_config_;
}

void DualVariableWarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DualVariableWarmStartConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DualVariableWarmStartConfig& DualVariableWarmStartConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_DualVariableWarmStartConfig.base);
  return *internal_default_instance();
}


void DualVariableWarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DualVariableWarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ipopt_config_ != NULL);
      ipopt_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(osqp_config_ != NULL);
      osqp_config_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&min_safety_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_osqp_) -
        reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(debug_osqp_));
    weight_d_ = 1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DualVariableWarmStartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DualVariableWarmStartConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_d = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_weight_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.IpoptConfig ipopt_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DualWarmUpMode qp_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::DualWarmUpMode_IsValid(value)) {
            set_qp_format(static_cast< ::apollo::planning::DualWarmUpMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_osqp = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_debug_osqp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_osqp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beta = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OSQPConfig osqp_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_osqp_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DualVariableWarmStartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DualVariableWarmStartConfig)
  return false;
#undef DO_
}

void DualVariableWarmStartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DualVariableWarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_d(), output);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ipopt_config(), output);
  }

  // optional .apollo.planning.DualWarmUpMode qp_format = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qp_format(), output);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_safety_distance(), output);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->debug_osqp(), output);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->beta(), output);
  }

  // optional .apollo.planning.OSQPConfig osqp_config = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_osqp_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DualVariableWarmStartConfig)
}

::google::protobuf::uint8* DualVariableWarmStartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DualVariableWarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_d(), target);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ipopt_config(), deterministic, target);
  }

  // optional .apollo.planning.DualWarmUpMode qp_format = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->debug_osqp(), target);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->beta(), target);
  }

  // optional .apollo.planning.OSQPConfig osqp_config = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_osqp_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DualVariableWarmStartConfig)
  return target;
}

size_t DualVariableWarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DualVariableWarmStartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.planning.IpoptConfig ipopt_config = 2;
    if (has_ipopt_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional .apollo.planning.OSQPConfig osqp_config = 7;
    if (has_osqp_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *osqp_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.DualWarmUpMode qp_format = 3;
    if (has_qp_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (has_debug_osqp()) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (has_weight_d()) {
      total_size += 1 + 8;
    }

    // optional double beta = 6 [default = 1];
    if (has_beta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DualVariableWarmStartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DualVariableWarmStartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DualVariableWarmStartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DualVariableWarmStartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DualVariableWarmStartConfig)
    MergeFrom(*source);
  }
}

void DualVariableWarmStartConfig::MergeFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::apollo::planning::IpoptConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_osqp_config()->::apollo::planning::OSQPConfig::MergeFrom(from.osqp_config());
    }
    if (cached_has_bits & 0x00000004u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_d_ = from.weight_d_;
    }
    if (cached_has_bits & 0x00000040u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DualVariableWarmStartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualVariableWarmStartConfig::CopyFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableWarmStartConfig::IsInitialized() const {
  return true;
}

void DualVariableWarmStartConfig::Swap(DualVariableWarmStartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DualVariableWarmStartConfig::InternalSwap(DualVariableWarmStartConfig* other) {
  using std::swap;
  swap(ipopt_config_, other->ipopt_config_);
  swap(osqp_config_, other->osqp_config_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(qp_format_, other->qp_format_);
  swap(debug_osqp_, other->debug_osqp_);
  swap(weight_d_, other->weight_d_);
  swap(beta_, other->beta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DualVariableWarmStartConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DistanceApproachConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DistanceApproachConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptConfig*>(
      ::apollo::planning::IpoptConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceApproachConfig::kWeightSteerFieldNumber;
const int DistanceApproachConfig::kWeightAFieldNumber;
const int DistanceApproachConfig::kWeightSteerRateFieldNumber;
const int DistanceApproachConfig::kWeightARateFieldNumber;
const int DistanceApproachConfig::kWeightXFieldNumber;
const int DistanceApproachConfig::kWeightYFieldNumber;
const int DistanceApproachConfig::kWeightPhiFieldNumber;
const int DistanceApproachConfig::kWeightVFieldNumber;
const int DistanceApproachConfig::kWeightSteerStitchingFieldNumber;
const int DistanceApproachConfig::kWeightAStitchingFieldNumber;
const int DistanceApproachConfig::kWeightFirstOrderTimeFieldNumber;
const int DistanceApproachConfig::kWeightSecondOrderTimeFieldNumber;
const int DistanceApproachConfig::kMinSafetyDistanceFieldNumber;
const int DistanceApproachConfig::kMaxSpeedForwardFieldNumber;
const int DistanceApproachConfig::kMaxSpeedReverseFieldNumber;
const int DistanceApproachConfig::kMaxAccelerationForwardFieldNumber;
const int DistanceApproachConfig::kMaxAccelerationReverseFieldNumber;
const int DistanceApproachConfig::kMinTimeSampleScalingFieldNumber;
const int DistanceApproachConfig::kMaxTimeSampleScalingFieldNumber;
const int DistanceApproachConfig::kUseFixTimeFieldNumber;
const int DistanceApproachConfig::kIpoptConfigFieldNumber;
const int DistanceApproachConfig::kEnableConstraintCheckFieldNumber;
const int DistanceApproachConfig::kEnableHandDerivativeFieldNumber;
const int DistanceApproachConfig::kEnableDerivativeCheckFieldNumber;
const int DistanceApproachConfig::kEnableInitialFinalCheckFieldNumber;
const int DistanceApproachConfig::kDistanceApproachModeFieldNumber;
const int DistanceApproachConfig::kEnableJacobianAdFieldNumber;
const int DistanceApproachConfig::kEnableCheckInitialStateFieldNumber;
const int DistanceApproachConfig::kWeightEndStateFieldNumber;
const int DistanceApproachConfig::kWeightSlackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceApproachConfig::DistanceApproachConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_DistanceApproachConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DistanceApproachConfig)
}
DistanceApproachConfig::DistanceApproachConfig(const DistanceApproachConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_)) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DistanceApproachConfig)
}

void DistanceApproachConfig::SharedCtor() {
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_check_initial_state_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(enable_check_initial_state_));
  max_speed_forward_ = 3;
  max_speed_reverse_ = 2;
  max_acceleration_forward_ = 2;
  max_acceleration_reverse_ = 2;
  min_time_sample_scaling_ = 0.1;
  max_time_sample_scaling_ = 10;
}

DistanceApproachConfig::~DistanceApproachConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DistanceApproachConfig)
  SharedDtor();
}

void DistanceApproachConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DistanceApproachConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DistanceApproachConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistanceApproachConfig& DistanceApproachConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_DistanceApproachConfig.base);
  return *internal_default_instance();
}


void DistanceApproachConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DistanceApproachConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != NULL);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&weight_steer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_phi_) -
        reinterpret_cast<char*>(&weight_steer_)) + sizeof(weight_phi_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&weight_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_constraint_check_) -
        reinterpret_cast<char*>(&weight_v_)) + sizeof(enable_constraint_check_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&enable_hand_derivative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_check_initial_state_) -
        reinterpret_cast<char*>(&enable_hand_derivative_)) + sizeof(enable_check_initial_state_));
  }
  if (cached_has_bits & 1056964608u) {
    max_speed_forward_ = 3;
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
    max_time_sample_scaling_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistanceApproachConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DistanceApproachConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_steer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_weight_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_weight_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_weight_steer_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_weight_a_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_weight_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_weight_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_phi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_weight_phi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_v = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_weight_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_stitching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_weight_steer_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_stitching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_weight_a_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_first_order_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_weight_first_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_first_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_second_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_weight_second_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_second_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_forward = 14 [default = 3];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_max_speed_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_reverse = 15 [default = 2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_max_speed_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_forward = 16 [default = 2];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_max_acceleration_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_max_acceleration_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_min_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_max_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fix_time = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_use_fix_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.IpoptConfig ipopt_config = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_constraint_check = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_enable_constraint_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_constraint_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hand_derivative = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_enable_hand_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hand_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_derivative_check = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_enable_derivative_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_derivative_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_initial_final_check = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_enable_initial_final_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_initial_final_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::DistanceApproachMode_IsValid(value)) {
            set_distance_approach_mode(static_cast< ::apollo::planning::DistanceApproachMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                26, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_jacobian_ad = 27 [default = false];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_enable_jacobian_ad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_jacobian_ad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_check_initial_state = 28 [default = false];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_enable_check_initial_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_check_initial_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_end_state = 29 [default = 0];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_weight_end_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_end_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_slack = 30 [default = 0];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_weight_slack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_slack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DistanceApproachConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DistanceApproachConfig)
  return false;
#undef DO_
}

void DistanceApproachConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DistanceApproachConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_steer(), output);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_a(), output);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_steer_rate(), output);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight_a_rate(), output);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->weight_x(), output);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_y(), output);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->weight_phi(), output);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->weight_v(), output);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->weight_steer_stitching(), output);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->weight_a_stitching(), output);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->weight_first_order_time(), output);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->weight_second_order_time(), output);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->min_safety_distance(), output);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_speed_forward(), output);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->max_speed_reverse(), output);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->max_acceleration_forward(), output);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->max_acceleration_reverse(), output);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->min_time_sample_scaling(), output);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->max_time_sample_scaling(), output);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->use_fix_time(), output);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_ipopt_config(), output);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enable_constraint_check(), output);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enable_hand_derivative(), output);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->enable_derivative_check(), output);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->enable_initial_final_check(), output);
  }

  // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->distance_approach_mode(), output);
  }

  // optional bool enable_jacobian_ad = 27 [default = false];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->enable_jacobian_ad(), output);
  }

  // optional bool enable_check_initial_state = 28 [default = false];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->enable_check_initial_state(), output);
  }

  // optional double weight_end_state = 29 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->weight_end_state(), output);
  }

  // optional double weight_slack = 30 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->weight_slack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DistanceApproachConfig)
}

::google::protobuf::uint8* DistanceApproachConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DistanceApproachConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->use_fix_time(), target);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_ipopt_config(), deterministic, target);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->enable_initial_final_check(), target);
  }

  // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->distance_approach_mode(), target);
  }

  // optional bool enable_jacobian_ad = 27 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->enable_jacobian_ad(), target);
  }

  // optional bool enable_check_initial_state = 28 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->enable_check_initial_state(), target);
  }

  // optional double weight_end_state = 29 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->weight_end_state(), target);
  }

  // optional double weight_slack = 30 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->weight_slack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DistanceApproachConfig)
  return target;
}

size_t DistanceApproachConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DistanceApproachConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.IpoptConfig ipopt_config = 21;
    if (has_ipopt_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (has_weight_steer()) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (has_weight_a()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (has_weight_steer_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (has_weight_a_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (has_weight_x()) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (has_weight_y()) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (has_weight_phi()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double weight_v = 8;
    if (has_weight_v()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (has_weight_steer_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (has_weight_a_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (has_weight_first_order_time()) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (has_weight_second_order_time()) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (has_use_fix_time()) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (has_enable_constraint_check()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool enable_hand_derivative = 23;
    if (has_enable_hand_derivative()) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (has_enable_derivative_check()) {
      total_size += 2 + 1;
    }

    // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
    if (has_distance_approach_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->distance_approach_mode());
    }

    // optional double weight_end_state = 29 [default = 0];
    if (has_weight_end_state()) {
      total_size += 2 + 8;
    }

    // optional double weight_slack = 30 [default = 0];
    if (has_weight_slack()) {
      total_size += 2 + 8;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (has_enable_initial_final_check()) {
      total_size += 2 + 1;
    }

    // optional bool enable_jacobian_ad = 27 [default = false];
    if (has_enable_jacobian_ad()) {
      total_size += 2 + 1;
    }

    // optional bool enable_check_initial_state = 28 [default = false];
    if (has_enable_check_initial_state()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional double max_speed_forward = 14 [default = 3];
    if (has_max_speed_forward()) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (has_max_speed_reverse()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (has_max_acceleration_forward()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (has_max_acceleration_reverse()) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (has_min_time_sample_scaling()) {
      total_size += 2 + 8;
    }

    // optional double max_time_sample_scaling = 19 [default = 10];
    if (has_max_time_sample_scaling()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceApproachConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceApproachConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistanceApproachConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DistanceApproachConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DistanceApproachConfig)
    MergeFrom(*source);
  }
}

void DistanceApproachConfig::MergeFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::apollo::planning::IpoptConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      distance_approach_mode_ = from.distance_approach_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      weight_end_state_ = from.weight_end_state_;
    }
    if (cached_has_bits & 0x00100000u) {
      weight_slack_ = from.weight_slack_;
    }
    if (cached_has_bits & 0x00200000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_jacobian_ad_ = from.enable_jacobian_ad_;
    }
    if (cached_has_bits & 0x00800000u) {
      enable_check_initial_state_ = from.enable_check_initial_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_time_sample_scaling_ = from.max_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistanceApproachConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceApproachConfig::CopyFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachConfig::IsInitialized() const {
  return true;
}

void DistanceApproachConfig::Swap(DistanceApproachConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceApproachConfig::InternalSwap(DistanceApproachConfig* other) {
  using std::swap;
  swap(ipopt_config_, other->ipopt_config_);
  swap(weight_steer_, other->weight_steer_);
  swap(weight_a_, other->weight_a_);
  swap(weight_steer_rate_, other->weight_steer_rate_);
  swap(weight_a_rate_, other->weight_a_rate_);
  swap(weight_x_, other->weight_x_);
  swap(weight_y_, other->weight_y_);
  swap(weight_phi_, other->weight_phi_);
  swap(weight_v_, other->weight_v_);
  swap(weight_steer_stitching_, other->weight_steer_stitching_);
  swap(weight_a_stitching_, other->weight_a_stitching_);
  swap(weight_first_order_time_, other->weight_first_order_time_);
  swap(weight_second_order_time_, other->weight_second_order_time_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(use_fix_time_, other->use_fix_time_);
  swap(enable_constraint_check_, other->enable_constraint_check_);
  swap(enable_hand_derivative_, other->enable_hand_derivative_);
  swap(enable_derivative_check_, other->enable_derivative_check_);
  swap(distance_approach_mode_, other->distance_approach_mode_);
  swap(weight_end_state_, other->weight_end_state_);
  swap(weight_slack_, other->weight_slack_);
  swap(enable_initial_final_check_, other->enable_initial_final_check_);
  swap(enable_jacobian_ad_, other->enable_jacobian_ad_);
  swap(enable_check_initial_state_, other->enable_check_initial_state_);
  swap(max_speed_forward_, other->max_speed_forward_);
  swap(max_speed_reverse_, other->max_speed_reverse_);
  swap(max_acceleration_forward_, other->max_acceleration_forward_);
  swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DistanceApproachConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IpoptConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpoptConfig::kIpoptPrintLevelFieldNumber;
const int IpoptConfig::kMumpsMemPercentFieldNumber;
const int IpoptConfig::kMumpsPivtolFieldNumber;
const int IpoptConfig::kIpoptMaxIterFieldNumber;
const int IpoptConfig::kIpoptTolFieldNumber;
const int IpoptConfig::kIpoptAcceptableConstrViolTolFieldNumber;
const int IpoptConfig::kIpoptMinHessianPerturbationFieldNumber;
const int IpoptConfig::kIpoptJacobianRegularizationValueFieldNumber;
const int IpoptConfig::kIpoptPrintTimingStatisticsFieldNumber;
const int IpoptConfig::kIpoptAlphaForYFieldNumber;
const int IpoptConfig::kIpoptRecalcYFieldNumber;
const int IpoptConfig::kIpoptMuInitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpoptConfig::IpoptConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IpoptConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.IpoptConfig)
}
IpoptConfig::IpoptConfig(const IpoptConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_recalc_y()) {
    ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IpoptConfig)
}

void IpoptConfig::SharedCtor() {
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipopt_max_iter_) -
      reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_max_iter_));
  ipopt_mu_init_ = 0.1;
}

IpoptConfig::~IpoptConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IpoptConfig)
  SharedDtor();
}

void IpoptConfig::SharedDtor() {
  ipopt_print_timing_statistics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpoptConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IpoptConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpoptConfig& IpoptConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IpoptConfig.base);
  return *internal_default_instance();
}


void IpoptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IpoptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ipopt_print_timing_statistics_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_alpha_for_y_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipopt_recalc_y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
        reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_max_iter_) -
        reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_)) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IpoptConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.IpoptConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ipopt_print_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ipopt_print_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_print_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mumps_mem_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mumps_mem_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mumps_mem_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mumps_pivtol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_mumps_pivtol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mumps_pivtol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipopt_max_iter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ipopt_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_tol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ipopt_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ipopt_acceptable_constr_viol_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_acceptable_constr_viol_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_min_hessian_perturbation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_ipopt_min_hessian_perturbation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_min_hessian_perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_jacobian_regularization_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_ipopt_jacobian_regularization_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_jacobian_regularization_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_print_timing_statistics = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_print_timing_statistics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_print_timing_statistics().data(), static_cast<int>(this->ipopt_print_timing_statistics().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_alpha_for_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_alpha_for_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_alpha_for_y().data(), static_cast<int>(this->ipopt_alpha_for_y().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_recalc_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_recalc_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_recalc_y().data(), static_cast<int>(this->ipopt_recalc_y().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.IpoptConfig.ipopt_recalc_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_ipopt_mu_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_mu_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.IpoptConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.IpoptConfig)
  return false;
#undef DO_
}

void IpoptConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.IpoptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipopt_print_level(), output);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mumps_mem_percent(), output);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mumps_pivtol(), output);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ipopt_max_iter(), output);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ipopt_tol(), output);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ipopt_acceptable_constr_viol_tol(), output);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ipopt_min_hessian_perturbation(), output);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ipopt_jacobian_regularization_value(), output);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), static_cast<int>(this->ipopt_print_timing_statistics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ipopt_print_timing_statistics(), output);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), static_cast<int>(this->ipopt_alpha_for_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ipopt_alpha_for_y(), output);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), static_cast<int>(this->ipopt_recalc_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_recalc_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ipopt_recalc_y(), output);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ipopt_mu_init(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.IpoptConfig)
}

::google::protobuf::uint8* IpoptConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IpoptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), static_cast<int>(this->ipopt_print_timing_statistics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), static_cast<int>(this->ipopt_alpha_for_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), static_cast<int>(this->ipopt_recalc_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_recalc_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ipopt_mu_init(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IpoptConfig)
  return target;
}

size_t IpoptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IpoptConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ipopt_print_timing_statistics = 9;
    if (has_ipopt_print_timing_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (has_ipopt_alpha_for_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (has_ipopt_recalc_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (has_ipopt_print_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (has_mumps_mem_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (has_mumps_pivtol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (has_ipopt_tol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (has_ipopt_acceptable_constr_viol_tol()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (has_ipopt_min_hessian_perturbation()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (has_ipopt_jacobian_regularization_value()) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (has_ipopt_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (has_ipopt_mu_init()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpoptConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IpoptConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpoptConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.IpoptConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.IpoptConfig)
    MergeFrom(*source);
  }
}

void IpoptConfig::MergeFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ipopt_print_timing_statistics();
      ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ipopt_alpha_for_y();
      ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ipopt_recalc_y();
      ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpoptConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpoptConfig::CopyFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptConfig::IsInitialized() const {
  return true;
}

void IpoptConfig::Swap(IpoptConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpoptConfig::InternalSwap(IpoptConfig* other) {
  using std::swap;
  ipopt_print_timing_statistics_.Swap(&other->ipopt_print_timing_statistics_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_alpha_for_y_.Swap(&other->ipopt_alpha_for_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_recalc_y_.Swap(&other->ipopt_recalc_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ipopt_print_level_, other->ipopt_print_level_);
  swap(mumps_mem_percent_, other->mumps_mem_percent_);
  swap(mumps_pivtol_, other->mumps_pivtol_);
  swap(ipopt_tol_, other->ipopt_tol_);
  swap(ipopt_acceptable_constr_viol_tol_, other->ipopt_acceptable_constr_viol_tol_);
  swap(ipopt_min_hessian_perturbation_, other->ipopt_min_hessian_perturbation_);
  swap(ipopt_jacobian_regularization_value_, other->ipopt_jacobian_regularization_value_);
  swap(ipopt_max_iter_, other->ipopt_max_iter_);
  swap(ipopt_mu_init_, other->ipopt_mu_init_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IpoptConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OSQPConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OSQPConfig::kAlphaFieldNumber;
const int OSQPConfig::kEpsAbsFieldNumber;
const int OSQPConfig::kEpsRelFieldNumber;
const int OSQPConfig::kMaxIterFieldNumber;
const int OSQPConfig::kPolishFieldNumber;
const int OSQPConfig::kOsqpDebugLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OSQPConfig::OSQPConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_OSQPConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OSQPConfig)
}
OSQPConfig::OSQPConfig(const OSQPConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&osqp_debug_log_, &from.osqp_debug_log_,
    static_cast<size_t>(reinterpret_cast<char*>(&polish_) -
    reinterpret_cast<char*>(&osqp_debug_log_)) + sizeof(polish_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OSQPConfig)
}

void OSQPConfig::SharedCtor() {
  osqp_debug_log_ = false;
  alpha_ = 1;
  eps_abs_ = 0.001;
  eps_rel_ = 0.001;
  max_iter_ = 10000;
  polish_ = true;
}

OSQPConfig::~OSQPConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OSQPConfig)
  SharedDtor();
}

void OSQPConfig::SharedDtor() {
}

void OSQPConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OSQPConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OSQPConfig& OSQPConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_OSQPConfig.base);
  return *internal_default_instance();
}


void OSQPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OSQPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    osqp_debug_log_ = false;
    alpha_ = 1;
    eps_abs_ = 0.001;
    eps_rel_ = 0.001;
    max_iter_ = 10000;
    polish_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OSQPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OSQPConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double alpha = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_abs = 2 [default = 0.001];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_eps_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_rel = 3 [default = 0.001];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_eps_rel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_rel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool polish = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_polish();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &polish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool osqp_debug_log = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_osqp_debug_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &osqp_debug_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OSQPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OSQPConfig)
  return false;
#undef DO_
}

void OSQPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OSQPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->alpha(), output);
  }

  // optional double eps_abs = 2 [default = 0.001];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eps_abs(), output);
  }

  // optional double eps_rel = 3 [default = 0.001];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->eps_rel(), output);
  }

  // optional int32 max_iter = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_iter(), output);
  }

  // optional bool polish = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->polish(), output);
  }

  // optional bool osqp_debug_log = 6 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->osqp_debug_log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OSQPConfig)
}

::google::protobuf::uint8* OSQPConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OSQPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->alpha(), target);
  }

  // optional double eps_abs = 2 [default = 0.001];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eps_abs(), target);
  }

  // optional double eps_rel = 3 [default = 0.001];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->eps_rel(), target);
  }

  // optional int32 max_iter = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_iter(), target);
  }

  // optional bool polish = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->polish(), target);
  }

  // optional bool osqp_debug_log = 6 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->osqp_debug_log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OSQPConfig)
  return target;
}

size_t OSQPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OSQPConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool osqp_debug_log = 6 [default = false];
    if (has_osqp_debug_log()) {
      total_size += 1 + 1;
    }

    // optional double alpha = 1 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 8;
    }

    // optional double eps_abs = 2 [default = 0.001];
    if (has_eps_abs()) {
      total_size += 1 + 8;
    }

    // optional double eps_rel = 3 [default = 0.001];
    if (has_eps_rel()) {
      total_size += 1 + 8;
    }

    // optional int32 max_iter = 4 [default = 10000];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional bool polish = 5 [default = true];
    if (has_polish()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OSQPConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OSQPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OSQPConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OSQPConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OSQPConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OSQPConfig)
    MergeFrom(*source);
  }
}

void OSQPConfig::MergeFrom(const OSQPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OSQPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      osqp_debug_log_ = from.osqp_debug_log_;
    }
    if (cached_has_bits & 0x00000002u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_abs_ = from.eps_abs_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_rel_ = from.eps_rel_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00000020u) {
      polish_ = from.polish_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OSQPConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OSQPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSQPConfig::CopyFrom(const OSQPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OSQPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSQPConfig::IsInitialized() const {
  return true;
}

void OSQPConfig::Swap(OSQPConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OSQPConfig::InternalSwap(OSQPConfig* other) {
  using std::swap;
  swap(osqp_debug_log_, other->osqp_debug_log_);
  swap(alpha_, other->alpha_);
  swap(eps_abs_, other->eps_abs_);
  swap(eps_rel_, other->eps_rel_);
  swap(max_iter_, other->max_iter_);
  swap(polish_, other->polish_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OSQPConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IterativeAnchoringConfig::InitAsDefaultInstance() {
  ::apollo::planning::_IterativeAnchoringConfig_default_instance_._instance.get_mutable()->fem_pos_deviation_smoother_config_ = const_cast< ::apollo::planning::FemPosDeviationSmootherConfig*>(
      ::apollo::planning::FemPosDeviationSmootherConfig::internal_default_instance());
  ::apollo::planning::_IterativeAnchoringConfig_default_instance_._instance.get_mutable()->s_curve_config_ = const_cast< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::internal_default_instance());
}
void IterativeAnchoringConfig::clear_fem_pos_deviation_smoother_config() {
  if (fem_pos_deviation_smoother_config_ != NULL) fem_pos_deviation_smoother_config_->Clear();
  clear_has_fem_pos_deviation_smoother_config();
}
void IterativeAnchoringConfig::clear_s_curve_config() {
  if (s_curve_config_ != NULL) s_curve_config_->Clear();
  clear_has_s_curve_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IterativeAnchoringConfig::kInterpolatedDeltaSFieldNumber;
const int IterativeAnchoringConfig::kReanchoringTrailsNumFieldNumber;
const int IterativeAnchoringConfig::kReanchoringPosStddevFieldNumber;
const int IterativeAnchoringConfig::kReanchoringLengthStddevFieldNumber;
const int IterativeAnchoringConfig::kEstimateBoundFieldNumber;
const int IterativeAnchoringConfig::kDefaultBoundFieldNumber;
const int IterativeAnchoringConfig::kVehicleShortestDimensionFieldNumber;
const int IterativeAnchoringConfig::kFemPosDeviationSmootherConfigFieldNumber;
const int IterativeAnchoringConfig::kCollisionDecreaseRatioFieldNumber;
const int IterativeAnchoringConfig::kMaxForwardVFieldNumber;
const int IterativeAnchoringConfig::kMaxReverseVFieldNumber;
const int IterativeAnchoringConfig::kMaxForwardAccFieldNumber;
const int IterativeAnchoringConfig::kMaxReverseAccFieldNumber;
const int IterativeAnchoringConfig::kMaxAccJerkFieldNumber;
const int IterativeAnchoringConfig::kDeltaTFieldNumber;
const int IterativeAnchoringConfig::kSCurveConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IterativeAnchoringConfig::IterativeAnchoringConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IterativeAnchoringConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.IterativeAnchoringConfig)
}
IterativeAnchoringConfig::IterativeAnchoringConfig(const IterativeAnchoringConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fem_pos_deviation_smoother_config()) {
    fem_pos_deviation_smoother_config_ = new ::apollo::planning::FemPosDeviationSmootherConfig(*from.fem_pos_deviation_smoother_config_);
  } else {
    fem_pos_deviation_smoother_config_ = NULL;
  }
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = NULL;
  }
  ::memcpy(&estimate_bound_, &from.estimate_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_t_) -
    reinterpret_cast<char*>(&estimate_bound_)) + sizeof(delta_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IterativeAnchoringConfig)
}

void IterativeAnchoringConfig::SharedCtor() {
  ::memset(&fem_pos_deviation_smoother_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estimate_bound_) -
      reinterpret_cast<char*>(&fem_pos_deviation_smoother_config_)) + sizeof(estimate_bound_));
  reanchoring_trails_num_ = 50;
  interpolated_delta_s_ = 0.1;
  reanchoring_pos_stddev_ = 0.25;
  reanchoring_length_stddev_ = 1;
  default_bound_ = 2;
  vehicle_shortest_dimension_ = 1.04;
  collision_decrease_ratio_ = 0.9;
  max_forward_v_ = 2;
  max_reverse_v_ = 2;
  max_forward_acc_ = 3;
  max_reverse_acc_ = 2;
  max_acc_jerk_ = 4;
  delta_t_ = 0.2;
}

IterativeAnchoringConfig::~IterativeAnchoringConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IterativeAnchoringConfig)
  SharedDtor();
}

void IterativeAnchoringConfig::SharedDtor() {
  if (this != internal_default_instance()) delete fem_pos_deviation_smoother_config_;
  if (this != internal_default_instance()) delete s_curve_config_;
}

void IterativeAnchoringConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IterativeAnchoringConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IterativeAnchoringConfig& IterativeAnchoringConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_IterativeAnchoringConfig.base);
  return *internal_default_instance();
}


void IterativeAnchoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fem_pos_deviation_smoother_config_ != NULL);
      fem_pos_deviation_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s_curve_config_ != NULL);
      s_curve_config_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    estimate_bound_ = false;
    reanchoring_trails_num_ = 50;
    interpolated_delta_s_ = 0.1;
    reanchoring_pos_stddev_ = 0.25;
    reanchoring_length_stddev_ = 1;
    default_bound_ = 2;
  }
  if (cached_has_bits & 65280u) {
    vehicle_shortest_dimension_ = 1.04;
    collision_decrease_ratio_ = 0.9;
    max_forward_v_ = 2;
    max_reverse_v_ = 2;
    max_forward_acc_ = 3;
    max_reverse_acc_ = 2;
    max_acc_jerk_ = 4;
    delta_t_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IterativeAnchoringConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.IterativeAnchoringConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double interpolated_delta_s = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_interpolated_delta_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interpolated_delta_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reanchoring_trails_num = 2 [default = 50];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reanchoring_trails_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reanchoring_trails_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reanchoring_pos_stddev = 3 [default = 0.25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_reanchoring_pos_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reanchoring_pos_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reanchoring_length_stddev = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_reanchoring_length_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reanchoring_length_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool estimate_bound = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_estimate_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &estimate_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_bound = 6 [default = 2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_default_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_shortest_dimension = 7 [default = 1.04];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_vehicle_shortest_dimension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_shortest_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fem_pos_deviation_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double collision_decrease_ratio = 9 [default = 0.9];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_collision_decrease_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collision_decrease_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_v = 10 [default = 2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_max_forward_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_v = 11 [default = 2];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_max_reverse_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_acc = 12 [default = 3];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_max_forward_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_acc = 13 [default = 2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_max_reverse_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acc_jerk = 14 [default = 4];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_max_acc_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acc_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delta_t = 15 [default = 0.2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.IterativeAnchoringConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.IterativeAnchoringConfig)
  return false;
#undef DO_
}

void IterativeAnchoringConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->interpolated_delta_s(), output);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reanchoring_trails_num(), output);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reanchoring_pos_stddev(), output);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->reanchoring_length_stddev(), output);
  }

  // optional bool estimate_bound = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->estimate_bound(), output);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->default_bound(), output);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vehicle_shortest_dimension(), output);
  }

  // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_fem_pos_deviation_smoother_config(), output);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->collision_decrease_ratio(), output);
  }

  // optional double max_forward_v = 10 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_forward_v(), output);
  }

  // optional double max_reverse_v = 11 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_reverse_v(), output);
  }

  // optional double max_forward_acc = 12 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_forward_acc(), output);
  }

  // optional double max_reverse_acc = 13 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_reverse_acc(), output);
  }

  // optional double max_acc_jerk = 14 [default = 4];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_acc_jerk(), output);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->delta_t(), output);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_s_curve_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.IterativeAnchoringConfig)
}

::google::protobuf::uint8* IterativeAnchoringConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->interpolated_delta_s(), target);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reanchoring_trails_num(), target);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reanchoring_pos_stddev(), target);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->reanchoring_length_stddev(), target);
  }

  // optional bool estimate_bound = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->estimate_bound(), target);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->default_bound(), target);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vehicle_shortest_dimension(), target);
  }

  // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_fem_pos_deviation_smoother_config(), deterministic, target);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->collision_decrease_ratio(), target);
  }

  // optional double max_forward_v = 10 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_forward_v(), target);
  }

  // optional double max_reverse_v = 11 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_reverse_v(), target);
  }

  // optional double max_forward_acc = 12 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_forward_acc(), target);
  }

  // optional double max_reverse_acc = 13 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_reverse_acc(), target);
  }

  // optional double max_acc_jerk = 14 [default = 4];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_acc_jerk(), target);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->delta_t(), target);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_s_curve_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IterativeAnchoringConfig)
  return target;
}

size_t IterativeAnchoringConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IterativeAnchoringConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
    if (has_fem_pos_deviation_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fem_pos_deviation_smoother_config_);
    }

    // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
    if (has_s_curve_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *s_curve_config_);
    }

    // optional bool estimate_bound = 5 [default = false];
    if (has_estimate_bound()) {
      total_size += 1 + 1;
    }

    // optional int32 reanchoring_trails_num = 2 [default = 50];
    if (has_reanchoring_trails_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reanchoring_trails_num());
    }

    // optional double interpolated_delta_s = 1 [default = 0.1];
    if (has_interpolated_delta_s()) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_pos_stddev = 3 [default = 0.25];
    if (has_reanchoring_pos_stddev()) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_length_stddev = 4 [default = 1];
    if (has_reanchoring_length_stddev()) {
      total_size += 1 + 8;
    }

    // optional double default_bound = 6 [default = 2];
    if (has_default_bound()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double vehicle_shortest_dimension = 7 [default = 1.04];
    if (has_vehicle_shortest_dimension()) {
      total_size += 1 + 8;
    }

    // optional double collision_decrease_ratio = 9 [default = 0.9];
    if (has_collision_decrease_ratio()) {
      total_size += 1 + 8;
    }

    // optional double max_forward_v = 10 [default = 2];
    if (has_max_forward_v()) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_v = 11 [default = 2];
    if (has_max_reverse_v()) {
      total_size += 1 + 8;
    }

    // optional double max_forward_acc = 12 [default = 3];
    if (has_max_forward_acc()) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_acc = 13 [default = 2];
    if (has_max_reverse_acc()) {
      total_size += 1 + 8;
    }

    // optional double max_acc_jerk = 14 [default = 4];
    if (has_max_acc_jerk()) {
      total_size += 1 + 8;
    }

    // optional double delta_t = 15 [default = 0.2];
    if (has_delta_t()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterativeAnchoringConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IterativeAnchoringConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IterativeAnchoringConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.IterativeAnchoringConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.IterativeAnchoringConfig)
    MergeFrom(*source);
  }
}

void IterativeAnchoringConfig::MergeFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fem_pos_deviation_smoother_config()->::apollo::planning::FemPosDeviationSmootherConfig::MergeFrom(from.fem_pos_deviation_smoother_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s_curve_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000004u) {
      estimate_bound_ = from.estimate_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      reanchoring_trails_num_ = from.reanchoring_trails_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      interpolated_delta_s_ = from.interpolated_delta_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      reanchoring_pos_stddev_ = from.reanchoring_pos_stddev_;
    }
    if (cached_has_bits & 0x00000040u) {
      reanchoring_length_stddev_ = from.reanchoring_length_stddev_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_bound_ = from.default_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      vehicle_shortest_dimension_ = from.vehicle_shortest_dimension_;
    }
    if (cached_has_bits & 0x00000200u) {
      collision_decrease_ratio_ = from.collision_decrease_ratio_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_forward_v_ = from.max_forward_v_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_reverse_v_ = from.max_reverse_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_forward_acc_ = from.max_forward_acc_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_reverse_acc_ = from.max_reverse_acc_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_acc_jerk_ = from.max_acc_jerk_;
    }
    if (cached_has_bits & 0x00008000u) {
      delta_t_ = from.delta_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IterativeAnchoringConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterativeAnchoringConfig::CopyFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterativeAnchoringConfig::IsInitialized() const {
  return true;
}

void IterativeAnchoringConfig::Swap(IterativeAnchoringConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IterativeAnchoringConfig::InternalSwap(IterativeAnchoringConfig* other) {
  using std::swap;
  swap(fem_pos_deviation_smoother_config_, other->fem_pos_deviation_smoother_config_);
  swap(s_curve_config_, other->s_curve_config_);
  swap(estimate_bound_, other->estimate_bound_);
  swap(reanchoring_trails_num_, other->reanchoring_trails_num_);
  swap(interpolated_delta_s_, other->interpolated_delta_s_);
  swap(reanchoring_pos_stddev_, other->reanchoring_pos_stddev_);
  swap(reanchoring_length_stddev_, other->reanchoring_length_stddev_);
  swap(default_bound_, other->default_bound_);
  swap(vehicle_shortest_dimension_, other->vehicle_shortest_dimension_);
  swap(collision_decrease_ratio_, other->collision_decrease_ratio_);
  swap(max_forward_v_, other->max_forward_v_);
  swap(max_reverse_v_, other->max_reverse_v_);
  swap(max_forward_acc_, other->max_forward_acc_);
  swap(max_reverse_acc_, other->max_reverse_acc_);
  swap(max_acc_jerk_, other->max_acc_jerk_);
  swap(delta_t_, other->delta_t_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IterativeAnchoringConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPartitionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPartitionConfig::kInterpolatedPiecesNumFieldNumber;
const int TrajectoryPartitionConfig::kInitialGearCheckHorizonFieldNumber;
const int TrajectoryPartitionConfig::kHeadingSearchingRangeFieldNumber;
const int TrajectoryPartitionConfig::kGearShiftPeriodDurationFieldNumber;
const int TrajectoryPartitionConfig::kGearShiftMaxTFieldNumber;
const int TrajectoryPartitionConfig::kGearShiftUnitTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPartitionConfig::TrajectoryPartitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_TrajectoryPartitionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrajectoryPartitionConfig)
}
TrajectoryPartitionConfig::TrajectoryPartitionConfig(const TrajectoryPartitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interpolated_pieces_num_, &from.interpolated_pieces_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_shift_unit_t_) -
    reinterpret_cast<char*>(&interpolated_pieces_num_)) + sizeof(gear_shift_unit_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrajectoryPartitionConfig)
}

void TrajectoryPartitionConfig::SharedCtor() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
  heading_searching_range_ = 0.3;
  gear_shift_period_duration_ = 2;
  gear_shift_max_t_ = 3;
  gear_shift_unit_t_ = 0.02;
}

TrajectoryPartitionConfig::~TrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrajectoryPartitionConfig)
  SharedDtor();
}

void TrajectoryPartitionConfig::SharedDtor() {
}

void TrajectoryPartitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryPartitionConfig::descriptor() {
  ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPartitionConfig& TrajectoryPartitionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planner_5fopen_5fspace_5fconfig_2eproto::scc_info_TrajectoryPartitionConfig.base);
  return *internal_default_instance();
}


void TrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
    initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
    heading_searching_range_ = 0.3;
    gear_shift_period_duration_ = 2;
    gear_shift_max_t_ = 3;
    gear_shift_unit_t_ = 0.02;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPartitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrajectoryPartitionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 interpolated_pieces_num = 1 [default = 50];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_interpolated_pieces_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interpolated_pieces_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 initial_gear_check_horizon = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_initial_gear_check_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initial_gear_check_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_searching_range = 3 [default = 0.3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_heading_searching_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_searching_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_period_duration = 4 [default = 2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gear_shift_period_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_period_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_max_t = 5 [default = 3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gear_shift_max_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_max_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_unit_t = 6 [default = 0.02];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_gear_shift_unit_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_unit_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrajectoryPartitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrajectoryPartitionConfig)
  return false;
#undef DO_
}

void TrajectoryPartitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->interpolated_pieces_num(), output);
  }

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->initial_gear_check_horizon(), output);
  }

  // optional double heading_searching_range = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading_searching_range(), output);
  }

  // optional double gear_shift_period_duration = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gear_shift_period_duration(), output);
  }

  // optional double gear_shift_max_t = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gear_shift_max_t(), output);
  }

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gear_shift_unit_t(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrajectoryPartitionConfig)
}

::google::protobuf::uint8* TrajectoryPartitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->initial_gear_check_horizon(), target);
  }

  // optional double heading_searching_range = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading_searching_range(), target);
  }

  // optional double gear_shift_period_duration = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gear_shift_period_duration(), target);
  }

  // optional double gear_shift_max_t = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gear_shift_unit_t(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrajectoryPartitionConfig)
  return target;
}

size_t TrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrajectoryPartitionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 interpolated_pieces_num = 1 [default = 50];
    if (has_interpolated_pieces_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 2 [default = 3];
    if (has_initial_gear_check_horizon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initial_gear_check_horizon());
    }

    // optional double heading_searching_range = 3 [default = 0.3];
    if (has_heading_searching_range()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 4 [default = 2];
    if (has_gear_shift_period_duration()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_max_t = 5 [default = 3];
    if (has_gear_shift_max_t()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 6 [default = 0.02];
    if (has_gear_shift_unit_t()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPartitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPartitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPartitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrajectoryPartitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrajectoryPartitionConfig)
    MergeFrom(*source);
  }
}

void TrajectoryPartitionConfig::MergeFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_searching_range_ = from.heading_searching_range_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPartitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPartitionConfig::CopyFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void TrajectoryPartitionConfig::Swap(TrajectoryPartitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPartitionConfig::InternalSwap(TrajectoryPartitionConfig* other) {
  using std::swap;
  swap(interpolated_pieces_num_, other->interpolated_pieces_num_);
  swap(initial_gear_check_horizon_, other->initial_gear_check_horizon_);
  swap(heading_searching_range_, other->heading_searching_range_);
  swap(gear_shift_period_duration_, other->gear_shift_period_duration_);
  swap(gear_shift_max_t_, other->gear_shift_max_t_);
  swap(gear_shift_unit_t_, other->gear_shift_unit_t_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryPartitionConfig::GetMetadata() const {
  protobuf_planner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlannerOpenSpaceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlannerOpenSpaceConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ROIConfig* Arena::CreateMaybeMessage< ::apollo::planning::ROIConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ROIConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::WarmStartConfig* Arena::CreateMaybeMessage< ::apollo::planning::WarmStartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::WarmStartConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DualVariableWarmStartConfig* Arena::CreateMaybeMessage< ::apollo::planning::DualVariableWarmStartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DualVariableWarmStartConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DistanceApproachConfig* Arena::CreateMaybeMessage< ::apollo::planning::DistanceApproachConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DistanceApproachConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::IpoptConfig* Arena::CreateMaybeMessage< ::apollo::planning::IpoptConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::IpoptConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OSQPConfig* Arena::CreateMaybeMessage< ::apollo::planning::OSQPConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OSQPConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::IterativeAnchoringConfig* Arena::CreateMaybeMessage< ::apollo::planning::IterativeAnchoringConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::IterativeAnchoringConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrajectoryPartitionConfig* Arena::CreateMaybeMessage< ::apollo::planning::TrajectoryPartitionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrajectoryPartitionConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

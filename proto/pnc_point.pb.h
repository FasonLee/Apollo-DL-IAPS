// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnc_point.proto

#ifndef PROTOBUF_INCLUDED_pnc_5fpoint_2eproto
#define PROTOBUF_INCLUDED_pnc_5fpoint_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pnc_5fpoint_2eproto 

namespace protobuf_pnc_5fpoint_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pnc_5fpoint_2eproto
namespace apollo {
namespace common {
class FrenetFramePoint;
class FrenetFramePointDefaultTypeInternal;
extern FrenetFramePointDefaultTypeInternal _FrenetFramePoint_default_instance_;
class GaussianInfo;
class GaussianInfoDefaultTypeInternal;
extern GaussianInfoDefaultTypeInternal _GaussianInfo_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class SLPoint;
class SLPointDefaultTypeInternal;
extern SLPointDefaultTypeInternal _SLPoint_default_instance_;
class SpeedPoint;
class SpeedPointDefaultTypeInternal;
extern SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
class VehicleMotion;
class VehicleMotionDefaultTypeInternal;
extern VehicleMotionDefaultTypeInternal _VehicleMotion_default_instance_;
class VehicleMotionPoint;
class VehicleMotionPointDefaultTypeInternal;
extern VehicleMotionPointDefaultTypeInternal _VehicleMotionPoint_default_instance_;
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::common::FrenetFramePoint* Arena::CreateMaybeMessage<::apollo::common::FrenetFramePoint>(Arena*);
template<> ::apollo::common::GaussianInfo* Arena::CreateMaybeMessage<::apollo::common::GaussianInfo>(Arena*);
template<> ::apollo::common::Path* Arena::CreateMaybeMessage<::apollo::common::Path>(Arena*);
template<> ::apollo::common::PathPoint* Arena::CreateMaybeMessage<::apollo::common::PathPoint>(Arena*);
template<> ::apollo::common::SLPoint* Arena::CreateMaybeMessage<::apollo::common::SLPoint>(Arena*);
template<> ::apollo::common::SpeedPoint* Arena::CreateMaybeMessage<::apollo::common::SpeedPoint>(Arena*);
template<> ::apollo::common::Trajectory* Arena::CreateMaybeMessage<::apollo::common::Trajectory>(Arena*);
template<> ::apollo::common::TrajectoryPoint* Arena::CreateMaybeMessage<::apollo::common::TrajectoryPoint>(Arena*);
template<> ::apollo::common::VehicleMotion* Arena::CreateMaybeMessage<::apollo::common::VehicleMotion>(Arena*);
template<> ::apollo::common::VehicleMotionPoint* Arena::CreateMaybeMessage<::apollo::common::VehicleMotionPoint>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace common {

// ===================================================================

class SLPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.SLPoint) */ {
 public:
  SLPoint();
  virtual ~SLPoint();

  SLPoint(const SLPoint& from);

  inline SLPoint& operator=(const SLPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLPoint(SLPoint&& from) noexcept
    : SLPoint() {
    *this = ::std::move(from);
  }

  inline SLPoint& operator=(SLPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLPoint* internal_default_instance() {
    return reinterpret_cast<const SLPoint*>(
               &_SLPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SLPoint* other);
  friend void swap(SLPoint& a, SLPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLPoint* New() const final {
    return CreateMaybeMessage<SLPoint>(NULL);
  }

  SLPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SLPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SLPoint& from);
  void MergeFrom(const SLPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double l = 2;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 2;
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.SLPoint)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_l();
  void clear_has_l();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double s_;
  double l_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrenetFramePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.FrenetFramePoint) */ {
 public:
  FrenetFramePoint();
  virtual ~FrenetFramePoint();

  FrenetFramePoint(const FrenetFramePoint& from);

  inline FrenetFramePoint& operator=(const FrenetFramePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrenetFramePoint(FrenetFramePoint&& from) noexcept
    : FrenetFramePoint() {
    *this = ::std::move(from);
  }

  inline FrenetFramePoint& operator=(FrenetFramePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrenetFramePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrenetFramePoint* internal_default_instance() {
    return reinterpret_cast<const FrenetFramePoint*>(
               &_FrenetFramePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FrenetFramePoint* other);
  friend void swap(FrenetFramePoint& a, FrenetFramePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrenetFramePoint* New() const final {
    return CreateMaybeMessage<FrenetFramePoint>(NULL);
  }

  FrenetFramePoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrenetFramePoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrenetFramePoint& from);
  void MergeFrom(const FrenetFramePoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrenetFramePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double l = 2;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 2;
  double l() const;
  void set_l(double value);

  // optional double dl = 3;
  bool has_dl() const;
  void clear_dl();
  static const int kDlFieldNumber = 3;
  double dl() const;
  void set_dl(double value);

  // optional double ddl = 4;
  bool has_ddl() const;
  void clear_ddl();
  static const int kDdlFieldNumber = 4;
  double ddl() const;
  void set_ddl(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.FrenetFramePoint)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_l();
  void clear_has_l();
  void set_has_dl();
  void clear_has_dl();
  void set_has_ddl();
  void clear_has_ddl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double s_;
  double l_;
  double dl_;
  double ddl_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.SpeedPoint) */ {
 public:
  SpeedPoint();
  virtual ~SpeedPoint();

  SpeedPoint(const SpeedPoint& from);

  inline SpeedPoint& operator=(const SpeedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPoint(SpeedPoint&& from) noexcept
    : SpeedPoint() {
    *this = ::std::move(from);
  }

  inline SpeedPoint& operator=(SpeedPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPoint* internal_default_instance() {
    return reinterpret_cast<const SpeedPoint*>(
               &_SpeedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpeedPoint* other);
  friend void swap(SpeedPoint& a, SpeedPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPoint* New() const final {
    return CreateMaybeMessage<SpeedPoint>(NULL);
  }

  SpeedPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedPoint& from);
  void MergeFrom(const SpeedPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double t = 2;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // optional double v = 3;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 3;
  double v() const;
  void set_v(double value);

  // optional double a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // optional double da = 5;
  bool has_da() const;
  void clear_da();
  static const int kDaFieldNumber = 5;
  double da() const;
  void set_da(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.SpeedPoint)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_t();
  void clear_has_t();
  void set_has_v();
  void clear_has_v();
  void set_has_a();
  void clear_has_a();
  void set_has_da();
  void clear_has_da();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double s_;
  double t_;
  double v_;
  double a_;
  double da_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.PathPoint) */ {
 public:
  PathPoint();
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PathPoint* other);
  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const final {
    return CreateMaybeMessage<PathPoint>(NULL);
  }

  PathPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string lane_id = 9;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 9;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double theta = 4;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  double theta() const;
  void set_theta(double value);

  // optional double kappa = 5;
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 5;
  double kappa() const;
  void set_kappa(double value);

  // optional double s = 6;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 6;
  double s() const;
  void set_s(double value);

  // optional double dkappa = 7;
  bool has_dkappa() const;
  void clear_dkappa();
  static const int kDkappaFieldNumber = 7;
  double dkappa() const;
  void set_dkappa(double value);

  // optional double ddkappa = 8;
  bool has_ddkappa() const;
  void clear_ddkappa();
  static const int kDdkappaFieldNumber = 8;
  double ddkappa() const;
  void set_ddkappa(double value);

  // optional double x_derivative = 10;
  bool has_x_derivative() const;
  void clear_x_derivative();
  static const int kXDerivativeFieldNumber = 10;
  double x_derivative() const;
  void set_x_derivative(double value);

  // optional double y_derivative = 11;
  bool has_y_derivative() const;
  void clear_y_derivative();
  static const int kYDerivativeFieldNumber = 11;
  double y_derivative() const;
  void set_y_derivative(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.PathPoint)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_theta();
  void clear_has_theta();
  void set_has_kappa();
  void clear_has_kappa();
  void set_has_s();
  void clear_has_s();
  void set_has_dkappa();
  void clear_has_dkappa();
  void set_has_ddkappa();
  void clear_has_ddkappa();
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_x_derivative();
  void clear_has_x_derivative();
  void set_has_y_derivative();
  void clear_has_y_derivative();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double x_;
  double y_;
  double z_;
  double theta_;
  double kappa_;
  double s_;
  double dkappa_;
  double ddkappa_;
  double x_derivative_;
  double y_derivative_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Path* other);
  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(NULL);
  }

  Path* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.PathPoint path_point = 2;
  int path_point_size() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 2;
  ::apollo::common::PathPoint* mutable_path_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
      mutable_path_point();
  const ::apollo::common::PathPoint& path_point(int index) const;
  ::apollo::common::PathPoint* add_path_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
      path_point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.common.Path)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint > path_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TrajectoryPoint* other);
  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(NULL);
  }

  TrajectoryPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PathPoint path_point = 1;
  bool has_path_point() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 1;
  private:
  const ::apollo::common::PathPoint& _internal_path_point() const;
  public:
  const ::apollo::common::PathPoint& path_point() const;
  ::apollo::common::PathPoint* release_path_point();
  ::apollo::common::PathPoint* mutable_path_point();
  void set_allocated_path_point(::apollo::common::PathPoint* path_point);

  // optional .apollo.common.GaussianInfo gaussian_info = 7;
  bool has_gaussian_info() const;
  void clear_gaussian_info();
  static const int kGaussianInfoFieldNumber = 7;
  private:
  const ::apollo::common::GaussianInfo& _internal_gaussian_info() const;
  public:
  const ::apollo::common::GaussianInfo& gaussian_info() const;
  ::apollo::common::GaussianInfo* release_gaussian_info();
  ::apollo::common::GaussianInfo* mutable_gaussian_info();
  void set_allocated_gaussian_info(::apollo::common::GaussianInfo* gaussian_info);

  // optional double v = 2;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 2;
  double v() const;
  void set_v(double value);

  // optional double a = 3;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 3;
  double a() const;
  void set_a(double value);

  // optional double relative_time = 4;
  bool has_relative_time() const;
  void clear_relative_time();
  static const int kRelativeTimeFieldNumber = 4;
  double relative_time() const;
  void set_relative_time(double value);

  // optional double da = 5;
  bool has_da() const;
  void clear_da();
  static const int kDaFieldNumber = 5;
  double da() const;
  void set_da(double value);

  // optional double steer = 6;
  bool has_steer() const;
  void clear_steer();
  static const int kSteerFieldNumber = 6;
  double steer() const;
  void set_steer(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.TrajectoryPoint)
 private:
  void set_has_path_point();
  void clear_has_path_point();
  void set_has_v();
  void clear_has_v();
  void set_has_a();
  void clear_has_a();
  void set_has_relative_time();
  void clear_has_relative_time();
  void set_has_da();
  void clear_has_da();
  void set_has_steer();
  void clear_has_steer();
  void set_has_gaussian_info();
  void clear_has_gaussian_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::PathPoint* path_point_;
  ::apollo::common::GaussianInfo* gaussian_info_;
  double v_;
  double a_;
  double relative_time_;
  double da_;
  double steer_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Trajectory* other);
  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(NULL);
  }

  Trajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 2;
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.common.Trajectory)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleMotionPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleMotionPoint) */ {
 public:
  VehicleMotionPoint();
  virtual ~VehicleMotionPoint();

  VehicleMotionPoint(const VehicleMotionPoint& from);

  inline VehicleMotionPoint& operator=(const VehicleMotionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleMotionPoint(VehicleMotionPoint&& from) noexcept
    : VehicleMotionPoint() {
    *this = ::std::move(from);
  }

  inline VehicleMotionPoint& operator=(VehicleMotionPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleMotionPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleMotionPoint* internal_default_instance() {
    return reinterpret_cast<const VehicleMotionPoint*>(
               &_VehicleMotionPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(VehicleMotionPoint* other);
  friend void swap(VehicleMotionPoint& a, VehicleMotionPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleMotionPoint* New() const final {
    return CreateMaybeMessage<VehicleMotionPoint>(NULL);
  }

  VehicleMotionPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleMotionPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleMotionPoint& from);
  void MergeFrom(const VehicleMotionPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleMotionPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
  bool has_trajectory_point() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 1;
  private:
  const ::apollo::common::TrajectoryPoint& _internal_trajectory_point() const;
  public:
  const ::apollo::common::TrajectoryPoint& trajectory_point() const;
  ::apollo::common::TrajectoryPoint* release_trajectory_point();
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point();
  void set_allocated_trajectory_point(::apollo::common::TrajectoryPoint* trajectory_point);

  // optional double steer = 2;
  bool has_steer() const;
  void clear_steer();
  static const int kSteerFieldNumber = 2;
  double steer() const;
  void set_steer(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleMotionPoint)
 private:
  void set_has_trajectory_point();
  void clear_has_trajectory_point();
  void set_has_steer();
  void clear_has_steer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::TrajectoryPoint* trajectory_point_;
  double steer_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleMotion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleMotion) */ {
 public:
  VehicleMotion();
  virtual ~VehicleMotion();

  VehicleMotion(const VehicleMotion& from);

  inline VehicleMotion& operator=(const VehicleMotion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleMotion(VehicleMotion&& from) noexcept
    : VehicleMotion() {
    *this = ::std::move(from);
  }

  inline VehicleMotion& operator=(VehicleMotion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleMotion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleMotion* internal_default_instance() {
    return reinterpret_cast<const VehicleMotion*>(
               &_VehicleMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(VehicleMotion* other);
  friend void swap(VehicleMotion& a, VehicleMotion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleMotion* New() const final {
    return CreateMaybeMessage<VehicleMotion>(NULL);
  }

  VehicleMotion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleMotion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleMotion& from);
  void MergeFrom(const VehicleMotion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleMotion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  int vehicle_motion_point_size() const;
  void clear_vehicle_motion_point();
  static const int kVehicleMotionPointFieldNumber = 2;
  ::apollo::common::VehicleMotionPoint* mutable_vehicle_motion_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint >*
      mutable_vehicle_motion_point();
  const ::apollo::common::VehicleMotionPoint& vehicle_motion_point(int index) const;
  ::apollo::common::VehicleMotionPoint* add_vehicle_motion_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint >&
      vehicle_motion_point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleMotion)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint > vehicle_motion_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GaussianInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.GaussianInfo) */ {
 public:
  GaussianInfo();
  virtual ~GaussianInfo();

  GaussianInfo(const GaussianInfo& from);

  inline GaussianInfo& operator=(const GaussianInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GaussianInfo(GaussianInfo&& from) noexcept
    : GaussianInfo() {
    *this = ::std::move(from);
  }

  inline GaussianInfo& operator=(GaussianInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GaussianInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaussianInfo* internal_default_instance() {
    return reinterpret_cast<const GaussianInfo*>(
               &_GaussianInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GaussianInfo* other);
  friend void swap(GaussianInfo& a, GaussianInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GaussianInfo* New() const final {
    return CreateMaybeMessage<GaussianInfo>(NULL);
  }

  GaussianInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GaussianInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GaussianInfo& from);
  void MergeFrom(const GaussianInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GaussianInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double sigma_x = 1;
  bool has_sigma_x() const;
  void clear_sigma_x();
  static const int kSigmaXFieldNumber = 1;
  double sigma_x() const;
  void set_sigma_x(double value);

  // optional double sigma_y = 2;
  bool has_sigma_y() const;
  void clear_sigma_y();
  static const int kSigmaYFieldNumber = 2;
  double sigma_y() const;
  void set_sigma_y(double value);

  // optional double correlation = 3;
  bool has_correlation() const;
  void clear_correlation();
  static const int kCorrelationFieldNumber = 3;
  double correlation() const;
  void set_correlation(double value);

  // optional double area_probability = 4;
  bool has_area_probability() const;
  void clear_area_probability();
  static const int kAreaProbabilityFieldNumber = 4;
  double area_probability() const;
  void set_area_probability(double value);

  // optional double ellipse_a = 5;
  bool has_ellipse_a() const;
  void clear_ellipse_a();
  static const int kEllipseAFieldNumber = 5;
  double ellipse_a() const;
  void set_ellipse_a(double value);

  // optional double ellipse_b = 6;
  bool has_ellipse_b() const;
  void clear_ellipse_b();
  static const int kEllipseBFieldNumber = 6;
  double ellipse_b() const;
  void set_ellipse_b(double value);

  // optional double theta_a = 7;
  bool has_theta_a() const;
  void clear_theta_a();
  static const int kThetaAFieldNumber = 7;
  double theta_a() const;
  void set_theta_a(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.GaussianInfo)
 private:
  void set_has_sigma_x();
  void clear_has_sigma_x();
  void set_has_sigma_y();
  void clear_has_sigma_y();
  void set_has_correlation();
  void clear_has_correlation();
  void set_has_area_probability();
  void clear_has_area_probability();
  void set_has_ellipse_a();
  void clear_has_ellipse_a();
  void set_has_ellipse_b();
  void clear_has_ellipse_b();
  void set_has_theta_a();
  void clear_has_theta_a();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double sigma_x_;
  double sigma_y_;
  double correlation_;
  double area_probability_;
  double ellipse_a_;
  double ellipse_b_;
  double theta_a_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLPoint

// optional double s = 1;
inline bool SLPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SLPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SLPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SLPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double SLPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.SLPoint.s)
  return s_;
}
inline void SLPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SLPoint.s)
}

// optional double l = 2;
inline bool SLPoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SLPoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SLPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SLPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double SLPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.common.SLPoint.l)
  return l_;
}
inline void SLPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SLPoint.l)
}

// -------------------------------------------------------------------

// FrenetFramePoint

// optional double s = 1;
inline bool FrenetFramePoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrenetFramePoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrenetFramePoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrenetFramePoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double FrenetFramePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.s)
  return s_;
}
inline void FrenetFramePoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.s)
}

// optional double l = 2;
inline bool FrenetFramePoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrenetFramePoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrenetFramePoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrenetFramePoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double FrenetFramePoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.l)
  return l_;
}
inline void FrenetFramePoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.l)
}

// optional double dl = 3;
inline bool FrenetFramePoint::has_dl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrenetFramePoint::set_has_dl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrenetFramePoint::clear_has_dl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrenetFramePoint::clear_dl() {
  dl_ = 0;
  clear_has_dl();
}
inline double FrenetFramePoint::dl() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.dl)
  return dl_;
}
inline void FrenetFramePoint::set_dl(double value) {
  set_has_dl();
  dl_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.dl)
}

// optional double ddl = 4;
inline bool FrenetFramePoint::has_ddl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrenetFramePoint::set_has_ddl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrenetFramePoint::clear_has_ddl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrenetFramePoint::clear_ddl() {
  ddl_ = 0;
  clear_has_ddl();
}
inline double FrenetFramePoint::ddl() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.ddl)
  return ddl_;
}
inline void FrenetFramePoint::set_ddl(double value) {
  set_has_ddl();
  ddl_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.ddl)
}

// -------------------------------------------------------------------

// SpeedPoint

// optional double s = 1;
inline bool SpeedPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double SpeedPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.s)
  return s_;
}
inline void SpeedPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.s)
}

// optional double t = 2;
inline bool SpeedPoint::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedPoint::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedPoint::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedPoint::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline double SpeedPoint::t() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.t)
  return t_;
}
inline void SpeedPoint::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.t)
}

// optional double v = 3;
inline bool SpeedPoint::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedPoint::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double SpeedPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.v)
  return v_;
}
inline void SpeedPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.v)
}

// optional double a = 4;
inline bool SpeedPoint::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedPoint::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double SpeedPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.a)
  return a_;
}
inline void SpeedPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.a)
}

// optional double da = 5;
inline bool SpeedPoint::has_da() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedPoint::set_has_da() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
inline double SpeedPoint::da() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.da)
  return da_;
}
inline void SpeedPoint::set_da(double value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.da)
}

// -------------------------------------------------------------------

// PathPoint

// optional double x = 1;
inline bool PathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPoint::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double PathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x)
  return x_;
}
inline void PathPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x)
}

// optional double y = 2;
inline bool PathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathPoint::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double PathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y)
  return y_;
}
inline void PathPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y)
}

// optional double z = 3;
inline bool PathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathPoint::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double PathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.z)
  return z_;
}
inline void PathPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.z)
}

// optional double theta = 4;
inline bool PathPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PathPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PathPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double PathPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.theta)
  return theta_;
}
inline void PathPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.theta)
}

// optional double kappa = 5;
inline bool PathPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PathPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PathPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PathPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline double PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.kappa)
  return kappa_;
}
inline void PathPoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.kappa)
}

// optional double s = 6;
inline bool PathPoint::has_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PathPoint::set_has_s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PathPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PathPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double PathPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.s)
  return s_;
}
inline void PathPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.s)
}

// optional double dkappa = 7;
inline bool PathPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PathPoint::set_has_dkappa() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PathPoint::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PathPoint::clear_dkappa() {
  dkappa_ = 0;
  clear_has_dkappa();
}
inline double PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.dkappa)
  return dkappa_;
}
inline void PathPoint::set_dkappa(double value) {
  set_has_dkappa();
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.dkappa)
}

// optional double ddkappa = 8;
inline bool PathPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PathPoint::set_has_ddkappa() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PathPoint::clear_has_ddkappa() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
  clear_has_ddkappa();
}
inline double PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.ddkappa)
  return ddkappa_;
}
inline void PathPoint::set_ddkappa(double value) {
  set_has_ddkappa();
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.ddkappa)
}

// optional string lane_id = 9;
inline bool PathPoint::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPoint::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPoint::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathPoint::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& PathPoint::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.lane_id)
  return lane_id_.GetNoArena();
}
inline void PathPoint::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.lane_id)
}
#if LANG_CXX11
inline void PathPoint::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.PathPoint.lane_id)
}
#endif
inline void PathPoint::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.PathPoint.lane_id)
}
inline void PathPoint::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.PathPoint.lane_id)
}
inline ::std::string* PathPoint::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.common.PathPoint.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathPoint::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.common.PathPoint.lane_id)
  if (!has_lane_id()) {
    return NULL;
  }
  clear_has_lane_id();
  return lane_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathPoint::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.PathPoint.lane_id)
}

// optional double x_derivative = 10;
inline bool PathPoint::has_x_derivative() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PathPoint::set_has_x_derivative() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PathPoint::clear_has_x_derivative() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PathPoint::clear_x_derivative() {
  x_derivative_ = 0;
  clear_has_x_derivative();
}
inline double PathPoint::x_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x_derivative)
  return x_derivative_;
}
inline void PathPoint::set_x_derivative(double value) {
  set_has_x_derivative();
  x_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x_derivative)
}

// optional double y_derivative = 11;
inline bool PathPoint::has_y_derivative() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PathPoint::set_has_y_derivative() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PathPoint::clear_has_y_derivative() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PathPoint::clear_y_derivative() {
  y_derivative_ = 0;
  clear_has_y_derivative();
}
inline double PathPoint::y_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y_derivative)
  return y_derivative_;
}
inline void PathPoint::set_y_derivative(double value) {
  set_has_y_derivative();
  y_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y_derivative)
}

// -------------------------------------------------------------------

// Path

// optional string name = 1;
inline bool Path::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Path::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Path::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.Path.name)
  return name_.GetNoArena();
}
inline void Path::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Path.name)
}
#if LANG_CXX11
inline void Path::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Path.name)
}
#endif
inline void Path::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Path.name)
}
inline void Path::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Path.name)
}
inline ::std::string* Path::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.Path.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Path.name)
}

// repeated .apollo.common.PathPoint path_point = 2;
inline int Path::path_point_size() const {
  return path_point_.size();
}
inline void Path::clear_path_point() {
  path_point_.Clear();
}
inline ::apollo::common::PathPoint* Path::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Path.path_point)
  return path_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
Path::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Path.path_point)
  return &path_point_;
}
inline const ::apollo::common::PathPoint& Path::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Path.path_point)
  return path_point_.Get(index);
}
inline ::apollo::common::PathPoint* Path::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Path.path_point)
  return path_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
Path::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Path.path_point)
  return path_point_;
}

// -------------------------------------------------------------------

// TrajectoryPoint

// optional .apollo.common.PathPoint path_point = 1;
inline bool TrajectoryPoint::has_path_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPoint::set_has_path_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPoint::clear_has_path_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPoint::clear_path_point() {
  if (path_point_ != NULL) path_point_->Clear();
  clear_has_path_point();
}
inline const ::apollo::common::PathPoint& TrajectoryPoint::_internal_path_point() const {
  return *path_point_;
}
inline const ::apollo::common::PathPoint& TrajectoryPoint::path_point() const {
  const ::apollo::common::PathPoint* p = path_point_;
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.path_point)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::PathPoint*>(
      &::apollo::common::_PathPoint_default_instance_);
}
inline ::apollo::common::PathPoint* TrajectoryPoint::release_path_point() {
  // @@protoc_insertion_point(field_release:apollo.common.TrajectoryPoint.path_point)
  clear_has_path_point();
  ::apollo::common::PathPoint* temp = path_point_;
  path_point_ = NULL;
  return temp;
}
inline ::apollo::common::PathPoint* TrajectoryPoint::mutable_path_point() {
  set_has_path_point();
  if (path_point_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::PathPoint>(GetArenaNoVirtual());
    path_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.TrajectoryPoint.path_point)
  return path_point_;
}
inline void TrajectoryPoint::set_allocated_path_point(::apollo::common::PathPoint* path_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_point_;
  }
  if (path_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    set_has_path_point();
  } else {
    clear_has_path_point();
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.TrajectoryPoint.path_point)
}

// optional double v = 2;
inline bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPoint::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.v)
  return v_;
}
inline void TrajectoryPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.v)
}

// optional double a = 3;
inline bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPoint::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.a)
  return a_;
}
inline void TrajectoryPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.a)
}

// optional double relative_time = 4;
inline bool TrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
inline double TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.relative_time)
  return relative_time_;
}
inline void TrajectoryPoint::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.relative_time)
}

// optional double da = 5;
inline bool TrajectoryPoint::has_da() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPoint::set_has_da() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
inline double TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.da)
  return da_;
}
inline void TrajectoryPoint::set_da(double value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.da)
}

// optional double steer = 6;
inline bool TrajectoryPoint::has_steer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryPoint::set_has_steer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryPoint::clear_has_steer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryPoint::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
inline double TrajectoryPoint::steer() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.steer)
  return steer_;
}
inline void TrajectoryPoint::set_steer(double value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.steer)
}

// optional .apollo.common.GaussianInfo gaussian_info = 7;
inline bool TrajectoryPoint::has_gaussian_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPoint::set_has_gaussian_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPoint::clear_has_gaussian_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPoint::clear_gaussian_info() {
  if (gaussian_info_ != NULL) gaussian_info_->Clear();
  clear_has_gaussian_info();
}
inline const ::apollo::common::GaussianInfo& TrajectoryPoint::_internal_gaussian_info() const {
  return *gaussian_info_;
}
inline const ::apollo::common::GaussianInfo& TrajectoryPoint::gaussian_info() const {
  const ::apollo::common::GaussianInfo* p = gaussian_info_;
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.gaussian_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::GaussianInfo*>(
      &::apollo::common::_GaussianInfo_default_instance_);
}
inline ::apollo::common::GaussianInfo* TrajectoryPoint::release_gaussian_info() {
  // @@protoc_insertion_point(field_release:apollo.common.TrajectoryPoint.gaussian_info)
  clear_has_gaussian_info();
  ::apollo::common::GaussianInfo* temp = gaussian_info_;
  gaussian_info_ = NULL;
  return temp;
}
inline ::apollo::common::GaussianInfo* TrajectoryPoint::mutable_gaussian_info() {
  set_has_gaussian_info();
  if (gaussian_info_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::GaussianInfo>(GetArenaNoVirtual());
    gaussian_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.TrajectoryPoint.gaussian_info)
  return gaussian_info_;
}
inline void TrajectoryPoint::set_allocated_gaussian_info(::apollo::common::GaussianInfo* gaussian_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gaussian_info_;
  }
  if (gaussian_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gaussian_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gaussian_info, submessage_arena);
    }
    set_has_gaussian_info();
  } else {
    clear_has_gaussian_info();
  }
  gaussian_info_ = gaussian_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.TrajectoryPoint.gaussian_info)
}

// -------------------------------------------------------------------

// Trajectory

// optional string name = 1;
inline bool Trajectory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Trajectory::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.Trajectory.name)
  return name_.GetNoArena();
}
inline void Trajectory::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Trajectory.name)
}
#if LANG_CXX11
inline void Trajectory::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Trajectory.name)
}
#endif
inline void Trajectory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Trajectory.name)
}
inline void Trajectory::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Trajectory.name)
}
inline ::std::string* Trajectory::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.Trajectory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trajectory::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.Trajectory.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Trajectory.name)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
inline int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
inline ::apollo::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Trajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::apollo::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_;
}

// -------------------------------------------------------------------

// VehicleMotionPoint

// optional .apollo.common.TrajectoryPoint trajectory_point = 1;
inline bool VehicleMotionPoint::has_trajectory_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleMotionPoint::set_has_trajectory_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleMotionPoint::clear_has_trajectory_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleMotionPoint::clear_trajectory_point() {
  if (trajectory_point_ != NULL) trajectory_point_->Clear();
  clear_has_trajectory_point();
}
inline const ::apollo::common::TrajectoryPoint& VehicleMotionPoint::_internal_trajectory_point() const {
  return *trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& VehicleMotionPoint::trajectory_point() const {
  const ::apollo::common::TrajectoryPoint* p = trajectory_point_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotionPoint.trajectory_point)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::TrajectoryPoint*>(
      &::apollo::common::_TrajectoryPoint_default_instance_);
}
inline ::apollo::common::TrajectoryPoint* VehicleMotionPoint::release_trajectory_point() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleMotionPoint.trajectory_point)
  clear_has_trajectory_point();
  ::apollo::common::TrajectoryPoint* temp = trajectory_point_;
  trajectory_point_ = NULL;
  return temp;
}
inline ::apollo::common::TrajectoryPoint* VehicleMotionPoint::mutable_trajectory_point() {
  set_has_trajectory_point();
  if (trajectory_point_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::TrajectoryPoint>(GetArenaNoVirtual());
    trajectory_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleMotionPoint.trajectory_point)
  return trajectory_point_;
}
inline void VehicleMotionPoint::set_allocated_trajectory_point(::apollo::common::TrajectoryPoint* trajectory_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trajectory_point_;
  }
  if (trajectory_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trajectory_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory_point, submessage_arena);
    }
    set_has_trajectory_point();
  } else {
    clear_has_trajectory_point();
  }
  trajectory_point_ = trajectory_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleMotionPoint.trajectory_point)
}

// optional double steer = 2;
inline bool VehicleMotionPoint::has_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleMotionPoint::set_has_steer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleMotionPoint::clear_has_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleMotionPoint::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
inline double VehicleMotionPoint::steer() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotionPoint.steer)
  return steer_;
}
inline void VehicleMotionPoint::set_steer(double value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleMotionPoint.steer)
}

// -------------------------------------------------------------------

// VehicleMotion

// optional string name = 1;
inline bool VehicleMotion::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleMotion::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleMotion::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleMotion::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VehicleMotion::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotion.name)
  return name_.GetNoArena();
}
inline void VehicleMotion::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleMotion.name)
}
#if LANG_CXX11
inline void VehicleMotion::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleMotion.name)
}
#endif
inline void VehicleMotion::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleMotion.name)
}
inline void VehicleMotion::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleMotion.name)
}
inline ::std::string* VehicleMotion::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleMotion.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleMotion::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleMotion.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleMotion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleMotion.name)
}

// repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
inline int VehicleMotion::vehicle_motion_point_size() const {
  return vehicle_motion_point_.size();
}
inline void VehicleMotion::clear_vehicle_motion_point() {
  vehicle_motion_point_.Clear();
}
inline ::apollo::common::VehicleMotionPoint* VehicleMotion::mutable_vehicle_motion_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint >*
VehicleMotion::mutable_vehicle_motion_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.VehicleMotion.vehicle_motion_point)
  return &vehicle_motion_point_;
}
inline const ::apollo::common::VehicleMotionPoint& VehicleMotion::vehicle_motion_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Get(index);
}
inline ::apollo::common::VehicleMotionPoint* VehicleMotion::add_vehicle_motion_point() {
  // @@protoc_insertion_point(field_add:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint >&
VehicleMotion::vehicle_motion_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_;
}

// -------------------------------------------------------------------

// GaussianInfo

// optional double sigma_x = 1;
inline bool GaussianInfo::has_sigma_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaussianInfo::set_has_sigma_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GaussianInfo::clear_has_sigma_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GaussianInfo::clear_sigma_x() {
  sigma_x_ = 0;
  clear_has_sigma_x();
}
inline double GaussianInfo::sigma_x() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.sigma_x)
  return sigma_x_;
}
inline void GaussianInfo::set_sigma_x(double value) {
  set_has_sigma_x();
  sigma_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.sigma_x)
}

// optional double sigma_y = 2;
inline bool GaussianInfo::has_sigma_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GaussianInfo::set_has_sigma_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GaussianInfo::clear_has_sigma_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GaussianInfo::clear_sigma_y() {
  sigma_y_ = 0;
  clear_has_sigma_y();
}
inline double GaussianInfo::sigma_y() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.sigma_y)
  return sigma_y_;
}
inline void GaussianInfo::set_sigma_y(double value) {
  set_has_sigma_y();
  sigma_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.sigma_y)
}

// optional double correlation = 3;
inline bool GaussianInfo::has_correlation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GaussianInfo::set_has_correlation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GaussianInfo::clear_has_correlation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GaussianInfo::clear_correlation() {
  correlation_ = 0;
  clear_has_correlation();
}
inline double GaussianInfo::correlation() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.correlation)
  return correlation_;
}
inline void GaussianInfo::set_correlation(double value) {
  set_has_correlation();
  correlation_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.correlation)
}

// optional double area_probability = 4;
inline bool GaussianInfo::has_area_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GaussianInfo::set_has_area_probability() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GaussianInfo::clear_has_area_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GaussianInfo::clear_area_probability() {
  area_probability_ = 0;
  clear_has_area_probability();
}
inline double GaussianInfo::area_probability() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.area_probability)
  return area_probability_;
}
inline void GaussianInfo::set_area_probability(double value) {
  set_has_area_probability();
  area_probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.area_probability)
}

// optional double ellipse_a = 5;
inline bool GaussianInfo::has_ellipse_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GaussianInfo::set_has_ellipse_a() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GaussianInfo::clear_has_ellipse_a() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GaussianInfo::clear_ellipse_a() {
  ellipse_a_ = 0;
  clear_has_ellipse_a();
}
inline double GaussianInfo::ellipse_a() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.ellipse_a)
  return ellipse_a_;
}
inline void GaussianInfo::set_ellipse_a(double value) {
  set_has_ellipse_a();
  ellipse_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.ellipse_a)
}

// optional double ellipse_b = 6;
inline bool GaussianInfo::has_ellipse_b() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GaussianInfo::set_has_ellipse_b() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GaussianInfo::clear_has_ellipse_b() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GaussianInfo::clear_ellipse_b() {
  ellipse_b_ = 0;
  clear_has_ellipse_b();
}
inline double GaussianInfo::ellipse_b() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.ellipse_b)
  return ellipse_b_;
}
inline void GaussianInfo::set_ellipse_b(double value) {
  set_has_ellipse_b();
  ellipse_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.ellipse_b)
}

// optional double theta_a = 7;
inline bool GaussianInfo::has_theta_a() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GaussianInfo::set_has_theta_a() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GaussianInfo::clear_has_theta_a() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GaussianInfo::clear_theta_a() {
  theta_a_ = 0;
  clear_has_theta_a();
}
inline double GaussianInfo::theta_a() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.theta_a)
  return theta_a_;
}
inline void GaussianInfo::set_theta_a(double value) {
  set_has_theta_a();
  theta_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.theta_a)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pnc_5fpoint_2eproto

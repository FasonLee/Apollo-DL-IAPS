// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#ifndef PROTOBUF_INCLUDED_vehicle_5fconfig_2eproto
#define PROTOBUF_INCLUDED_vehicle_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fconfig_2eproto 

namespace protobuf_vehicle_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vehicle_5fconfig_2eproto
namespace apollo {
namespace common {
class Extrinsics;
class ExtrinsicsDefaultTypeInternal;
extern ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;
class LatencyParam;
class LatencyParamDefaultTypeInternal;
extern LatencyParamDefaultTypeInternal _LatencyParam_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class VehicleConfig;
class VehicleConfigDefaultTypeInternal;
extern VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::common::Extrinsics* Arena::CreateMaybeMessage<::apollo::common::Extrinsics>(Arena*);
template<> ::apollo::common::LatencyParam* Arena::CreateMaybeMessage<::apollo::common::LatencyParam>(Arena*);
template<> ::apollo::common::Transform* Arena::CreateMaybeMessage<::apollo::common::Transform>(Arena*);
template<> ::apollo::common::VehicleConfig* Arena::CreateMaybeMessage<::apollo::common::VehicleConfig>(Arena*);
template<> ::apollo::common::VehicleParam* Arena::CreateMaybeMessage<::apollo::common::VehicleParam>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace common {

enum VehicleBrand {
  LINCOLN_MKZ = 0,
  GEM = 1,
  LEXUS = 2,
  TRANSIT = 3,
  GE3 = 4,
  WEY = 5,
  ZHONGYUN = 6,
  CH = 7,
  DKIT = 8,
  NEOLIX = 9
};
bool VehicleBrand_IsValid(int value);
const VehicleBrand VehicleBrand_MIN = LINCOLN_MKZ;
const VehicleBrand VehicleBrand_MAX = NEOLIX;
const int VehicleBrand_ARRAYSIZE = VehicleBrand_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleBrand_descriptor();
inline const ::std::string& VehicleBrand_Name(VehicleBrand value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleBrand_descriptor(), value);
}
inline bool VehicleBrand_Parse(
    const ::std::string& name, VehicleBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleBrand>(
    VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class Transform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Transform* other);
  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(NULL);
  }

  Transform* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes source_frame = 1;
  bool has_source_frame() const;
  void clear_source_frame();
  static const int kSourceFrameFieldNumber = 1;
  const ::std::string& source_frame() const;
  void set_source_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_source_frame(::std::string&& value);
  #endif
  void set_source_frame(const char* value);
  void set_source_frame(const void* value, size_t size);
  ::std::string* mutable_source_frame();
  ::std::string* release_source_frame();
  void set_allocated_source_frame(::std::string* source_frame);

  // optional bytes target_frame = 2;
  bool has_target_frame() const;
  void clear_target_frame();
  static const int kTargetFrameFieldNumber = 2;
  const ::std::string& target_frame() const;
  void set_target_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_target_frame(::std::string&& value);
  #endif
  void set_target_frame(const char* value);
  void set_target_frame(const void* value, size_t size);
  ::std::string* mutable_target_frame();
  ::std::string* release_target_frame();
  void set_allocated_target_frame(::std::string* target_frame);

  // @@protoc_insertion_point(class_scope:apollo.common.Transform)
 private:
  void set_has_source_frame();
  void clear_has_source_frame();
  void set_has_target_frame();
  void clear_has_target_frame();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_frame_;
  ::google::protobuf::internal::ArenaStringPtr target_frame_;
  friend struct ::protobuf_vehicle_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Extrinsics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.Extrinsics) */ {
 public:
  Extrinsics();
  virtual ~Extrinsics();

  Extrinsics(const Extrinsics& from);

  inline Extrinsics& operator=(const Extrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Extrinsics(Extrinsics&& from) noexcept
    : Extrinsics() {
    *this = ::std::move(from);
  }

  inline Extrinsics& operator=(Extrinsics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Extrinsics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extrinsics* internal_default_instance() {
    return reinterpret_cast<const Extrinsics*>(
               &_Extrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Extrinsics* other);
  friend void swap(Extrinsics& a, Extrinsics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Extrinsics* New() const final {
    return CreateMaybeMessage<Extrinsics>(NULL);
  }

  Extrinsics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Extrinsics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Extrinsics& from);
  void MergeFrom(const Extrinsics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extrinsics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.Transform tansforms = 1;
  int tansforms_size() const;
  void clear_tansforms();
  static const int kTansformsFieldNumber = 1;
  ::apollo::common::Transform* mutable_tansforms(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >*
      mutable_tansforms();
  const ::apollo::common::Transform& tansforms(int index) const;
  ::apollo::common::Transform* add_tansforms();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >&
      tansforms() const;

  // @@protoc_insertion_point(class_scope:apollo.common.Extrinsics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform > tansforms_;
  friend struct ::protobuf_vehicle_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatencyParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyParam) */ {
 public:
  LatencyParam();
  virtual ~LatencyParam();

  LatencyParam(const LatencyParam& from);

  inline LatencyParam& operator=(const LatencyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyParam(LatencyParam&& from) noexcept
    : LatencyParam() {
    *this = ::std::move(from);
  }

  inline LatencyParam& operator=(LatencyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyParam* internal_default_instance() {
    return reinterpret_cast<const LatencyParam*>(
               &_LatencyParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LatencyParam* other);
  friend void swap(LatencyParam& a, LatencyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyParam* New() const final {
    return CreateMaybeMessage<LatencyParam>(NULL);
  }

  LatencyParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyParam& from);
  void MergeFrom(const LatencyParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double dead_time = 1;
  bool has_dead_time() const;
  void clear_dead_time();
  static const int kDeadTimeFieldNumber = 1;
  double dead_time() const;
  void set_dead_time(double value);

  // optional double rise_time = 2;
  bool has_rise_time() const;
  void clear_rise_time();
  static const int kRiseTimeFieldNumber = 2;
  double rise_time() const;
  void set_rise_time(double value);

  // optional double peak_time = 3;
  bool has_peak_time() const;
  void clear_peak_time();
  static const int kPeakTimeFieldNumber = 3;
  double peak_time() const;
  void set_peak_time(double value);

  // optional double settling_time = 4;
  bool has_settling_time() const;
  void clear_settling_time();
  static const int kSettlingTimeFieldNumber = 4;
  double settling_time() const;
  void set_settling_time(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyParam)
 private:
  void set_has_dead_time();
  void clear_has_dead_time();
  void set_has_rise_time();
  void clear_has_rise_time();
  void set_has_peak_time();
  void clear_has_peak_time();
  void set_has_settling_time();
  void clear_has_settling_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double dead_time_;
  double rise_time_;
  double peak_time_;
  double settling_time_;
  friend struct ::protobuf_vehicle_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VehicleParam* other);
  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(NULL);
  }

  VehicleParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.LatencyParam steering_latency_param = 22;
  bool has_steering_latency_param() const;
  void clear_steering_latency_param();
  static const int kSteeringLatencyParamFieldNumber = 22;
  private:
  const ::apollo::common::LatencyParam& _internal_steering_latency_param() const;
  public:
  const ::apollo::common::LatencyParam& steering_latency_param() const;
  ::apollo::common::LatencyParam* release_steering_latency_param();
  ::apollo::common::LatencyParam* mutable_steering_latency_param();
  void set_allocated_steering_latency_param(::apollo::common::LatencyParam* steering_latency_param);

  // optional .apollo.common.LatencyParam throttle_latency_param = 23;
  bool has_throttle_latency_param() const;
  void clear_throttle_latency_param();
  static const int kThrottleLatencyParamFieldNumber = 23;
  private:
  const ::apollo::common::LatencyParam& _internal_throttle_latency_param() const;
  public:
  const ::apollo::common::LatencyParam& throttle_latency_param() const;
  ::apollo::common::LatencyParam* release_throttle_latency_param();
  ::apollo::common::LatencyParam* mutable_throttle_latency_param();
  void set_allocated_throttle_latency_param(::apollo::common::LatencyParam* throttle_latency_param);

  // optional .apollo.common.LatencyParam brake_latency_param = 24;
  bool has_brake_latency_param() const;
  void clear_brake_latency_param();
  static const int kBrakeLatencyParamFieldNumber = 24;
  private:
  const ::apollo::common::LatencyParam& _internal_brake_latency_param() const;
  public:
  const ::apollo::common::LatencyParam& brake_latency_param() const;
  ::apollo::common::LatencyParam* release_brake_latency_param();
  ::apollo::common::LatencyParam* mutable_brake_latency_param();
  void set_allocated_brake_latency_param(::apollo::common::LatencyParam* brake_latency_param);

  // optional .apollo.common.VehicleBrand brand = 1;
  bool has_brand() const;
  void clear_brand();
  static const int kBrandFieldNumber = 1;
  ::apollo::common::VehicleBrand brand() const;
  void set_brand(::apollo::common::VehicleBrand value);

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  bool has_max_abs_speed_when_stopped() const;
  void clear_max_abs_speed_when_stopped();
  static const int kMaxAbsSpeedWhenStoppedFieldNumber = 19;
  float max_abs_speed_when_stopped() const;
  void set_max_abs_speed_when_stopped(float value);

  // optional double front_edge_to_center = 3 [default = nan];
  bool has_front_edge_to_center() const;
  void clear_front_edge_to_center();
  static const int kFrontEdgeToCenterFieldNumber = 3;
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);

  // optional double back_edge_to_center = 4 [default = nan];
  bool has_back_edge_to_center() const;
  void clear_back_edge_to_center();
  static const int kBackEdgeToCenterFieldNumber = 4;
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);

  // optional double left_edge_to_center = 5 [default = nan];
  bool has_left_edge_to_center() const;
  void clear_left_edge_to_center();
  static const int kLeftEdgeToCenterFieldNumber = 5;
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);

  // optional double right_edge_to_center = 6 [default = nan];
  bool has_right_edge_to_center() const;
  void clear_right_edge_to_center();
  static const int kRightEdgeToCenterFieldNumber = 6;
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);

  // optional double length = 7 [default = nan];
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 7;
  double length() const;
  void set_length(double value);

  // optional double width = 8 [default = nan];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  double width() const;
  void set_width(double value);

  // optional double height = 9 [default = nan];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  double height() const;
  void set_height(double value);

  // optional double min_turn_radius = 10 [default = nan];
  bool has_min_turn_radius() const;
  void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 10;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  // optional double max_acceleration = 11 [default = nan];
  bool has_max_acceleration() const;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 11;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // optional double max_deceleration = 12 [default = nan];
  bool has_max_deceleration() const;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 12;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // optional double max_steer_angle = 13 [default = nan];
  bool has_max_steer_angle() const;
  void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 13;
  double max_steer_angle() const;
  void set_max_steer_angle(double value);

  // optional double max_steer_angle_rate = 14 [default = nan];
  bool has_max_steer_angle_rate() const;
  void clear_max_steer_angle_rate();
  static const int kMaxSteerAngleRateFieldNumber = 14;
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);

  // optional double min_steer_angle_rate = 15 [default = nan];
  bool has_min_steer_angle_rate() const;
  void clear_min_steer_angle_rate();
  static const int kMinSteerAngleRateFieldNumber = 15;
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);

  // optional double steer_ratio = 16 [default = nan];
  bool has_steer_ratio() const;
  void clear_steer_ratio();
  static const int kSteerRatioFieldNumber = 16;
  double steer_ratio() const;
  void set_steer_ratio(double value);

  // optional double wheel_base = 17 [default = nan];
  bool has_wheel_base() const;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 17;
  double wheel_base() const;
  void set_wheel_base(double value);

  // optional double wheel_rolling_radius = 18 [default = nan];
  bool has_wheel_rolling_radius() const;
  void clear_wheel_rolling_radius();
  static const int kWheelRollingRadiusFieldNumber = 18;
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);

  // optional double brake_deadzone = 20 [default = nan];
  bool has_brake_deadzone() const;
  void clear_brake_deadzone();
  static const int kBrakeDeadzoneFieldNumber = 20;
  double brake_deadzone() const;
  void set_brake_deadzone(double value);

  // optional double throttle_deadzone = 21 [default = nan];
  bool has_throttle_deadzone() const;
  void clear_throttle_deadzone();
  static const int kThrottleDeadzoneFieldNumber = 21;
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleParam)
 private:
  void set_has_brand();
  void clear_has_brand();
  void set_has_front_edge_to_center();
  void clear_has_front_edge_to_center();
  void set_has_back_edge_to_center();
  void clear_has_back_edge_to_center();
  void set_has_left_edge_to_center();
  void clear_has_left_edge_to_center();
  void set_has_right_edge_to_center();
  void clear_has_right_edge_to_center();
  void set_has_length();
  void clear_has_length();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_min_turn_radius();
  void clear_has_min_turn_radius();
  void set_has_max_acceleration();
  void clear_has_max_acceleration();
  void set_has_max_deceleration();
  void clear_has_max_deceleration();
  void set_has_max_steer_angle();
  void clear_has_max_steer_angle();
  void set_has_max_steer_angle_rate();
  void clear_has_max_steer_angle_rate();
  void set_has_min_steer_angle_rate();
  void clear_has_min_steer_angle_rate();
  void set_has_steer_ratio();
  void clear_has_steer_ratio();
  void set_has_wheel_base();
  void clear_has_wheel_base();
  void set_has_wheel_rolling_radius();
  void clear_has_wheel_rolling_radius();
  void set_has_max_abs_speed_when_stopped();
  void clear_has_max_abs_speed_when_stopped();
  void set_has_brake_deadzone();
  void clear_has_brake_deadzone();
  void set_has_throttle_deadzone();
  void clear_has_throttle_deadzone();
  void set_has_steering_latency_param();
  void clear_has_steering_latency_param();
  void set_has_throttle_latency_param();
  void clear_has_throttle_latency_param();
  void set_has_brake_latency_param();
  void clear_has_brake_latency_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::LatencyParam* steering_latency_param_;
  ::apollo::common::LatencyParam* throttle_latency_param_;
  ::apollo::common::LatencyParam* brake_latency_param_;
  int brand_;
  float max_abs_speed_when_stopped_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  double brake_deadzone_;
  double throttle_deadzone_;
  friend struct ::protobuf_vehicle_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleConfig) */ {
 public:
  VehicleConfig();
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleConfig(VehicleConfig&& from) noexcept
    : VehicleConfig() {
    *this = ::std::move(from);
  }

  inline VehicleConfig& operator=(VehicleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleConfig*>(
               &_VehicleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(VehicleConfig* other);
  friend void swap(VehicleConfig& a, VehicleConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleConfig* New() const final {
    return CreateMaybeMessage<VehicleConfig>(NULL);
  }

  VehicleConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  bool has_vehicle_param() const;
  void clear_vehicle_param();
  static const int kVehicleParamFieldNumber = 2;
  private:
  const ::apollo::common::VehicleParam& _internal_vehicle_param() const;
  public:
  const ::apollo::common::VehicleParam& vehicle_param() const;
  ::apollo::common::VehicleParam* release_vehicle_param();
  ::apollo::common::VehicleParam* mutable_vehicle_param();
  void set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param);

  // optional .apollo.common.Extrinsics extrinsics = 3;
  bool has_extrinsics() const;
  void clear_extrinsics();
  static const int kExtrinsicsFieldNumber = 3;
  private:
  const ::apollo::common::Extrinsics& _internal_extrinsics() const;
  public:
  const ::apollo::common::Extrinsics& extrinsics() const;
  ::apollo::common::Extrinsics* release_extrinsics();
  ::apollo::common::Extrinsics* mutable_extrinsics();
  void set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleConfig)
 private:
  void set_has_vehicle_param();
  void clear_has_vehicle_param();
  void set_has_extrinsics();
  void clear_has_extrinsics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::VehicleParam* vehicle_param_;
  ::apollo::common::Extrinsics* extrinsics_;
  friend struct ::protobuf_vehicle_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transform

// optional bytes source_frame = 1;
inline bool Transform::has_source_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transform::set_has_source_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transform::clear_has_source_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transform::clear_source_frame() {
  source_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_frame();
}
inline const ::std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.source_frame)
  return source_frame_.GetNoArena();
}
inline void Transform::set_source_frame(const ::std::string& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.source_frame)
}
#if LANG_CXX11
inline void Transform::set_source_frame(::std::string&& value) {
  set_has_source_frame();
  source_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Transform.source_frame)
}
#endif
inline void Transform::set_source_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.source_frame)
}
inline void Transform::set_source_frame(const void* value, size_t size) {
  set_has_source_frame();
  source_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.source_frame)
}
inline ::std::string* Transform::mutable_source_frame() {
  set_has_source_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.source_frame)
  return source_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.source_frame)
  if (!has_source_frame()) {
    return NULL;
  }
  clear_has_source_frame();
  return source_frame_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_source_frame(::std::string* source_frame) {
  if (source_frame != NULL) {
    set_has_source_frame();
  } else {
    clear_has_source_frame();
  }
  source_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
inline bool Transform::has_target_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transform::set_has_target_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transform::clear_has_target_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transform::clear_target_frame() {
  target_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_frame();
}
inline const ::std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.target_frame)
  return target_frame_.GetNoArena();
}
inline void Transform::set_target_frame(const ::std::string& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.target_frame)
}
#if LANG_CXX11
inline void Transform::set_target_frame(::std::string&& value) {
  set_has_target_frame();
  target_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Transform.target_frame)
}
#endif
inline void Transform::set_target_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.target_frame)
}
inline void Transform::set_target_frame(const void* value, size_t size) {
  set_has_target_frame();
  target_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.target_frame)
}
inline ::std::string* Transform::mutable_target_frame() {
  set_has_target_frame();
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.target_frame)
  return target_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.target_frame)
  if (!has_target_frame()) {
    return NULL;
  }
  clear_has_target_frame();
  return target_frame_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_target_frame(::std::string* target_frame) {
  if (target_frame != NULL) {
    set_has_target_frame();
  } else {
    clear_has_target_frame();
  }
  target_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.target_frame)
}

// -------------------------------------------------------------------

// Extrinsics

// repeated .apollo.common.Transform tansforms = 1;
inline int Extrinsics::tansforms_size() const {
  return tansforms_.size();
}
inline void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
inline ::apollo::common::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Extrinsics.tansforms)
  return &tansforms_;
}
inline const ::apollo::common::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Extrinsics.tansforms)
  return tansforms_.Get(index);
}
inline ::apollo::common::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:apollo.common.Extrinsics.tansforms)
  return tansforms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:apollo.common.Extrinsics.tansforms)
  return tansforms_;
}

// -------------------------------------------------------------------

// LatencyParam

// optional double dead_time = 1;
inline bool LatencyParam::has_dead_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyParam::set_has_dead_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyParam::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyParam::clear_dead_time() {
  dead_time_ = 0;
  clear_has_dead_time();
}
inline double LatencyParam::dead_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.dead_time)
  return dead_time_;
}
inline void LatencyParam::set_dead_time(double value) {
  set_has_dead_time();
  dead_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.dead_time)
}

// optional double rise_time = 2;
inline bool LatencyParam::has_rise_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyParam::set_has_rise_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyParam::clear_has_rise_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyParam::clear_rise_time() {
  rise_time_ = 0;
  clear_has_rise_time();
}
inline double LatencyParam::rise_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.rise_time)
  return rise_time_;
}
inline void LatencyParam::set_rise_time(double value) {
  set_has_rise_time();
  rise_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.rise_time)
}

// optional double peak_time = 3;
inline bool LatencyParam::has_peak_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatencyParam::set_has_peak_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatencyParam::clear_has_peak_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatencyParam::clear_peak_time() {
  peak_time_ = 0;
  clear_has_peak_time();
}
inline double LatencyParam::peak_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.peak_time)
  return peak_time_;
}
inline void LatencyParam::set_peak_time(double value) {
  set_has_peak_time();
  peak_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.peak_time)
}

// optional double settling_time = 4;
inline bool LatencyParam::has_settling_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LatencyParam::set_has_settling_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LatencyParam::clear_has_settling_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LatencyParam::clear_settling_time() {
  settling_time_ = 0;
  clear_has_settling_time();
}
inline double LatencyParam::settling_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyParam.settling_time)
  return settling_time_;
}
inline void LatencyParam::set_settling_time(double value) {
  set_has_settling_time();
  settling_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyParam.settling_time)
}

// -------------------------------------------------------------------

// VehicleParam

// optional .apollo.common.VehicleBrand brand = 1;
inline bool VehicleParam::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleParam::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleParam::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleParam::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
inline ::apollo::common::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brand)
  return static_cast< ::apollo::common::VehicleBrand >(brand_);
}
inline void VehicleParam::set_brand(::apollo::common::VehicleBrand value) {
  assert(::apollo::common::VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brand)
}

// optional double front_edge_to_center = 3 [default = nan];
inline bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleParam::set_has_front_edge_to_center() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleParam::clear_has_front_edge_to_center() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_front_edge_to_center();
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  set_has_front_edge_to_center();
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 4 [default = nan];
inline bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleParam::set_has_back_edge_to_center() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleParam::clear_has_back_edge_to_center() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_back_edge_to_center();
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  set_has_back_edge_to_center();
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 5 [default = nan];
inline bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleParam::set_has_left_edge_to_center() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleParam::clear_has_left_edge_to_center() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_left_edge_to_center();
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  set_has_left_edge_to_center();
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 6 [default = nan];
inline bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleParam::set_has_right_edge_to_center() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleParam::clear_has_right_edge_to_center() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_right_edge_to_center();
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  set_has_right_edge_to_center();
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.right_edge_to_center)
}

// optional double length = 7 [default = nan];
inline bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleParam::set_has_length() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleParam::clear_has_length() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleParam::clear_length() {
  length_ = ::google::protobuf::internal::NaN();
  clear_has_length();
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.length)
  return length_;
}
inline void VehicleParam::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.length)
}

// optional double width = 8 [default = nan];
inline bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleParam::set_has_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleParam::clear_width() {
  width_ = ::google::protobuf::internal::NaN();
  clear_has_width();
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.width)
  return width_;
}
inline void VehicleParam::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.width)
}

// optional double height = 9 [default = nan];
inline bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleParam::set_has_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleParam::clear_height() {
  height_ = ::google::protobuf::internal::NaN();
  clear_has_height();
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.height)
  return height_;
}
inline void VehicleParam::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.height)
}

// optional double min_turn_radius = 10 [default = nan];
inline bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleParam::set_has_min_turn_radius() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleParam::clear_has_min_turn_radius() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = ::google::protobuf::internal::NaN();
  clear_has_min_turn_radius();
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  set_has_min_turn_radius();
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 11 [default = nan];
inline bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleParam::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleParam::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = ::google::protobuf::internal::NaN();
  clear_has_max_acceleration();
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_acceleration)
  return max_acceleration_;
}
inline void VehicleParam::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 12 [default = nan];
inline bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleParam::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VehicleParam::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = ::google::protobuf::internal::NaN();
  clear_has_max_deceleration();
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_deceleration)
  return max_deceleration_;
}
inline void VehicleParam::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 13 [default = nan];
inline bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleParam::set_has_max_steer_angle() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VehicleParam::clear_has_max_steer_angle() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = ::google::protobuf::internal::NaN();
  clear_has_max_steer_angle();
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  set_has_max_steer_angle();
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 14 [default = nan];
inline bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VehicleParam::set_has_max_steer_angle_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VehicleParam::clear_has_max_steer_angle_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  clear_has_max_steer_angle_rate();
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  set_has_max_steer_angle_rate();
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 15 [default = nan];
inline bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VehicleParam::set_has_min_steer_angle_rate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VehicleParam::clear_has_min_steer_angle_rate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  clear_has_min_steer_angle_rate();
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  set_has_min_steer_angle_rate();
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 16 [default = nan];
inline bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VehicleParam::set_has_steer_ratio() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VehicleParam::clear_has_steer_ratio() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = ::google::protobuf::internal::NaN();
  clear_has_steer_ratio();
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steer_ratio)
  return steer_ratio_;
}
inline void VehicleParam::set_steer_ratio(double value) {
  set_has_steer_ratio();
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.steer_ratio)
}

// optional double wheel_base = 17 [default = nan];
inline bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VehicleParam::set_has_wheel_base() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VehicleParam::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = ::google::protobuf::internal::NaN();
  clear_has_wheel_base();
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_base)
  return wheel_base_;
}
inline void VehicleParam::set_wheel_base(double value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 18 [default = nan];
inline bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VehicleParam::set_has_wheel_rolling_radius() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VehicleParam::clear_has_wheel_rolling_radius() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
  clear_has_wheel_rolling_radius();
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  set_has_wheel_rolling_radius();
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 19 [default = nan];
inline bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleParam::set_has_max_abs_speed_when_stopped() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleParam::clear_has_max_abs_speed_when_stopped() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_max_abs_speed_when_stopped();
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  set_has_max_abs_speed_when_stopped();
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_abs_speed_when_stopped)
}

// optional double brake_deadzone = 20 [default = nan];
inline bool VehicleParam::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VehicleParam::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VehicleParam::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VehicleParam::clear_brake_deadzone() {
  brake_deadzone_ = ::google::protobuf::internal::NaN();
  clear_has_brake_deadzone();
}
inline double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brake_deadzone)
  return brake_deadzone_;
}
inline void VehicleParam::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brake_deadzone)
}

// optional double throttle_deadzone = 21 [default = nan];
inline bool VehicleParam::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VehicleParam::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VehicleParam::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VehicleParam::clear_throttle_deadzone() {
  throttle_deadzone_ = ::google::protobuf::internal::NaN();
  clear_has_throttle_deadzone();
}
inline double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.throttle_deadzone)
  return throttle_deadzone_;
}
inline void VehicleParam::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.throttle_deadzone)
}

// optional .apollo.common.LatencyParam steering_latency_param = 22;
inline bool VehicleParam::has_steering_latency_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleParam::set_has_steering_latency_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleParam::clear_has_steering_latency_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleParam::clear_steering_latency_param() {
  if (steering_latency_param_ != NULL) steering_latency_param_->Clear();
  clear_has_steering_latency_param();
}
inline const ::apollo::common::LatencyParam& VehicleParam::_internal_steering_latency_param() const {
  return *steering_latency_param_;
}
inline const ::apollo::common::LatencyParam& VehicleParam::steering_latency_param() const {
  const ::apollo::common::LatencyParam* p = steering_latency_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steering_latency_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyParam*>(
      &::apollo::common::_LatencyParam_default_instance_);
}
inline ::apollo::common::LatencyParam* VehicleParam::release_steering_latency_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.steering_latency_param)
  clear_has_steering_latency_param();
  ::apollo::common::LatencyParam* temp = steering_latency_param_;
  steering_latency_param_ = NULL;
  return temp;
}
inline ::apollo::common::LatencyParam* VehicleParam::mutable_steering_latency_param() {
  set_has_steering_latency_param();
  if (steering_latency_param_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyParam>(GetArenaNoVirtual());
    steering_latency_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.steering_latency_param)
  return steering_latency_param_;
}
inline void VehicleParam::set_allocated_steering_latency_param(::apollo::common::LatencyParam* steering_latency_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete steering_latency_param_;
  }
  if (steering_latency_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      steering_latency_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, steering_latency_param, submessage_arena);
    }
    set_has_steering_latency_param();
  } else {
    clear_has_steering_latency_param();
  }
  steering_latency_param_ = steering_latency_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.steering_latency_param)
}

// optional .apollo.common.LatencyParam throttle_latency_param = 23;
inline bool VehicleParam::has_throttle_latency_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleParam::set_has_throttle_latency_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleParam::clear_has_throttle_latency_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleParam::clear_throttle_latency_param() {
  if (throttle_latency_param_ != NULL) throttle_latency_param_->Clear();
  clear_has_throttle_latency_param();
}
inline const ::apollo::common::LatencyParam& VehicleParam::_internal_throttle_latency_param() const {
  return *throttle_latency_param_;
}
inline const ::apollo::common::LatencyParam& VehicleParam::throttle_latency_param() const {
  const ::apollo::common::LatencyParam* p = throttle_latency_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.throttle_latency_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyParam*>(
      &::apollo::common::_LatencyParam_default_instance_);
}
inline ::apollo::common::LatencyParam* VehicleParam::release_throttle_latency_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.throttle_latency_param)
  clear_has_throttle_latency_param();
  ::apollo::common::LatencyParam* temp = throttle_latency_param_;
  throttle_latency_param_ = NULL;
  return temp;
}
inline ::apollo::common::LatencyParam* VehicleParam::mutable_throttle_latency_param() {
  set_has_throttle_latency_param();
  if (throttle_latency_param_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyParam>(GetArenaNoVirtual());
    throttle_latency_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.throttle_latency_param)
  return throttle_latency_param_;
}
inline void VehicleParam::set_allocated_throttle_latency_param(::apollo::common::LatencyParam* throttle_latency_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete throttle_latency_param_;
  }
  if (throttle_latency_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      throttle_latency_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, throttle_latency_param, submessage_arena);
    }
    set_has_throttle_latency_param();
  } else {
    clear_has_throttle_latency_param();
  }
  throttle_latency_param_ = throttle_latency_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.throttle_latency_param)
}

// optional .apollo.common.LatencyParam brake_latency_param = 24;
inline bool VehicleParam::has_brake_latency_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleParam::set_has_brake_latency_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleParam::clear_has_brake_latency_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleParam::clear_brake_latency_param() {
  if (brake_latency_param_ != NULL) brake_latency_param_->Clear();
  clear_has_brake_latency_param();
}
inline const ::apollo::common::LatencyParam& VehicleParam::_internal_brake_latency_param() const {
  return *brake_latency_param_;
}
inline const ::apollo::common::LatencyParam& VehicleParam::brake_latency_param() const {
  const ::apollo::common::LatencyParam* p = brake_latency_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brake_latency_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyParam*>(
      &::apollo::common::_LatencyParam_default_instance_);
}
inline ::apollo::common::LatencyParam* VehicleParam::release_brake_latency_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.brake_latency_param)
  clear_has_brake_latency_param();
  ::apollo::common::LatencyParam* temp = brake_latency_param_;
  brake_latency_param_ = NULL;
  return temp;
}
inline ::apollo::common::LatencyParam* VehicleParam::mutable_brake_latency_param() {
  set_has_brake_latency_param();
  if (brake_latency_param_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyParam>(GetArenaNoVirtual());
    brake_latency_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.brake_latency_param)
  return brake_latency_param_;
}
inline void VehicleParam::set_allocated_brake_latency_param(::apollo::common::LatencyParam* brake_latency_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete brake_latency_param_;
  }
  if (brake_latency_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brake_latency_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brake_latency_param, submessage_arena);
    }
    set_has_brake_latency_param();
  } else {
    clear_has_brake_latency_param();
  }
  brake_latency_param_ = brake_latency_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.brake_latency_param)
}

// -------------------------------------------------------------------

// VehicleConfig

// optional .apollo.common.VehicleParam vehicle_param = 2;
inline bool VehicleConfig::has_vehicle_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleConfig::set_has_vehicle_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleConfig::clear_has_vehicle_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleConfig::clear_vehicle_param() {
  if (vehicle_param_ != NULL) vehicle_param_->Clear();
  clear_has_vehicle_param();
}
inline const ::apollo::common::VehicleParam& VehicleConfig::_internal_vehicle_param() const {
  return *vehicle_param_;
}
inline const ::apollo::common::VehicleParam& VehicleConfig::vehicle_param() const {
  const ::apollo::common::VehicleParam* p = vehicle_param_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.vehicle_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::VehicleParam*>(
      &::apollo::common::_VehicleParam_default_instance_);
}
inline ::apollo::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.vehicle_param)
  clear_has_vehicle_param();
  ::apollo::common::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = NULL;
  return temp;
}
inline ::apollo::common::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  set_has_vehicle_param();
  if (vehicle_param_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::VehicleParam>(GetArenaNoVirtual());
    vehicle_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.vehicle_param)
  return vehicle_param_;
}
inline void VehicleConfig::set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vehicle_param_;
  }
  if (vehicle_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_param, submessage_arena);
    }
    set_has_vehicle_param();
  } else {
    clear_has_vehicle_param();
  }
  vehicle_param_ = vehicle_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.vehicle_param)
}

// optional .apollo.common.Extrinsics extrinsics = 3;
inline bool VehicleConfig::has_extrinsics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleConfig::set_has_extrinsics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleConfig::clear_has_extrinsics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleConfig::clear_extrinsics() {
  if (extrinsics_ != NULL) extrinsics_->Clear();
  clear_has_extrinsics();
}
inline const ::apollo::common::Extrinsics& VehicleConfig::_internal_extrinsics() const {
  return *extrinsics_;
}
inline const ::apollo::common::Extrinsics& VehicleConfig::extrinsics() const {
  const ::apollo::common::Extrinsics* p = extrinsics_;
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.extrinsics)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Extrinsics*>(
      &::apollo::common::_Extrinsics_default_instance_);
}
inline ::apollo::common::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.extrinsics)
  clear_has_extrinsics();
  ::apollo::common::Extrinsics* temp = extrinsics_;
  extrinsics_ = NULL;
  return temp;
}
inline ::apollo::common::Extrinsics* VehicleConfig::mutable_extrinsics() {
  set_has_extrinsics();
  if (extrinsics_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Extrinsics>(GetArenaNoVirtual());
    extrinsics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.extrinsics)
  return extrinsics_;
}
inline void VehicleConfig::set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete extrinsics_;
  }
  if (extrinsics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extrinsics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extrinsics, submessage_arena);
    }
    set_has_extrinsics();
  } else {
    clear_has_extrinsics();
  }
  extrinsics_ = extrinsics;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.extrinsics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::common::VehicleBrand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::VehicleBrand>() {
  return ::apollo::common::VehicleBrand_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vehicle_5fconfig_2eproto

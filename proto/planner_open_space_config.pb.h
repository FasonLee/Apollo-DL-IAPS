// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner_open_space_config.proto

#ifndef PROTOBUF_INCLUDED_planner_5fopen_5fspace_5fconfig_2eproto
#define PROTOBUF_INCLUDED_planner_5fopen_5fspace_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fem_pos_deviation_smoother_config.pb.h"
#include "task_config.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_planner_5fopen_5fspace_5fconfig_2eproto 

namespace protobuf_planner_5fopen_5fspace_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_planner_5fopen_5fspace_5fconfig_2eproto
namespace apollo {
namespace planning {
class DistanceApproachConfig;
class DistanceApproachConfigDefaultTypeInternal;
extern DistanceApproachConfigDefaultTypeInternal _DistanceApproachConfig_default_instance_;
class DualVariableWarmStartConfig;
class DualVariableWarmStartConfigDefaultTypeInternal;
extern DualVariableWarmStartConfigDefaultTypeInternal _DualVariableWarmStartConfig_default_instance_;
class IpoptConfig;
class IpoptConfigDefaultTypeInternal;
extern IpoptConfigDefaultTypeInternal _IpoptConfig_default_instance_;
class IterativeAnchoringConfig;
class IterativeAnchoringConfigDefaultTypeInternal;
extern IterativeAnchoringConfigDefaultTypeInternal _IterativeAnchoringConfig_default_instance_;
class OSQPConfig;
class OSQPConfigDefaultTypeInternal;
extern OSQPConfigDefaultTypeInternal _OSQPConfig_default_instance_;
class PlannerOpenSpaceConfig;
class PlannerOpenSpaceConfigDefaultTypeInternal;
extern PlannerOpenSpaceConfigDefaultTypeInternal _PlannerOpenSpaceConfig_default_instance_;
class ROIConfig;
class ROIConfigDefaultTypeInternal;
extern ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
class TrajectoryPartitionConfig;
class TrajectoryPartitionConfigDefaultTypeInternal;
extern TrajectoryPartitionConfigDefaultTypeInternal _TrajectoryPartitionConfig_default_instance_;
class WarmStartConfig;
class WarmStartConfigDefaultTypeInternal;
extern WarmStartConfigDefaultTypeInternal _WarmStartConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::DistanceApproachConfig* Arena::CreateMaybeMessage<::apollo::planning::DistanceApproachConfig>(Arena*);
template<> ::apollo::planning::DualVariableWarmStartConfig* Arena::CreateMaybeMessage<::apollo::planning::DualVariableWarmStartConfig>(Arena*);
template<> ::apollo::planning::IpoptConfig* Arena::CreateMaybeMessage<::apollo::planning::IpoptConfig>(Arena*);
template<> ::apollo::planning::IterativeAnchoringConfig* Arena::CreateMaybeMessage<::apollo::planning::IterativeAnchoringConfig>(Arena*);
template<> ::apollo::planning::OSQPConfig* Arena::CreateMaybeMessage<::apollo::planning::OSQPConfig>(Arena*);
template<> ::apollo::planning::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage<::apollo::planning::PlannerOpenSpaceConfig>(Arena*);
template<> ::apollo::planning::ROIConfig* Arena::CreateMaybeMessage<::apollo::planning::ROIConfig>(Arena*);
template<> ::apollo::planning::TrajectoryPartitionConfig* Arena::CreateMaybeMessage<::apollo::planning::TrajectoryPartitionConfig>(Arena*);
template<> ::apollo::planning::WarmStartConfig* Arena::CreateMaybeMessage<::apollo::planning::WarmStartConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {

enum DualWarmUpMode {
  IPOPT = 0,
  IPOPTQP = 1,
  OSQP = 2,
  DEBUG = 3,
  SLACKQP = 4
};
bool DualWarmUpMode_IsValid(int value);
const DualWarmUpMode DualWarmUpMode_MIN = IPOPT;
const DualWarmUpMode DualWarmUpMode_MAX = SLACKQP;
const int DualWarmUpMode_ARRAYSIZE = DualWarmUpMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DualWarmUpMode_descriptor();
inline const ::std::string& DualWarmUpMode_Name(DualWarmUpMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DualWarmUpMode_descriptor(), value);
}
inline bool DualWarmUpMode_Parse(
    const ::std::string& name, DualWarmUpMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DualWarmUpMode>(
    DualWarmUpMode_descriptor(), name, value);
}
enum DistanceApproachMode {
  DISTANCE_APPROACH_IPOPT = 0,
  DISTANCE_APPROACH_IPOPT_CUDA = 1,
  DISTANCE_APPROACH_IPOPT_FIXED_TS = 2,
  DISTANCE_APPROACH_IPOPT_FIXED_DUAL = 3,
  DISTANCE_APPROACH_IPOPT_RELAX_END = 4,
  DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK = 5
};
bool DistanceApproachMode_IsValid(int value);
const DistanceApproachMode DistanceApproachMode_MIN = DISTANCE_APPROACH_IPOPT;
const DistanceApproachMode DistanceApproachMode_MAX = DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK;
const int DistanceApproachMode_ARRAYSIZE = DistanceApproachMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DistanceApproachMode_descriptor();
inline const ::std::string& DistanceApproachMode_Name(DistanceApproachMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DistanceApproachMode_descriptor(), value);
}
inline bool DistanceApproachMode_Parse(
    const ::std::string& name, DistanceApproachMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DistanceApproachMode>(
    DistanceApproachMode_descriptor(), name, value);
}
// ===================================================================

class PlannerOpenSpaceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlannerOpenSpaceConfig) */ {
 public:
  PlannerOpenSpaceConfig();
  virtual ~PlannerOpenSpaceConfig();

  PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from);

  inline PlannerOpenSpaceConfig& operator=(const PlannerOpenSpaceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlannerOpenSpaceConfig(PlannerOpenSpaceConfig&& from) noexcept
    : PlannerOpenSpaceConfig() {
    *this = ::std::move(from);
  }

  inline PlannerOpenSpaceConfig& operator=(PlannerOpenSpaceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerOpenSpaceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlannerOpenSpaceConfig* internal_default_instance() {
    return reinterpret_cast<const PlannerOpenSpaceConfig*>(
               &_PlannerOpenSpaceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlannerOpenSpaceConfig* other);
  friend void swap(PlannerOpenSpaceConfig& a, PlannerOpenSpaceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlannerOpenSpaceConfig* New() const final {
    return CreateMaybeMessage<PlannerOpenSpaceConfig>(NULL);
  }

  PlannerOpenSpaceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlannerOpenSpaceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlannerOpenSpaceConfig& from);
  void MergeFrom(const PlannerOpenSpaceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannerOpenSpaceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.ROIConfig roi_config = 1;
  bool has_roi_config() const;
  void clear_roi_config();
  static const int kRoiConfigFieldNumber = 1;
  private:
  const ::apollo::planning::ROIConfig& _internal_roi_config() const;
  public:
  const ::apollo::planning::ROIConfig& roi_config() const;
  ::apollo::planning::ROIConfig* release_roi_config();
  ::apollo::planning::ROIConfig* mutable_roi_config();
  void set_allocated_roi_config(::apollo::planning::ROIConfig* roi_config);

  // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
  bool has_warm_start_config() const;
  void clear_warm_start_config();
  static const int kWarmStartConfigFieldNumber = 2;
  private:
  const ::apollo::planning::WarmStartConfig& _internal_warm_start_config() const;
  public:
  const ::apollo::planning::WarmStartConfig& warm_start_config() const;
  ::apollo::planning::WarmStartConfig* release_warm_start_config();
  ::apollo::planning::WarmStartConfig* mutable_warm_start_config();
  void set_allocated_warm_start_config(::apollo::planning::WarmStartConfig* warm_start_config);

  // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  bool has_dual_variable_warm_start_config() const;
  void clear_dual_variable_warm_start_config();
  static const int kDualVariableWarmStartConfigFieldNumber = 3;
  private:
  const ::apollo::planning::DualVariableWarmStartConfig& _internal_dual_variable_warm_start_config() const;
  public:
  const ::apollo::planning::DualVariableWarmStartConfig& dual_variable_warm_start_config() const;
  ::apollo::planning::DualVariableWarmStartConfig* release_dual_variable_warm_start_config();
  ::apollo::planning::DualVariableWarmStartConfig* mutable_dual_variable_warm_start_config();
  void set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config);

  // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
  bool has_distance_approach_config() const;
  void clear_distance_approach_config();
  static const int kDistanceApproachConfigFieldNumber = 4;
  private:
  const ::apollo::planning::DistanceApproachConfig& _internal_distance_approach_config() const;
  public:
  const ::apollo::planning::DistanceApproachConfig& distance_approach_config() const;
  ::apollo::planning::DistanceApproachConfig* release_distance_approach_config();
  ::apollo::planning::DistanceApproachConfig* mutable_distance_approach_config();
  void set_allocated_distance_approach_config(::apollo::planning::DistanceApproachConfig* distance_approach_config);

  // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  bool has_iterative_anchoring_smoother_config() const;
  void clear_iterative_anchoring_smoother_config();
  static const int kIterativeAnchoringSmootherConfigFieldNumber = 5;
  private:
  const ::apollo::planning::IterativeAnchoringConfig& _internal_iterative_anchoring_smoother_config() const;
  public:
  const ::apollo::planning::IterativeAnchoringConfig& iterative_anchoring_smoother_config() const;
  ::apollo::planning::IterativeAnchoringConfig* release_iterative_anchoring_smoother_config();
  ::apollo::planning::IterativeAnchoringConfig* mutable_iterative_anchoring_smoother_config();
  void set_allocated_iterative_anchoring_smoother_config(::apollo::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config);

  // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  bool has_trajectory_partition_config() const;
  void clear_trajectory_partition_config();
  static const int kTrajectoryPartitionConfigFieldNumber = 6;
  private:
  const ::apollo::planning::TrajectoryPartitionConfig& _internal_trajectory_partition_config() const;
  public:
  const ::apollo::planning::TrajectoryPartitionConfig& trajectory_partition_config() const;
  ::apollo::planning::TrajectoryPartitionConfig* release_trajectory_partition_config();
  ::apollo::planning::TrajectoryPartitionConfig* mutable_trajectory_partition_config();
  void set_allocated_trajectory_partition_config(::apollo::planning::TrajectoryPartitionConfig* trajectory_partition_config);

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  bool has_enable_check_parallel_trajectory() const;
  void clear_enable_check_parallel_trajectory();
  static const int kEnableCheckParallelTrajectoryFieldNumber = 9;
  bool enable_check_parallel_trajectory() const;
  void set_enable_check_parallel_trajectory(bool value);

  // optional bool enable_linear_interpolation = 10 [default = false];
  bool has_enable_linear_interpolation() const;
  void clear_enable_linear_interpolation();
  static const int kEnableLinearInterpolationFieldNumber = 10;
  bool enable_linear_interpolation() const;
  void set_enable_linear_interpolation(bool value);

  // optional float delta_t = 7 [default = 1];
  bool has_delta_t() const;
  void clear_delta_t();
  static const int kDeltaTFieldNumber = 7;
  float delta_t() const;
  void set_delta_t(float value);

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  bool has_is_near_destination_threshold() const;
  void clear_is_near_destination_threshold();
  static const int kIsNearDestinationThresholdFieldNumber = 8;
  double is_near_destination_threshold() const;
  void set_is_near_destination_threshold(double value);

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  bool has_is_near_destination_theta_threshold() const;
  void clear_is_near_destination_theta_threshold();
  static const int kIsNearDestinationThetaThresholdFieldNumber = 11;
  double is_near_destination_theta_threshold() const;
  void set_is_near_destination_theta_threshold(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlannerOpenSpaceConfig)
 private:
  void set_has_roi_config();
  void clear_has_roi_config();
  void set_has_warm_start_config();
  void clear_has_warm_start_config();
  void set_has_dual_variable_warm_start_config();
  void clear_has_dual_variable_warm_start_config();
  void set_has_distance_approach_config();
  void clear_has_distance_approach_config();
  void set_has_iterative_anchoring_smoother_config();
  void clear_has_iterative_anchoring_smoother_config();
  void set_has_trajectory_partition_config();
  void clear_has_trajectory_partition_config();
  void set_has_delta_t();
  void clear_has_delta_t();
  void set_has_is_near_destination_threshold();
  void clear_has_is_near_destination_threshold();
  void set_has_enable_check_parallel_trajectory();
  void clear_has_enable_check_parallel_trajectory();
  void set_has_enable_linear_interpolation();
  void clear_has_enable_linear_interpolation();
  void set_has_is_near_destination_theta_threshold();
  void clear_has_is_near_destination_theta_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::ROIConfig* roi_config_;
  ::apollo::planning::WarmStartConfig* warm_start_config_;
  ::apollo::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config_;
  ::apollo::planning::DistanceApproachConfig* distance_approach_config_;
  ::apollo::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config_;
  ::apollo::planning::TrajectoryPartitionConfig* trajectory_partition_config_;
  bool enable_check_parallel_trajectory_;
  bool enable_linear_interpolation_;
  float delta_t_;
  double is_near_destination_threshold_;
  double is_near_destination_theta_threshold_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROIConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ROIConfig) */ {
 public:
  ROIConfig();
  virtual ~ROIConfig();

  ROIConfig(const ROIConfig& from);

  inline ROIConfig& operator=(const ROIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ROIConfig(ROIConfig&& from) noexcept
    : ROIConfig() {
    *this = ::std::move(from);
  }

  inline ROIConfig& operator=(ROIConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIConfig* internal_default_instance() {
    return reinterpret_cast<const ROIConfig*>(
               &_ROIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ROIConfig* other);
  friend void swap(ROIConfig& a, ROIConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ROIConfig* New() const final {
    return CreateMaybeMessage<ROIConfig>(NULL);
  }

  ROIConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ROIConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ROIConfig& from);
  void MergeFrom(const ROIConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool parking_inwards = 4 [default = false];
  bool has_parking_inwards() const;
  void clear_parking_inwards();
  static const int kParkingInwardsFieldNumber = 4;
  bool parking_inwards() const;
  void set_parking_inwards(bool value);

  // optional double roi_longitudinal_range_start = 1 [default = 10];
  bool has_roi_longitudinal_range_start() const;
  void clear_roi_longitudinal_range_start();
  static const int kRoiLongitudinalRangeStartFieldNumber = 1;
  double roi_longitudinal_range_start() const;
  void set_roi_longitudinal_range_start(double value);

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  bool has_roi_longitudinal_range_end() const;
  void clear_roi_longitudinal_range_end();
  static const int kRoiLongitudinalRangeEndFieldNumber = 2;
  double roi_longitudinal_range_end() const;
  void set_roi_longitudinal_range_end(double value);

  // optional double parking_start_range = 3 [default = 7];
  bool has_parking_start_range() const;
  void clear_parking_start_range();
  static const int kParkingStartRangeFieldNumber = 3;
  double parking_start_range() const;
  void set_parking_start_range(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ROIConfig)
 private:
  void set_has_roi_longitudinal_range_start();
  void clear_has_roi_longitudinal_range_start();
  void set_has_roi_longitudinal_range_end();
  void clear_has_roi_longitudinal_range_end();
  void set_has_parking_start_range();
  void clear_has_parking_start_range();
  void set_has_parking_inwards();
  void clear_has_parking_inwards();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool parking_inwards_;
  double roi_longitudinal_range_start_;
  double roi_longitudinal_range_end_;
  double parking_start_range_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WarmStartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.WarmStartConfig) */ {
 public:
  WarmStartConfig();
  virtual ~WarmStartConfig();

  WarmStartConfig(const WarmStartConfig& from);

  inline WarmStartConfig& operator=(const WarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarmStartConfig(WarmStartConfig&& from) noexcept
    : WarmStartConfig() {
    *this = ::std::move(from);
  }

  inline WarmStartConfig& operator=(WarmStartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarmStartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarmStartConfig* internal_default_instance() {
    return reinterpret_cast<const WarmStartConfig*>(
               &_WarmStartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WarmStartConfig* other);
  friend void swap(WarmStartConfig& a, WarmStartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarmStartConfig* New() const final {
    return CreateMaybeMessage<WarmStartConfig>(NULL);
  }

  WarmStartConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WarmStartConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WarmStartConfig& from);
  void MergeFrom(const WarmStartConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarmStartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  bool has_s_curve_config() const;
  void clear_s_curve_config();
  static const int kSCurveConfigFieldNumber = 17;
  private:
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& _internal_s_curve_config() const;
  public:
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config() const;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* release_s_curve_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* mutable_s_curve_config();
  void set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config);

  // optional double traj_forward_penalty = 5 [default = 0];
  bool has_traj_forward_penalty() const;
  void clear_traj_forward_penalty();
  static const int kTrajForwardPenaltyFieldNumber = 5;
  double traj_forward_penalty() const;
  void set_traj_forward_penalty(double value);

  // optional double traj_back_penalty = 6 [default = 0];
  bool has_traj_back_penalty() const;
  void clear_traj_back_penalty();
  static const int kTrajBackPenaltyFieldNumber = 6;
  double traj_back_penalty() const;
  void set_traj_back_penalty(double value);

  // optional double xy_grid_resolution = 1 [default = 0.2];
  bool has_xy_grid_resolution() const;
  void clear_xy_grid_resolution();
  static const int kXyGridResolutionFieldNumber = 1;
  double xy_grid_resolution() const;
  void set_xy_grid_resolution(double value);

  // optional double phi_grid_resolution = 2 [default = 0.05];
  bool has_phi_grid_resolution() const;
  void clear_phi_grid_resolution();
  static const int kPhiGridResolutionFieldNumber = 2;
  double phi_grid_resolution() const;
  void set_phi_grid_resolution(double value);

  // optional uint64 next_node_num = 3 [default = 10];
  bool has_next_node_num() const;
  void clear_next_node_num();
  static const int kNextNodeNumFieldNumber = 3;
  ::google::protobuf::uint64 next_node_num() const;
  void set_next_node_num(::google::protobuf::uint64 value);

  // optional double step_size = 4 [default = 0.5];
  bool has_step_size() const;
  void clear_step_size();
  static const int kStepSizeFieldNumber = 4;
  double step_size() const;
  void set_step_size(double value);

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  bool has_traj_gear_switch_penalty() const;
  void clear_traj_gear_switch_penalty();
  static const int kTrajGearSwitchPenaltyFieldNumber = 7;
  double traj_gear_switch_penalty() const;
  void set_traj_gear_switch_penalty(double value);

  // optional double traj_steer_penalty = 8 [default = 100];
  bool has_traj_steer_penalty() const;
  void clear_traj_steer_penalty();
  static const int kTrajSteerPenaltyFieldNumber = 8;
  double traj_steer_penalty() const;
  void set_traj_steer_penalty(double value);

  // optional double traj_steer_change_penalty = 9 [default = 10];
  bool has_traj_steer_change_penalty() const;
  void clear_traj_steer_change_penalty();
  static const int kTrajSteerChangePenaltyFieldNumber = 9;
  double traj_steer_change_penalty() const;
  void set_traj_steer_change_penalty(double value);

  // optional double traj_kappa_contraint_ratio = 10 [default = 0.7];
  bool has_traj_kappa_contraint_ratio() const;
  void clear_traj_kappa_contraint_ratio();
  static const int kTrajKappaContraintRatioFieldNumber = 10;
  double traj_kappa_contraint_ratio() const;
  void set_traj_kappa_contraint_ratio(double value);

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  bool has_grid_a_star_xy_resolution() const;
  void clear_grid_a_star_xy_resolution();
  static const int kGridAStarXyResolutionFieldNumber = 15;
  double grid_a_star_xy_resolution() const;
  void set_grid_a_star_xy_resolution(double value);

  // optional double node_radius = 16 [default = 0.5];
  bool has_node_radius() const;
  void clear_node_radius();
  static const int kNodeRadiusFieldNumber = 16;
  double node_radius() const;
  void set_node_radius(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.WarmStartConfig)
 private:
  void set_has_xy_grid_resolution();
  void clear_has_xy_grid_resolution();
  void set_has_phi_grid_resolution();
  void clear_has_phi_grid_resolution();
  void set_has_next_node_num();
  void clear_has_next_node_num();
  void set_has_step_size();
  void clear_has_step_size();
  void set_has_traj_forward_penalty();
  void clear_has_traj_forward_penalty();
  void set_has_traj_back_penalty();
  void clear_has_traj_back_penalty();
  void set_has_traj_gear_switch_penalty();
  void clear_has_traj_gear_switch_penalty();
  void set_has_traj_steer_penalty();
  void clear_has_traj_steer_penalty();
  void set_has_traj_steer_change_penalty();
  void clear_has_traj_steer_change_penalty();
  void set_has_grid_a_star_xy_resolution();
  void clear_has_grid_a_star_xy_resolution();
  void set_has_node_radius();
  void clear_has_node_radius();
  void set_has_s_curve_config();
  void clear_has_s_curve_config();
  void set_has_traj_kappa_contraint_ratio();
  void clear_has_traj_kappa_contraint_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config_;
  double traj_forward_penalty_;
  double traj_back_penalty_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  ::google::protobuf::uint64 next_node_num_;
  double step_size_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double traj_kappa_contraint_ratio_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DualVariableWarmStartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DualVariableWarmStartConfig) */ {
 public:
  DualVariableWarmStartConfig();
  virtual ~DualVariableWarmStartConfig();

  DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from);

  inline DualVariableWarmStartConfig& operator=(const DualVariableWarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DualVariableWarmStartConfig(DualVariableWarmStartConfig&& from) noexcept
    : DualVariableWarmStartConfig() {
    *this = ::std::move(from);
  }

  inline DualVariableWarmStartConfig& operator=(DualVariableWarmStartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DualVariableWarmStartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DualVariableWarmStartConfig* internal_default_instance() {
    return reinterpret_cast<const DualVariableWarmStartConfig*>(
               &_DualVariableWarmStartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DualVariableWarmStartConfig* other);
  friend void swap(DualVariableWarmStartConfig& a, DualVariableWarmStartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DualVariableWarmStartConfig* New() const final {
    return CreateMaybeMessage<DualVariableWarmStartConfig>(NULL);
  }

  DualVariableWarmStartConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DualVariableWarmStartConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DualVariableWarmStartConfig& from);
  void MergeFrom(const DualVariableWarmStartConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualVariableWarmStartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.IpoptConfig ipopt_config = 2;
  bool has_ipopt_config() const;
  void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 2;
  private:
  const ::apollo::planning::IpoptConfig& _internal_ipopt_config() const;
  public:
  const ::apollo::planning::IpoptConfig& ipopt_config() const;
  ::apollo::planning::IpoptConfig* release_ipopt_config();
  ::apollo::planning::IpoptConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config);

  // optional .apollo.planning.OSQPConfig osqp_config = 7;
  bool has_osqp_config() const;
  void clear_osqp_config();
  static const int kOsqpConfigFieldNumber = 7;
  private:
  const ::apollo::planning::OSQPConfig& _internal_osqp_config() const;
  public:
  const ::apollo::planning::OSQPConfig& osqp_config() const;
  ::apollo::planning::OSQPConfig* release_osqp_config();
  ::apollo::planning::OSQPConfig* mutable_osqp_config();
  void set_allocated_osqp_config(::apollo::planning::OSQPConfig* osqp_config);

  // optional double min_safety_distance = 4 [default = 0];
  bool has_min_safety_distance() const;
  void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 4;
  double min_safety_distance() const;
  void set_min_safety_distance(double value);

  // optional .apollo.planning.DualWarmUpMode qp_format = 3;
  bool has_qp_format() const;
  void clear_qp_format();
  static const int kQpFormatFieldNumber = 3;
  ::apollo::planning::DualWarmUpMode qp_format() const;
  void set_qp_format(::apollo::planning::DualWarmUpMode value);

  // optional bool debug_osqp = 5 [default = false];
  bool has_debug_osqp() const;
  void clear_debug_osqp();
  static const int kDebugOsqpFieldNumber = 5;
  bool debug_osqp() const;
  void set_debug_osqp(bool value);

  // optional double weight_d = 1 [default = 1];
  bool has_weight_d() const;
  void clear_weight_d();
  static const int kWeightDFieldNumber = 1;
  double weight_d() const;
  void set_weight_d(double value);

  // optional double beta = 6 [default = 1];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 6;
  double beta() const;
  void set_beta(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DualVariableWarmStartConfig)
 private:
  void set_has_weight_d();
  void clear_has_weight_d();
  void set_has_ipopt_config();
  void clear_has_ipopt_config();
  void set_has_qp_format();
  void clear_has_qp_format();
  void set_has_min_safety_distance();
  void clear_has_min_safety_distance();
  void set_has_debug_osqp();
  void clear_has_debug_osqp();
  void set_has_beta();
  void clear_has_beta();
  void set_has_osqp_config();
  void clear_has_osqp_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::IpoptConfig* ipopt_config_;
  ::apollo::planning::OSQPConfig* osqp_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double weight_d_;
  double beta_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DistanceApproachConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DistanceApproachConfig) */ {
 public:
  DistanceApproachConfig();
  virtual ~DistanceApproachConfig();

  DistanceApproachConfig(const DistanceApproachConfig& from);

  inline DistanceApproachConfig& operator=(const DistanceApproachConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistanceApproachConfig(DistanceApproachConfig&& from) noexcept
    : DistanceApproachConfig() {
    *this = ::std::move(from);
  }

  inline DistanceApproachConfig& operator=(DistanceApproachConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistanceApproachConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceApproachConfig* internal_default_instance() {
    return reinterpret_cast<const DistanceApproachConfig*>(
               &_DistanceApproachConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DistanceApproachConfig* other);
  friend void swap(DistanceApproachConfig& a, DistanceApproachConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistanceApproachConfig* New() const final {
    return CreateMaybeMessage<DistanceApproachConfig>(NULL);
  }

  DistanceApproachConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistanceApproachConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistanceApproachConfig& from);
  void MergeFrom(const DistanceApproachConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceApproachConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.IpoptConfig ipopt_config = 21;
  bool has_ipopt_config() const;
  void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 21;
  private:
  const ::apollo::planning::IpoptConfig& _internal_ipopt_config() const;
  public:
  const ::apollo::planning::IpoptConfig& ipopt_config() const;
  ::apollo::planning::IpoptConfig* release_ipopt_config();
  ::apollo::planning::IpoptConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config);

  // optional double weight_steer = 1;
  bool has_weight_steer() const;
  void clear_weight_steer();
  static const int kWeightSteerFieldNumber = 1;
  double weight_steer() const;
  void set_weight_steer(double value);

  // optional double weight_a = 2;
  bool has_weight_a() const;
  void clear_weight_a();
  static const int kWeightAFieldNumber = 2;
  double weight_a() const;
  void set_weight_a(double value);

  // optional double weight_steer_rate = 3;
  bool has_weight_steer_rate() const;
  void clear_weight_steer_rate();
  static const int kWeightSteerRateFieldNumber = 3;
  double weight_steer_rate() const;
  void set_weight_steer_rate(double value);

  // optional double weight_a_rate = 4;
  bool has_weight_a_rate() const;
  void clear_weight_a_rate();
  static const int kWeightARateFieldNumber = 4;
  double weight_a_rate() const;
  void set_weight_a_rate(double value);

  // optional double weight_x = 5;
  bool has_weight_x() const;
  void clear_weight_x();
  static const int kWeightXFieldNumber = 5;
  double weight_x() const;
  void set_weight_x(double value);

  // optional double weight_y = 6;
  bool has_weight_y() const;
  void clear_weight_y();
  static const int kWeightYFieldNumber = 6;
  double weight_y() const;
  void set_weight_y(double value);

  // optional double weight_phi = 7;
  bool has_weight_phi() const;
  void clear_weight_phi();
  static const int kWeightPhiFieldNumber = 7;
  double weight_phi() const;
  void set_weight_phi(double value);

  // optional double weight_v = 8;
  bool has_weight_v() const;
  void clear_weight_v();
  static const int kWeightVFieldNumber = 8;
  double weight_v() const;
  void set_weight_v(double value);

  // optional double weight_steer_stitching = 9;
  bool has_weight_steer_stitching() const;
  void clear_weight_steer_stitching();
  static const int kWeightSteerStitchingFieldNumber = 9;
  double weight_steer_stitching() const;
  void set_weight_steer_stitching(double value);

  // optional double weight_a_stitching = 10;
  bool has_weight_a_stitching() const;
  void clear_weight_a_stitching();
  static const int kWeightAStitchingFieldNumber = 10;
  double weight_a_stitching() const;
  void set_weight_a_stitching(double value);

  // optional double weight_first_order_time = 11;
  bool has_weight_first_order_time() const;
  void clear_weight_first_order_time();
  static const int kWeightFirstOrderTimeFieldNumber = 11;
  double weight_first_order_time() const;
  void set_weight_first_order_time(double value);

  // optional double weight_second_order_time = 12;
  bool has_weight_second_order_time() const;
  void clear_weight_second_order_time();
  static const int kWeightSecondOrderTimeFieldNumber = 12;
  double weight_second_order_time() const;
  void set_weight_second_order_time(double value);

  // optional double min_safety_distance = 13 [default = 0];
  bool has_min_safety_distance() const;
  void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 13;
  double min_safety_distance() const;
  void set_min_safety_distance(double value);

  // optional bool use_fix_time = 20 [default = false];
  bool has_use_fix_time() const;
  void clear_use_fix_time();
  static const int kUseFixTimeFieldNumber = 20;
  bool use_fix_time() const;
  void set_use_fix_time(bool value);

  // optional bool enable_constraint_check = 22;
  bool has_enable_constraint_check() const;
  void clear_enable_constraint_check();
  static const int kEnableConstraintCheckFieldNumber = 22;
  bool enable_constraint_check() const;
  void set_enable_constraint_check(bool value);

  // optional bool enable_hand_derivative = 23;
  bool has_enable_hand_derivative() const;
  void clear_enable_hand_derivative();
  static const int kEnableHandDerivativeFieldNumber = 23;
  bool enable_hand_derivative() const;
  void set_enable_hand_derivative(bool value);

  // optional bool enable_derivative_check = 24;
  bool has_enable_derivative_check() const;
  void clear_enable_derivative_check();
  static const int kEnableDerivativeCheckFieldNumber = 24;
  bool enable_derivative_check() const;
  void set_enable_derivative_check(bool value);

  // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
  bool has_distance_approach_mode() const;
  void clear_distance_approach_mode();
  static const int kDistanceApproachModeFieldNumber = 26;
  ::apollo::planning::DistanceApproachMode distance_approach_mode() const;
  void set_distance_approach_mode(::apollo::planning::DistanceApproachMode value);

  // optional double weight_end_state = 29 [default = 0];
  bool has_weight_end_state() const;
  void clear_weight_end_state();
  static const int kWeightEndStateFieldNumber = 29;
  double weight_end_state() const;
  void set_weight_end_state(double value);

  // optional double weight_slack = 30 [default = 0];
  bool has_weight_slack() const;
  void clear_weight_slack();
  static const int kWeightSlackFieldNumber = 30;
  double weight_slack() const;
  void set_weight_slack(double value);

  // optional bool enable_initial_final_check = 25 [default = false];
  bool has_enable_initial_final_check() const;
  void clear_enable_initial_final_check();
  static const int kEnableInitialFinalCheckFieldNumber = 25;
  bool enable_initial_final_check() const;
  void set_enable_initial_final_check(bool value);

  // optional bool enable_jacobian_ad = 27 [default = false];
  bool has_enable_jacobian_ad() const;
  void clear_enable_jacobian_ad();
  static const int kEnableJacobianAdFieldNumber = 27;
  bool enable_jacobian_ad() const;
  void set_enable_jacobian_ad(bool value);

  // optional bool enable_check_initial_state = 28 [default = false];
  bool has_enable_check_initial_state() const;
  void clear_enable_check_initial_state();
  static const int kEnableCheckInitialStateFieldNumber = 28;
  bool enable_check_initial_state() const;
  void set_enable_check_initial_state(bool value);

  // optional double max_speed_forward = 14 [default = 3];
  bool has_max_speed_forward() const;
  void clear_max_speed_forward();
  static const int kMaxSpeedForwardFieldNumber = 14;
  double max_speed_forward() const;
  void set_max_speed_forward(double value);

  // optional double max_speed_reverse = 15 [default = 2];
  bool has_max_speed_reverse() const;
  void clear_max_speed_reverse();
  static const int kMaxSpeedReverseFieldNumber = 15;
  double max_speed_reverse() const;
  void set_max_speed_reverse(double value);

  // optional double max_acceleration_forward = 16 [default = 2];
  bool has_max_acceleration_forward() const;
  void clear_max_acceleration_forward();
  static const int kMaxAccelerationForwardFieldNumber = 16;
  double max_acceleration_forward() const;
  void set_max_acceleration_forward(double value);

  // optional double max_acceleration_reverse = 17 [default = 2];
  bool has_max_acceleration_reverse() const;
  void clear_max_acceleration_reverse();
  static const int kMaxAccelerationReverseFieldNumber = 17;
  double max_acceleration_reverse() const;
  void set_max_acceleration_reverse(double value);

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  bool has_min_time_sample_scaling() const;
  void clear_min_time_sample_scaling();
  static const int kMinTimeSampleScalingFieldNumber = 18;
  double min_time_sample_scaling() const;
  void set_min_time_sample_scaling(double value);

  // optional double max_time_sample_scaling = 19 [default = 10];
  bool has_max_time_sample_scaling() const;
  void clear_max_time_sample_scaling();
  static const int kMaxTimeSampleScalingFieldNumber = 19;
  double max_time_sample_scaling() const;
  void set_max_time_sample_scaling(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DistanceApproachConfig)
 private:
  void set_has_weight_steer();
  void clear_has_weight_steer();
  void set_has_weight_a();
  void clear_has_weight_a();
  void set_has_weight_steer_rate();
  void clear_has_weight_steer_rate();
  void set_has_weight_a_rate();
  void clear_has_weight_a_rate();
  void set_has_weight_x();
  void clear_has_weight_x();
  void set_has_weight_y();
  void clear_has_weight_y();
  void set_has_weight_phi();
  void clear_has_weight_phi();
  void set_has_weight_v();
  void clear_has_weight_v();
  void set_has_weight_steer_stitching();
  void clear_has_weight_steer_stitching();
  void set_has_weight_a_stitching();
  void clear_has_weight_a_stitching();
  void set_has_weight_first_order_time();
  void clear_has_weight_first_order_time();
  void set_has_weight_second_order_time();
  void clear_has_weight_second_order_time();
  void set_has_min_safety_distance();
  void clear_has_min_safety_distance();
  void set_has_max_speed_forward();
  void clear_has_max_speed_forward();
  void set_has_max_speed_reverse();
  void clear_has_max_speed_reverse();
  void set_has_max_acceleration_forward();
  void clear_has_max_acceleration_forward();
  void set_has_max_acceleration_reverse();
  void clear_has_max_acceleration_reverse();
  void set_has_min_time_sample_scaling();
  void clear_has_min_time_sample_scaling();
  void set_has_max_time_sample_scaling();
  void clear_has_max_time_sample_scaling();
  void set_has_use_fix_time();
  void clear_has_use_fix_time();
  void set_has_ipopt_config();
  void clear_has_ipopt_config();
  void set_has_enable_constraint_check();
  void clear_has_enable_constraint_check();
  void set_has_enable_hand_derivative();
  void clear_has_enable_hand_derivative();
  void set_has_enable_derivative_check();
  void clear_has_enable_derivative_check();
  void set_has_enable_initial_final_check();
  void clear_has_enable_initial_final_check();
  void set_has_distance_approach_mode();
  void clear_has_distance_approach_mode();
  void set_has_enable_jacobian_ad();
  void clear_has_enable_jacobian_ad();
  void set_has_enable_check_initial_state();
  void clear_has_enable_check_initial_state();
  void set_has_weight_end_state();
  void clear_has_weight_end_state();
  void set_has_weight_slack();
  void clear_has_weight_slack();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::IpoptConfig* ipopt_config_;
  double weight_steer_;
  double weight_a_;
  double weight_steer_rate_;
  double weight_a_rate_;
  double weight_x_;
  double weight_y_;
  double weight_phi_;
  double weight_v_;
  double weight_steer_stitching_;
  double weight_a_stitching_;
  double weight_first_order_time_;
  double weight_second_order_time_;
  double min_safety_distance_;
  bool use_fix_time_;
  bool enable_constraint_check_;
  bool enable_hand_derivative_;
  bool enable_derivative_check_;
  int distance_approach_mode_;
  double weight_end_state_;
  double weight_slack_;
  bool enable_initial_final_check_;
  bool enable_jacobian_ad_;
  bool enable_check_initial_state_;
  double max_speed_forward_;
  double max_speed_reverse_;
  double max_acceleration_forward_;
  double max_acceleration_reverse_;
  double min_time_sample_scaling_;
  double max_time_sample_scaling_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IpoptConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.IpoptConfig) */ {
 public:
  IpoptConfig();
  virtual ~IpoptConfig();

  IpoptConfig(const IpoptConfig& from);

  inline IpoptConfig& operator=(const IpoptConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpoptConfig(IpoptConfig&& from) noexcept
    : IpoptConfig() {
    *this = ::std::move(from);
  }

  inline IpoptConfig& operator=(IpoptConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpoptConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpoptConfig* internal_default_instance() {
    return reinterpret_cast<const IpoptConfig*>(
               &_IpoptConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IpoptConfig* other);
  friend void swap(IpoptConfig& a, IpoptConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpoptConfig* New() const final {
    return CreateMaybeMessage<IpoptConfig>(NULL);
  }

  IpoptConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IpoptConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IpoptConfig& from);
  void MergeFrom(const IpoptConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpoptConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ipopt_print_timing_statistics = 9;
  bool has_ipopt_print_timing_statistics() const;
  void clear_ipopt_print_timing_statistics();
  static const int kIpoptPrintTimingStatisticsFieldNumber = 9;
  const ::std::string& ipopt_print_timing_statistics() const;
  void set_ipopt_print_timing_statistics(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_print_timing_statistics(::std::string&& value);
  #endif
  void set_ipopt_print_timing_statistics(const char* value);
  void set_ipopt_print_timing_statistics(const char* value, size_t size);
  ::std::string* mutable_ipopt_print_timing_statistics();
  ::std::string* release_ipopt_print_timing_statistics();
  void set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics);

  // optional string ipopt_alpha_for_y = 10;
  bool has_ipopt_alpha_for_y() const;
  void clear_ipopt_alpha_for_y();
  static const int kIpoptAlphaForYFieldNumber = 10;
  const ::std::string& ipopt_alpha_for_y() const;
  void set_ipopt_alpha_for_y(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_alpha_for_y(::std::string&& value);
  #endif
  void set_ipopt_alpha_for_y(const char* value);
  void set_ipopt_alpha_for_y(const char* value, size_t size);
  ::std::string* mutable_ipopt_alpha_for_y();
  ::std::string* release_ipopt_alpha_for_y();
  void set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y);

  // optional string ipopt_recalc_y = 11;
  bool has_ipopt_recalc_y() const;
  void clear_ipopt_recalc_y();
  static const int kIpoptRecalcYFieldNumber = 11;
  const ::std::string& ipopt_recalc_y() const;
  void set_ipopt_recalc_y(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_recalc_y(::std::string&& value);
  #endif
  void set_ipopt_recalc_y(const char* value);
  void set_ipopt_recalc_y(const char* value, size_t size);
  ::std::string* mutable_ipopt_recalc_y();
  ::std::string* release_ipopt_recalc_y();
  void set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y);

  // optional int32 ipopt_print_level = 1;
  bool has_ipopt_print_level() const;
  void clear_ipopt_print_level();
  static const int kIpoptPrintLevelFieldNumber = 1;
  ::google::protobuf::int32 ipopt_print_level() const;
  void set_ipopt_print_level(::google::protobuf::int32 value);

  // optional int32 mumps_mem_percent = 2;
  bool has_mumps_mem_percent() const;
  void clear_mumps_mem_percent();
  static const int kMumpsMemPercentFieldNumber = 2;
  ::google::protobuf::int32 mumps_mem_percent() const;
  void set_mumps_mem_percent(::google::protobuf::int32 value);

  // optional double mumps_pivtol = 3;
  bool has_mumps_pivtol() const;
  void clear_mumps_pivtol();
  static const int kMumpsPivtolFieldNumber = 3;
  double mumps_pivtol() const;
  void set_mumps_pivtol(double value);

  // optional double ipopt_tol = 5;
  bool has_ipopt_tol() const;
  void clear_ipopt_tol();
  static const int kIpoptTolFieldNumber = 5;
  double ipopt_tol() const;
  void set_ipopt_tol(double value);

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  bool has_ipopt_acceptable_constr_viol_tol() const;
  void clear_ipopt_acceptable_constr_viol_tol();
  static const int kIpoptAcceptableConstrViolTolFieldNumber = 6;
  double ipopt_acceptable_constr_viol_tol() const;
  void set_ipopt_acceptable_constr_viol_tol(double value);

  // optional double ipopt_min_hessian_perturbation = 7;
  bool has_ipopt_min_hessian_perturbation() const;
  void clear_ipopt_min_hessian_perturbation();
  static const int kIpoptMinHessianPerturbationFieldNumber = 7;
  double ipopt_min_hessian_perturbation() const;
  void set_ipopt_min_hessian_perturbation(double value);

  // optional double ipopt_jacobian_regularization_value = 8;
  bool has_ipopt_jacobian_regularization_value() const;
  void clear_ipopt_jacobian_regularization_value();
  static const int kIpoptJacobianRegularizationValueFieldNumber = 8;
  double ipopt_jacobian_regularization_value() const;
  void set_ipopt_jacobian_regularization_value(double value);

  // optional int32 ipopt_max_iter = 4;
  bool has_ipopt_max_iter() const;
  void clear_ipopt_max_iter();
  static const int kIpoptMaxIterFieldNumber = 4;
  ::google::protobuf::int32 ipopt_max_iter() const;
  void set_ipopt_max_iter(::google::protobuf::int32 value);

  // optional double ipopt_mu_init = 12 [default = 0.1];
  bool has_ipopt_mu_init() const;
  void clear_ipopt_mu_init();
  static const int kIpoptMuInitFieldNumber = 12;
  double ipopt_mu_init() const;
  void set_ipopt_mu_init(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.IpoptConfig)
 private:
  void set_has_ipopt_print_level();
  void clear_has_ipopt_print_level();
  void set_has_mumps_mem_percent();
  void clear_has_mumps_mem_percent();
  void set_has_mumps_pivtol();
  void clear_has_mumps_pivtol();
  void set_has_ipopt_max_iter();
  void clear_has_ipopt_max_iter();
  void set_has_ipopt_tol();
  void clear_has_ipopt_tol();
  void set_has_ipopt_acceptable_constr_viol_tol();
  void clear_has_ipopt_acceptable_constr_viol_tol();
  void set_has_ipopt_min_hessian_perturbation();
  void clear_has_ipopt_min_hessian_perturbation();
  void set_has_ipopt_jacobian_regularization_value();
  void clear_has_ipopt_jacobian_regularization_value();
  void set_has_ipopt_print_timing_statistics();
  void clear_has_ipopt_print_timing_statistics();
  void set_has_ipopt_alpha_for_y();
  void clear_has_ipopt_alpha_for_y();
  void set_has_ipopt_recalc_y();
  void clear_has_ipopt_recalc_y();
  void set_has_ipopt_mu_init();
  void clear_has_ipopt_mu_init();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_print_timing_statistics_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_alpha_for_y_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_recalc_y_;
  ::google::protobuf::int32 ipopt_print_level_;
  ::google::protobuf::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::google::protobuf::int32 ipopt_max_iter_;
  double ipopt_mu_init_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OSQPConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OSQPConfig) */ {
 public:
  OSQPConfig();
  virtual ~OSQPConfig();

  OSQPConfig(const OSQPConfig& from);

  inline OSQPConfig& operator=(const OSQPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OSQPConfig(OSQPConfig&& from) noexcept
    : OSQPConfig() {
    *this = ::std::move(from);
  }

  inline OSQPConfig& operator=(OSQPConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OSQPConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OSQPConfig* internal_default_instance() {
    return reinterpret_cast<const OSQPConfig*>(
               &_OSQPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OSQPConfig* other);
  friend void swap(OSQPConfig& a, OSQPConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OSQPConfig* New() const final {
    return CreateMaybeMessage<OSQPConfig>(NULL);
  }

  OSQPConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OSQPConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OSQPConfig& from);
  void MergeFrom(const OSQPConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OSQPConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool osqp_debug_log = 6 [default = false];
  bool has_osqp_debug_log() const;
  void clear_osqp_debug_log();
  static const int kOsqpDebugLogFieldNumber = 6;
  bool osqp_debug_log() const;
  void set_osqp_debug_log(bool value);

  // optional double alpha = 1 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  double alpha() const;
  void set_alpha(double value);

  // optional double eps_abs = 2 [default = 0.001];
  bool has_eps_abs() const;
  void clear_eps_abs();
  static const int kEpsAbsFieldNumber = 2;
  double eps_abs() const;
  void set_eps_abs(double value);

  // optional double eps_rel = 3 [default = 0.001];
  bool has_eps_rel() const;
  void clear_eps_rel();
  static const int kEpsRelFieldNumber = 3;
  double eps_rel() const;
  void set_eps_rel(double value);

  // optional int32 max_iter = 4 [default = 10000];
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 4;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional bool polish = 5 [default = true];
  bool has_polish() const;
  void clear_polish();
  static const int kPolishFieldNumber = 5;
  bool polish() const;
  void set_polish(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OSQPConfig)
 private:
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_eps_abs();
  void clear_has_eps_abs();
  void set_has_eps_rel();
  void clear_has_eps_rel();
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_polish();
  void clear_has_polish();
  void set_has_osqp_debug_log();
  void clear_has_osqp_debug_log();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool osqp_debug_log_;
  double alpha_;
  double eps_abs_;
  double eps_rel_;
  ::google::protobuf::int32 max_iter_;
  bool polish_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IterativeAnchoringConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.IterativeAnchoringConfig) */ {
 public:
  IterativeAnchoringConfig();
  virtual ~IterativeAnchoringConfig();

  IterativeAnchoringConfig(const IterativeAnchoringConfig& from);

  inline IterativeAnchoringConfig& operator=(const IterativeAnchoringConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IterativeAnchoringConfig(IterativeAnchoringConfig&& from) noexcept
    : IterativeAnchoringConfig() {
    *this = ::std::move(from);
  }

  inline IterativeAnchoringConfig& operator=(IterativeAnchoringConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IterativeAnchoringConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IterativeAnchoringConfig* internal_default_instance() {
    return reinterpret_cast<const IterativeAnchoringConfig*>(
               &_IterativeAnchoringConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IterativeAnchoringConfig* other);
  friend void swap(IterativeAnchoringConfig& a, IterativeAnchoringConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IterativeAnchoringConfig* New() const final {
    return CreateMaybeMessage<IterativeAnchoringConfig>(NULL);
  }

  IterativeAnchoringConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IterativeAnchoringConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IterativeAnchoringConfig& from);
  void MergeFrom(const IterativeAnchoringConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IterativeAnchoringConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  bool has_fem_pos_deviation_smoother_config() const;
  void clear_fem_pos_deviation_smoother_config();
  static const int kFemPosDeviationSmootherConfigFieldNumber = 8;
  private:
  const ::apollo::planning::FemPosDeviationSmootherConfig& _internal_fem_pos_deviation_smoother_config() const;
  public:
  const ::apollo::planning::FemPosDeviationSmootherConfig& fem_pos_deviation_smoother_config() const;
  ::apollo::planning::FemPosDeviationSmootherConfig* release_fem_pos_deviation_smoother_config();
  ::apollo::planning::FemPosDeviationSmootherConfig* mutable_fem_pos_deviation_smoother_config();
  void set_allocated_fem_pos_deviation_smoother_config(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config);

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  bool has_s_curve_config() const;
  void clear_s_curve_config();
  static const int kSCurveConfigFieldNumber = 16;
  private:
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& _internal_s_curve_config() const;
  public:
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config() const;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* release_s_curve_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* mutable_s_curve_config();
  void set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config);

  // optional bool estimate_bound = 5 [default = false];
  bool has_estimate_bound() const;
  void clear_estimate_bound();
  static const int kEstimateBoundFieldNumber = 5;
  bool estimate_bound() const;
  void set_estimate_bound(bool value);

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  bool has_reanchoring_trails_num() const;
  void clear_reanchoring_trails_num();
  static const int kReanchoringTrailsNumFieldNumber = 2;
  ::google::protobuf::int32 reanchoring_trails_num() const;
  void set_reanchoring_trails_num(::google::protobuf::int32 value);

  // optional double interpolated_delta_s = 1 [default = 0.1];
  bool has_interpolated_delta_s() const;
  void clear_interpolated_delta_s();
  static const int kInterpolatedDeltaSFieldNumber = 1;
  double interpolated_delta_s() const;
  void set_interpolated_delta_s(double value);

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  bool has_reanchoring_pos_stddev() const;
  void clear_reanchoring_pos_stddev();
  static const int kReanchoringPosStddevFieldNumber = 3;
  double reanchoring_pos_stddev() const;
  void set_reanchoring_pos_stddev(double value);

  // optional double reanchoring_length_stddev = 4 [default = 1];
  bool has_reanchoring_length_stddev() const;
  void clear_reanchoring_length_stddev();
  static const int kReanchoringLengthStddevFieldNumber = 4;
  double reanchoring_length_stddev() const;
  void set_reanchoring_length_stddev(double value);

  // optional double default_bound = 6 [default = 2];
  bool has_default_bound() const;
  void clear_default_bound();
  static const int kDefaultBoundFieldNumber = 6;
  double default_bound() const;
  void set_default_bound(double value);

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  bool has_vehicle_shortest_dimension() const;
  void clear_vehicle_shortest_dimension();
  static const int kVehicleShortestDimensionFieldNumber = 7;
  double vehicle_shortest_dimension() const;
  void set_vehicle_shortest_dimension(double value);

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  bool has_collision_decrease_ratio() const;
  void clear_collision_decrease_ratio();
  static const int kCollisionDecreaseRatioFieldNumber = 9;
  double collision_decrease_ratio() const;
  void set_collision_decrease_ratio(double value);

  // optional double max_forward_v = 10 [default = 2];
  bool has_max_forward_v() const;
  void clear_max_forward_v();
  static const int kMaxForwardVFieldNumber = 10;
  double max_forward_v() const;
  void set_max_forward_v(double value);

  // optional double max_reverse_v = 11 [default = 2];
  bool has_max_reverse_v() const;
  void clear_max_reverse_v();
  static const int kMaxReverseVFieldNumber = 11;
  double max_reverse_v() const;
  void set_max_reverse_v(double value);

  // optional double max_forward_acc = 12 [default = 3];
  bool has_max_forward_acc() const;
  void clear_max_forward_acc();
  static const int kMaxForwardAccFieldNumber = 12;
  double max_forward_acc() const;
  void set_max_forward_acc(double value);

  // optional double max_reverse_acc = 13 [default = 2];
  bool has_max_reverse_acc() const;
  void clear_max_reverse_acc();
  static const int kMaxReverseAccFieldNumber = 13;
  double max_reverse_acc() const;
  void set_max_reverse_acc(double value);

  // optional double max_acc_jerk = 14 [default = 4];
  bool has_max_acc_jerk() const;
  void clear_max_acc_jerk();
  static const int kMaxAccJerkFieldNumber = 14;
  double max_acc_jerk() const;
  void set_max_acc_jerk(double value);

  // optional double delta_t = 15 [default = 0.2];
  bool has_delta_t() const;
  void clear_delta_t();
  static const int kDeltaTFieldNumber = 15;
  double delta_t() const;
  void set_delta_t(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.IterativeAnchoringConfig)
 private:
  void set_has_interpolated_delta_s();
  void clear_has_interpolated_delta_s();
  void set_has_reanchoring_trails_num();
  void clear_has_reanchoring_trails_num();
  void set_has_reanchoring_pos_stddev();
  void clear_has_reanchoring_pos_stddev();
  void set_has_reanchoring_length_stddev();
  void clear_has_reanchoring_length_stddev();
  void set_has_estimate_bound();
  void clear_has_estimate_bound();
  void set_has_default_bound();
  void clear_has_default_bound();
  void set_has_vehicle_shortest_dimension();
  void clear_has_vehicle_shortest_dimension();
  void set_has_fem_pos_deviation_smoother_config();
  void clear_has_fem_pos_deviation_smoother_config();
  void set_has_collision_decrease_ratio();
  void clear_has_collision_decrease_ratio();
  void set_has_max_forward_v();
  void clear_has_max_forward_v();
  void set_has_max_reverse_v();
  void clear_has_max_reverse_v();
  void set_has_max_forward_acc();
  void clear_has_max_forward_acc();
  void set_has_max_reverse_acc();
  void clear_has_max_reverse_acc();
  void set_has_max_acc_jerk();
  void clear_has_max_acc_jerk();
  void set_has_delta_t();
  void clear_has_delta_t();
  void set_has_s_curve_config();
  void clear_has_s_curve_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config_;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config_;
  bool estimate_bound_;
  ::google::protobuf::int32 reanchoring_trails_num_;
  double interpolated_delta_s_;
  double reanchoring_pos_stddev_;
  double reanchoring_length_stddev_;
  double default_bound_;
  double vehicle_shortest_dimension_;
  double collision_decrease_ratio_;
  double max_forward_v_;
  double max_reverse_v_;
  double max_forward_acc_;
  double max_reverse_acc_;
  double max_acc_jerk_;
  double delta_t_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryPartitionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TrajectoryPartitionConfig) */ {
 public:
  TrajectoryPartitionConfig();
  virtual ~TrajectoryPartitionConfig();

  TrajectoryPartitionConfig(const TrajectoryPartitionConfig& from);

  inline TrajectoryPartitionConfig& operator=(const TrajectoryPartitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryPartitionConfig(TrajectoryPartitionConfig&& from) noexcept
    : TrajectoryPartitionConfig() {
    *this = ::std::move(from);
  }

  inline TrajectoryPartitionConfig& operator=(TrajectoryPartitionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPartitionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPartitionConfig* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPartitionConfig*>(
               &_TrajectoryPartitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TrajectoryPartitionConfig* other);
  friend void swap(TrajectoryPartitionConfig& a, TrajectoryPartitionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPartitionConfig* New() const final {
    return CreateMaybeMessage<TrajectoryPartitionConfig>(NULL);
  }

  TrajectoryPartitionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPartitionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryPartitionConfig& from);
  void MergeFrom(const TrajectoryPartitionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPartitionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  bool has_interpolated_pieces_num() const;
  void clear_interpolated_pieces_num();
  static const int kInterpolatedPiecesNumFieldNumber = 1;
  ::google::protobuf::uint64 interpolated_pieces_num() const;
  void set_interpolated_pieces_num(::google::protobuf::uint64 value);

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  bool has_initial_gear_check_horizon() const;
  void clear_initial_gear_check_horizon();
  static const int kInitialGearCheckHorizonFieldNumber = 2;
  ::google::protobuf::uint64 initial_gear_check_horizon() const;
  void set_initial_gear_check_horizon(::google::protobuf::uint64 value);

  // optional double heading_searching_range = 3 [default = 0.3];
  bool has_heading_searching_range() const;
  void clear_heading_searching_range();
  static const int kHeadingSearchingRangeFieldNumber = 3;
  double heading_searching_range() const;
  void set_heading_searching_range(double value);

  // optional double gear_shift_period_duration = 4 [default = 2];
  bool has_gear_shift_period_duration() const;
  void clear_gear_shift_period_duration();
  static const int kGearShiftPeriodDurationFieldNumber = 4;
  double gear_shift_period_duration() const;
  void set_gear_shift_period_duration(double value);

  // optional double gear_shift_max_t = 5 [default = 3];
  bool has_gear_shift_max_t() const;
  void clear_gear_shift_max_t();
  static const int kGearShiftMaxTFieldNumber = 5;
  double gear_shift_max_t() const;
  void set_gear_shift_max_t(double value);

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  bool has_gear_shift_unit_t() const;
  void clear_gear_shift_unit_t();
  static const int kGearShiftUnitTFieldNumber = 6;
  double gear_shift_unit_t() const;
  void set_gear_shift_unit_t(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.TrajectoryPartitionConfig)
 private:
  void set_has_interpolated_pieces_num();
  void clear_has_interpolated_pieces_num();
  void set_has_initial_gear_check_horizon();
  void clear_has_initial_gear_check_horizon();
  void set_has_heading_searching_range();
  void clear_has_heading_searching_range();
  void set_has_gear_shift_period_duration();
  void clear_has_gear_shift_period_duration();
  void set_has_gear_shift_max_t();
  void clear_has_gear_shift_max_t();
  void set_has_gear_shift_unit_t();
  void clear_has_gear_shift_unit_t();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 interpolated_pieces_num_;
  ::google::protobuf::uint64 initial_gear_check_horizon_;
  double heading_searching_range_;
  double gear_shift_period_duration_;
  double gear_shift_max_t_;
  double gear_shift_unit_t_;
  friend struct ::protobuf_planner_5fopen_5fspace_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlannerOpenSpaceConfig

// optional .apollo.planning.ROIConfig roi_config = 1;
inline bool PlannerOpenSpaceConfig::has_roi_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_roi_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlannerOpenSpaceConfig::clear_has_roi_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlannerOpenSpaceConfig::clear_roi_config() {
  if (roi_config_ != NULL) roi_config_->Clear();
  clear_has_roi_config();
}
inline const ::apollo::planning::ROIConfig& PlannerOpenSpaceConfig::_internal_roi_config() const {
  return *roi_config_;
}
inline const ::apollo::planning::ROIConfig& PlannerOpenSpaceConfig::roi_config() const {
  const ::apollo::planning::ROIConfig* p = roi_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.roi_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::ROIConfig*>(
      &::apollo::planning::_ROIConfig_default_instance_);
}
inline ::apollo::planning::ROIConfig* PlannerOpenSpaceConfig::release_roi_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerOpenSpaceConfig.roi_config)
  clear_has_roi_config();
  ::apollo::planning::ROIConfig* temp = roi_config_;
  roi_config_ = NULL;
  return temp;
}
inline ::apollo::planning::ROIConfig* PlannerOpenSpaceConfig::mutable_roi_config() {
  set_has_roi_config();
  if (roi_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::ROIConfig>(GetArenaNoVirtual());
    roi_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.roi_config)
  return roi_config_;
}
inline void PlannerOpenSpaceConfig::set_allocated_roi_config(::apollo::planning::ROIConfig* roi_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roi_config_;
  }
  if (roi_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roi_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi_config, submessage_arena);
    }
    set_has_roi_config();
  } else {
    clear_has_roi_config();
  }
  roi_config_ = roi_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.roi_config)
}

// optional .apollo.planning.WarmStartConfig warm_start_config = 2;
inline bool PlannerOpenSpaceConfig::has_warm_start_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlannerOpenSpaceConfig::clear_has_warm_start_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlannerOpenSpaceConfig::clear_warm_start_config() {
  if (warm_start_config_ != NULL) warm_start_config_->Clear();
  clear_has_warm_start_config();
}
inline const ::apollo::planning::WarmStartConfig& PlannerOpenSpaceConfig::_internal_warm_start_config() const {
  return *warm_start_config_;
}
inline const ::apollo::planning::WarmStartConfig& PlannerOpenSpaceConfig::warm_start_config() const {
  const ::apollo::planning::WarmStartConfig* p = warm_start_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::WarmStartConfig*>(
      &::apollo::planning::_WarmStartConfig_default_instance_);
}
inline ::apollo::planning::WarmStartConfig* PlannerOpenSpaceConfig::release_warm_start_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
  clear_has_warm_start_config();
  ::apollo::planning::WarmStartConfig* temp = warm_start_config_;
  warm_start_config_ = NULL;
  return temp;
}
inline ::apollo::planning::WarmStartConfig* PlannerOpenSpaceConfig::mutable_warm_start_config() {
  set_has_warm_start_config();
  if (warm_start_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::WarmStartConfig>(GetArenaNoVirtual());
    warm_start_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
  return warm_start_config_;
}
inline void PlannerOpenSpaceConfig::set_allocated_warm_start_config(::apollo::planning::WarmStartConfig* warm_start_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete warm_start_config_;
  }
  if (warm_start_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warm_start_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warm_start_config, submessage_arena);
    }
    set_has_warm_start_config();
  } else {
    clear_has_warm_start_config();
  }
  warm_start_config_ = warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
}

// optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
inline bool PlannerOpenSpaceConfig::has_dual_variable_warm_start_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlannerOpenSpaceConfig::clear_has_dual_variable_warm_start_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlannerOpenSpaceConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != NULL) dual_variable_warm_start_config_->Clear();
  clear_has_dual_variable_warm_start_config();
}
inline const ::apollo::planning::DualVariableWarmStartConfig& PlannerOpenSpaceConfig::_internal_dual_variable_warm_start_config() const {
  return *dual_variable_warm_start_config_;
}
inline const ::apollo::planning::DualVariableWarmStartConfig& PlannerOpenSpaceConfig::dual_variable_warm_start_config() const {
  const ::apollo::planning::DualVariableWarmStartConfig* p = dual_variable_warm_start_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::DualVariableWarmStartConfig*>(
      &::apollo::planning::_DualVariableWarmStartConfig_default_instance_);
}
inline ::apollo::planning::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  clear_has_dual_variable_warm_start_config();
  ::apollo::planning::DualVariableWarmStartConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = NULL;
  return temp;
}
inline ::apollo::planning::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::mutable_dual_variable_warm_start_config() {
  set_has_dual_variable_warm_start_config();
  if (dual_variable_warm_start_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::DualVariableWarmStartConfig>(GetArenaNoVirtual());
    dual_variable_warm_start_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_;
}
inline void PlannerOpenSpaceConfig::set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dual_variable_warm_start_config_;
  }
  if (dual_variable_warm_start_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dual_variable_warm_start_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dual_variable_warm_start_config, submessage_arena);
    }
    set_has_dual_variable_warm_start_config();
  } else {
    clear_has_dual_variable_warm_start_config();
  }
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
}

// optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
inline bool PlannerOpenSpaceConfig::has_distance_approach_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_distance_approach_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlannerOpenSpaceConfig::clear_has_distance_approach_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlannerOpenSpaceConfig::clear_distance_approach_config() {
  if (distance_approach_config_ != NULL) distance_approach_config_->Clear();
  clear_has_distance_approach_config();
}
inline const ::apollo::planning::DistanceApproachConfig& PlannerOpenSpaceConfig::_internal_distance_approach_config() const {
  return *distance_approach_config_;
}
inline const ::apollo::planning::DistanceApproachConfig& PlannerOpenSpaceConfig::distance_approach_config() const {
  const ::apollo::planning::DistanceApproachConfig* p = distance_approach_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::DistanceApproachConfig*>(
      &::apollo::planning::_DistanceApproachConfig_default_instance_);
}
inline ::apollo::planning::DistanceApproachConfig* PlannerOpenSpaceConfig::release_distance_approach_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
  clear_has_distance_approach_config();
  ::apollo::planning::DistanceApproachConfig* temp = distance_approach_config_;
  distance_approach_config_ = NULL;
  return temp;
}
inline ::apollo::planning::DistanceApproachConfig* PlannerOpenSpaceConfig::mutable_distance_approach_config() {
  set_has_distance_approach_config();
  if (distance_approach_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::DistanceApproachConfig>(GetArenaNoVirtual());
    distance_approach_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
  return distance_approach_config_;
}
inline void PlannerOpenSpaceConfig::set_allocated_distance_approach_config(::apollo::planning::DistanceApproachConfig* distance_approach_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete distance_approach_config_;
  }
  if (distance_approach_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distance_approach_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distance_approach_config, submessage_arena);
    }
    set_has_distance_approach_config();
  } else {
    clear_has_distance_approach_config();
  }
  distance_approach_config_ = distance_approach_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
}

// optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
inline bool PlannerOpenSpaceConfig::has_iterative_anchoring_smoother_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_iterative_anchoring_smoother_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlannerOpenSpaceConfig::clear_has_iterative_anchoring_smoother_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlannerOpenSpaceConfig::clear_iterative_anchoring_smoother_config() {
  if (iterative_anchoring_smoother_config_ != NULL) iterative_anchoring_smoother_config_->Clear();
  clear_has_iterative_anchoring_smoother_config();
}
inline const ::apollo::planning::IterativeAnchoringConfig& PlannerOpenSpaceConfig::_internal_iterative_anchoring_smoother_config() const {
  return *iterative_anchoring_smoother_config_;
}
inline const ::apollo::planning::IterativeAnchoringConfig& PlannerOpenSpaceConfig::iterative_anchoring_smoother_config() const {
  const ::apollo::planning::IterativeAnchoringConfig* p = iterative_anchoring_smoother_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::IterativeAnchoringConfig*>(
      &::apollo::planning::_IterativeAnchoringConfig_default_instance_);
}
inline ::apollo::planning::IterativeAnchoringConfig* PlannerOpenSpaceConfig::release_iterative_anchoring_smoother_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  clear_has_iterative_anchoring_smoother_config();
  ::apollo::planning::IterativeAnchoringConfig* temp = iterative_anchoring_smoother_config_;
  iterative_anchoring_smoother_config_ = NULL;
  return temp;
}
inline ::apollo::planning::IterativeAnchoringConfig* PlannerOpenSpaceConfig::mutable_iterative_anchoring_smoother_config() {
  set_has_iterative_anchoring_smoother_config();
  if (iterative_anchoring_smoother_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::IterativeAnchoringConfig>(GetArenaNoVirtual());
    iterative_anchoring_smoother_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return iterative_anchoring_smoother_config_;
}
inline void PlannerOpenSpaceConfig::set_allocated_iterative_anchoring_smoother_config(::apollo::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete iterative_anchoring_smoother_config_;
  }
  if (iterative_anchoring_smoother_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      iterative_anchoring_smoother_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, iterative_anchoring_smoother_config, submessage_arena);
    }
    set_has_iterative_anchoring_smoother_config();
  } else {
    clear_has_iterative_anchoring_smoother_config();
  }
  iterative_anchoring_smoother_config_ = iterative_anchoring_smoother_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
}

// optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
inline bool PlannerOpenSpaceConfig::has_trajectory_partition_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_trajectory_partition_config() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlannerOpenSpaceConfig::clear_has_trajectory_partition_config() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlannerOpenSpaceConfig::clear_trajectory_partition_config() {
  if (trajectory_partition_config_ != NULL) trajectory_partition_config_->Clear();
  clear_has_trajectory_partition_config();
}
inline const ::apollo::planning::TrajectoryPartitionConfig& PlannerOpenSpaceConfig::_internal_trajectory_partition_config() const {
  return *trajectory_partition_config_;
}
inline const ::apollo::planning::TrajectoryPartitionConfig& PlannerOpenSpaceConfig::trajectory_partition_config() const {
  const ::apollo::planning::TrajectoryPartitionConfig* p = trajectory_partition_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::TrajectoryPartitionConfig*>(
      &::apollo::planning::_TrajectoryPartitionConfig_default_instance_);
}
inline ::apollo::planning::TrajectoryPartitionConfig* PlannerOpenSpaceConfig::release_trajectory_partition_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  clear_has_trajectory_partition_config();
  ::apollo::planning::TrajectoryPartitionConfig* temp = trajectory_partition_config_;
  trajectory_partition_config_ = NULL;
  return temp;
}
inline ::apollo::planning::TrajectoryPartitionConfig* PlannerOpenSpaceConfig::mutable_trajectory_partition_config() {
  set_has_trajectory_partition_config();
  if (trajectory_partition_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::TrajectoryPartitionConfig>(GetArenaNoVirtual());
    trajectory_partition_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  return trajectory_partition_config_;
}
inline void PlannerOpenSpaceConfig::set_allocated_trajectory_partition_config(::apollo::planning::TrajectoryPartitionConfig* trajectory_partition_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trajectory_partition_config_;
  }
  if (trajectory_partition_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trajectory_partition_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory_partition_config, submessage_arena);
    }
    set_has_trajectory_partition_config();
  } else {
    clear_has_trajectory_partition_config();
  }
  trajectory_partition_config_ = trajectory_partition_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
}

// optional float delta_t = 7 [default = 1];
inline bool PlannerOpenSpaceConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlannerOpenSpaceConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlannerOpenSpaceConfig::clear_delta_t() {
  delta_t_ = 1;
  clear_has_delta_t();
}
inline float PlannerOpenSpaceConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.delta_t)
  return delta_t_;
}
inline void PlannerOpenSpaceConfig::set_delta_t(float value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.delta_t)
}

// optional double is_near_destination_threshold = 8 [default = 0.001];
inline bool PlannerOpenSpaceConfig::has_is_near_destination_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_is_near_destination_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlannerOpenSpaceConfig::clear_has_is_near_destination_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlannerOpenSpaceConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  clear_has_is_near_destination_threshold();
}
inline double PlannerOpenSpaceConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
  return is_near_destination_threshold_;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_threshold(double value) {
  set_has_is_near_destination_threshold();
  is_near_destination_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
}

// optional bool enable_check_parallel_trajectory = 9 [default = false];
inline bool PlannerOpenSpaceConfig::has_enable_check_parallel_trajectory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_enable_check_parallel_trajectory() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlannerOpenSpaceConfig::clear_has_enable_check_parallel_trajectory() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlannerOpenSpaceConfig::clear_enable_check_parallel_trajectory() {
  enable_check_parallel_trajectory_ = false;
  clear_has_enable_check_parallel_trajectory();
}
inline bool PlannerOpenSpaceConfig::enable_check_parallel_trajectory() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
  return enable_check_parallel_trajectory_;
}
inline void PlannerOpenSpaceConfig::set_enable_check_parallel_trajectory(bool value) {
  set_has_enable_check_parallel_trajectory();
  enable_check_parallel_trajectory_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
}

// optional bool enable_linear_interpolation = 10 [default = false];
inline bool PlannerOpenSpaceConfig::has_enable_linear_interpolation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_enable_linear_interpolation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlannerOpenSpaceConfig::clear_has_enable_linear_interpolation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlannerOpenSpaceConfig::clear_enable_linear_interpolation() {
  enable_linear_interpolation_ = false;
  clear_has_enable_linear_interpolation();
}
inline bool PlannerOpenSpaceConfig::enable_linear_interpolation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
  return enable_linear_interpolation_;
}
inline void PlannerOpenSpaceConfig::set_enable_linear_interpolation(bool value) {
  set_has_enable_linear_interpolation();
  enable_linear_interpolation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
}

// optional double is_near_destination_theta_threshold = 11 [default = 0.05];
inline bool PlannerOpenSpaceConfig::has_is_near_destination_theta_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_is_near_destination_theta_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlannerOpenSpaceConfig::clear_has_is_near_destination_theta_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlannerOpenSpaceConfig::clear_is_near_destination_theta_threshold() {
  is_near_destination_theta_threshold_ = 0.05;
  clear_has_is_near_destination_theta_threshold();
}
inline double PlannerOpenSpaceConfig::is_near_destination_theta_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
  return is_near_destination_theta_threshold_;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_theta_threshold(double value) {
  set_has_is_near_destination_theta_threshold();
  is_near_destination_theta_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
}

// -------------------------------------------------------------------

// ROIConfig

// optional double roi_longitudinal_range_start = 1 [default = 10];
inline bool ROIConfig::has_roi_longitudinal_range_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIConfig::set_has_roi_longitudinal_range_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIConfig::clear_has_roi_longitudinal_range_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 10;
  clear_has_roi_longitudinal_range_start();
}
inline double ROIConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.roi_longitudinal_range_start)
  return roi_longitudinal_range_start_;
}
inline void ROIConfig::set_roi_longitudinal_range_start(double value) {
  set_has_roi_longitudinal_range_start();
  roi_longitudinal_range_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.roi_longitudinal_range_start)
}

// optional double roi_longitudinal_range_end = 2 [default = 10];
inline bool ROIConfig::has_roi_longitudinal_range_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIConfig::set_has_roi_longitudinal_range_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIConfig::clear_has_roi_longitudinal_range_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 10;
  clear_has_roi_longitudinal_range_end();
}
inline double ROIConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.roi_longitudinal_range_end)
  return roi_longitudinal_range_end_;
}
inline void ROIConfig::set_roi_longitudinal_range_end(double value) {
  set_has_roi_longitudinal_range_end();
  roi_longitudinal_range_end_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.roi_longitudinal_range_end)
}

// optional double parking_start_range = 3 [default = 7];
inline bool ROIConfig::has_parking_start_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIConfig::set_has_parking_start_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIConfig::clear_has_parking_start_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  clear_has_parking_start_range();
}
inline double ROIConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.parking_start_range)
  return parking_start_range_;
}
inline void ROIConfig::set_parking_start_range(double value) {
  set_has_parking_start_range();
  parking_start_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.parking_start_range)
}

// optional bool parking_inwards = 4 [default = false];
inline bool ROIConfig::has_parking_inwards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIConfig::set_has_parking_inwards() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIConfig::clear_has_parking_inwards() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  clear_has_parking_inwards();
}
inline bool ROIConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.parking_inwards)
  return parking_inwards_;
}
inline void ROIConfig::set_parking_inwards(bool value) {
  set_has_parking_inwards();
  parking_inwards_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.parking_inwards)
}

// -------------------------------------------------------------------

// WarmStartConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
inline bool WarmStartConfig::has_xy_grid_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarmStartConfig::set_has_xy_grid_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarmStartConfig::clear_has_xy_grid_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarmStartConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  clear_has_xy_grid_resolution();
}
inline double WarmStartConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.xy_grid_resolution)
  return xy_grid_resolution_;
}
inline void WarmStartConfig::set_xy_grid_resolution(double value) {
  set_has_xy_grid_resolution();
  xy_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
inline bool WarmStartConfig::has_phi_grid_resolution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarmStartConfig::set_has_phi_grid_resolution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarmStartConfig::clear_has_phi_grid_resolution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WarmStartConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  clear_has_phi_grid_resolution();
}
inline double WarmStartConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.phi_grid_resolution)
  return phi_grid_resolution_;
}
inline void WarmStartConfig::set_phi_grid_resolution(double value) {
  set_has_phi_grid_resolution();
  phi_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
inline bool WarmStartConfig::has_next_node_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WarmStartConfig::set_has_next_node_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WarmStartConfig::clear_has_next_node_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WarmStartConfig::clear_next_node_num() {
  next_node_num_ = GOOGLE_ULONGLONG(10);
  clear_has_next_node_num();
}
inline ::google::protobuf::uint64 WarmStartConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.next_node_num)
  return next_node_num_;
}
inline void WarmStartConfig::set_next_node_num(::google::protobuf::uint64 value) {
  set_has_next_node_num();
  next_node_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
inline bool WarmStartConfig::has_step_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WarmStartConfig::set_has_step_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WarmStartConfig::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WarmStartConfig::clear_step_size() {
  step_size_ = 0.5;
  clear_has_step_size();
}
inline double WarmStartConfig::step_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.step_size)
  return step_size_;
}
inline void WarmStartConfig::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
inline bool WarmStartConfig::has_traj_forward_penalty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarmStartConfig::set_has_traj_forward_penalty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarmStartConfig::clear_has_traj_forward_penalty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarmStartConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  clear_has_traj_forward_penalty();
}
inline double WarmStartConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_forward_penalty)
  return traj_forward_penalty_;
}
inline void WarmStartConfig::set_traj_forward_penalty(double value) {
  set_has_traj_forward_penalty();
  traj_forward_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
inline bool WarmStartConfig::has_traj_back_penalty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarmStartConfig::set_has_traj_back_penalty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarmStartConfig::clear_has_traj_back_penalty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarmStartConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  clear_has_traj_back_penalty();
}
inline double WarmStartConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_back_penalty)
  return traj_back_penalty_;
}
inline void WarmStartConfig::set_traj_back_penalty(double value) {
  set_has_traj_back_penalty();
  traj_back_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
inline bool WarmStartConfig::has_traj_gear_switch_penalty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WarmStartConfig::set_has_traj_gear_switch_penalty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WarmStartConfig::clear_has_traj_gear_switch_penalty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WarmStartConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  clear_has_traj_gear_switch_penalty();
}
inline double WarmStartConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_gear_switch_penalty)
  return traj_gear_switch_penalty_;
}
inline void WarmStartConfig::set_traj_gear_switch_penalty(double value) {
  set_has_traj_gear_switch_penalty();
  traj_gear_switch_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
inline bool WarmStartConfig::has_traj_steer_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WarmStartConfig::set_has_traj_steer_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WarmStartConfig::clear_has_traj_steer_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WarmStartConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  clear_has_traj_steer_penalty();
}
inline double WarmStartConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_steer_penalty)
  return traj_steer_penalty_;
}
inline void WarmStartConfig::set_traj_steer_penalty(double value) {
  set_has_traj_steer_penalty();
  traj_steer_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
inline bool WarmStartConfig::has_traj_steer_change_penalty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WarmStartConfig::set_has_traj_steer_change_penalty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WarmStartConfig::clear_has_traj_steer_change_penalty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WarmStartConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  clear_has_traj_steer_change_penalty();
}
inline double WarmStartConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_steer_change_penalty)
  return traj_steer_change_penalty_;
}
inline void WarmStartConfig::set_traj_steer_change_penalty(double value) {
  set_has_traj_steer_change_penalty();
  traj_steer_change_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
inline bool WarmStartConfig::has_grid_a_star_xy_resolution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WarmStartConfig::set_has_grid_a_star_xy_resolution() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WarmStartConfig::clear_has_grid_a_star_xy_resolution() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WarmStartConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  clear_has_grid_a_star_xy_resolution();
}
inline double WarmStartConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.grid_a_star_xy_resolution)
  return grid_a_star_xy_resolution_;
}
inline void WarmStartConfig::set_grid_a_star_xy_resolution(double value) {
  set_has_grid_a_star_xy_resolution();
  grid_a_star_xy_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
inline bool WarmStartConfig::has_node_radius() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WarmStartConfig::set_has_node_radius() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WarmStartConfig::clear_has_node_radius() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WarmStartConfig::clear_node_radius() {
  node_radius_ = 0.5;
  clear_has_node_radius();
}
inline double WarmStartConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.node_radius)
  return node_radius_;
}
inline void WarmStartConfig::set_node_radius(double value) {
  set_has_node_radius();
  node_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.node_radius)
}

// optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
inline bool WarmStartConfig::has_s_curve_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarmStartConfig::set_has_s_curve_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarmStartConfig::clear_has_s_curve_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& WarmStartConfig::_internal_s_curve_config() const {
  return *s_curve_config_;
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& WarmStartConfig::s_curve_config() const {
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* p = s_curve_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.s_curve_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      &::apollo::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::release_s_curve_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.WarmStartConfig.s_curve_config)
  clear_has_s_curve_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = NULL;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::mutable_s_curve_config() {
  set_has_s_curve_config();
  if (s_curve_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkSpeedOptimizerConfig>(GetArenaNoVirtual());
    s_curve_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.WarmStartConfig.s_curve_config)
  return s_curve_config_;
}
inline void WarmStartConfig::set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(s_curve_config_);
  }
  if (s_curve_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s_curve_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s_curve_config, submessage_arena);
    }
    set_has_s_curve_config();
  } else {
    clear_has_s_curve_config();
  }
  s_curve_config_ = s_curve_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.WarmStartConfig.s_curve_config)
}

// optional double traj_kappa_contraint_ratio = 10 [default = 0.7];
inline bool WarmStartConfig::has_traj_kappa_contraint_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WarmStartConfig::set_has_traj_kappa_contraint_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WarmStartConfig::clear_has_traj_kappa_contraint_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WarmStartConfig::clear_traj_kappa_contraint_ratio() {
  traj_kappa_contraint_ratio_ = 0.7;
  clear_has_traj_kappa_contraint_ratio();
}
inline double WarmStartConfig::traj_kappa_contraint_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_kappa_contraint_ratio)
  return traj_kappa_contraint_ratio_;
}
inline void WarmStartConfig::set_traj_kappa_contraint_ratio(double value) {
  set_has_traj_kappa_contraint_ratio();
  traj_kappa_contraint_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_kappa_contraint_ratio)
}

// -------------------------------------------------------------------

// DualVariableWarmStartConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableWarmStartConfig::has_weight_d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_weight_d() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DualVariableWarmStartConfig::clear_has_weight_d() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DualVariableWarmStartConfig::clear_weight_d() {
  weight_d_ = 1;
  clear_has_weight_d();
}
inline double DualVariableWarmStartConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.weight_d)
  return weight_d_;
}
inline void DualVariableWarmStartConfig::set_weight_d(double value) {
  set_has_weight_d();
  weight_d_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.weight_d)
}

// optional .apollo.planning.IpoptConfig ipopt_config = 2;
inline bool DualVariableWarmStartConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DualVariableWarmStartConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DualVariableWarmStartConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->Clear();
  clear_has_ipopt_config();
}
inline const ::apollo::planning::IpoptConfig& DualVariableWarmStartConfig::_internal_ipopt_config() const {
  return *ipopt_config_;
}
inline const ::apollo::planning::IpoptConfig& DualVariableWarmStartConfig::ipopt_config() const {
  const ::apollo::planning::IpoptConfig* p = ipopt_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::IpoptConfig*>(
      &::apollo::planning::_IpoptConfig_default_instance_);
}
inline ::apollo::planning::IpoptConfig* DualVariableWarmStartConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
  clear_has_ipopt_config();
  ::apollo::planning::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline ::apollo::planning::IpoptConfig* DualVariableWarmStartConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::IpoptConfig>(GetArenaNoVirtual());
    ipopt_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
  return ipopt_config_;
}
inline void DualVariableWarmStartConfig::set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipopt_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
}

// optional .apollo.planning.DualWarmUpMode qp_format = 3;
inline bool DualVariableWarmStartConfig::has_qp_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_qp_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DualVariableWarmStartConfig::clear_has_qp_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DualVariableWarmStartConfig::clear_qp_format() {
  qp_format_ = 0;
  clear_has_qp_format();
}
inline ::apollo::planning::DualWarmUpMode DualVariableWarmStartConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.qp_format)
  return static_cast< ::apollo::planning::DualWarmUpMode >(qp_format_);
}
inline void DualVariableWarmStartConfig::set_qp_format(::apollo::planning::DualWarmUpMode value) {
  assert(::apollo::planning::DualWarmUpMode_IsValid(value));
  set_has_qp_format();
  qp_format_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableWarmStartConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DualVariableWarmStartConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DualVariableWarmStartConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DualVariableWarmStartConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DualVariableWarmStartConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableWarmStartConfig::has_debug_osqp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_debug_osqp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DualVariableWarmStartConfig::clear_has_debug_osqp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DualVariableWarmStartConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  clear_has_debug_osqp();
}
inline bool DualVariableWarmStartConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.debug_osqp)
  return debug_osqp_;
}
inline void DualVariableWarmStartConfig::set_debug_osqp(bool value) {
  set_has_debug_osqp();
  debug_osqp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
inline bool DualVariableWarmStartConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DualVariableWarmStartConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DualVariableWarmStartConfig::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
inline double DualVariableWarmStartConfig::beta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.beta)
  return beta_;
}
inline void DualVariableWarmStartConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.beta)
}

// optional .apollo.planning.OSQPConfig osqp_config = 7;
inline bool DualVariableWarmStartConfig::has_osqp_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_osqp_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DualVariableWarmStartConfig::clear_has_osqp_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DualVariableWarmStartConfig::clear_osqp_config() {
  if (osqp_config_ != NULL) osqp_config_->Clear();
  clear_has_osqp_config();
}
inline const ::apollo::planning::OSQPConfig& DualVariableWarmStartConfig::_internal_osqp_config() const {
  return *osqp_config_;
}
inline const ::apollo::planning::OSQPConfig& DualVariableWarmStartConfig::osqp_config() const {
  const ::apollo::planning::OSQPConfig* p = osqp_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.osqp_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::OSQPConfig*>(
      &::apollo::planning::_OSQPConfig_default_instance_);
}
inline ::apollo::planning::OSQPConfig* DualVariableWarmStartConfig::release_osqp_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DualVariableWarmStartConfig.osqp_config)
  clear_has_osqp_config();
  ::apollo::planning::OSQPConfig* temp = osqp_config_;
  osqp_config_ = NULL;
  return temp;
}
inline ::apollo::planning::OSQPConfig* DualVariableWarmStartConfig::mutable_osqp_config() {
  set_has_osqp_config();
  if (osqp_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::OSQPConfig>(GetArenaNoVirtual());
    osqp_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DualVariableWarmStartConfig.osqp_config)
  return osqp_config_;
}
inline void DualVariableWarmStartConfig::set_allocated_osqp_config(::apollo::planning::OSQPConfig* osqp_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete osqp_config_;
  }
  if (osqp_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      osqp_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, osqp_config, submessage_arena);
    }
    set_has_osqp_config();
  } else {
    clear_has_osqp_config();
  }
  osqp_config_ = osqp_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DualVariableWarmStartConfig.osqp_config)
}

// -------------------------------------------------------------------

// DistanceApproachConfig

// optional double weight_steer = 1;
inline bool DistanceApproachConfig::has_weight_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_steer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistanceApproachConfig::clear_has_weight_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistanceApproachConfig::clear_weight_steer() {
  weight_steer_ = 0;
  clear_has_weight_steer();
}
inline double DistanceApproachConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_steer)
  return weight_steer_;
}
inline void DistanceApproachConfig::set_weight_steer(double value) {
  set_has_weight_steer();
  weight_steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_steer)
}

// optional double weight_a = 2;
inline bool DistanceApproachConfig::has_weight_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistanceApproachConfig::clear_has_weight_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistanceApproachConfig::clear_weight_a() {
  weight_a_ = 0;
  clear_has_weight_a();
}
inline double DistanceApproachConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_a)
  return weight_a_;
}
inline void DistanceApproachConfig::set_weight_a(double value) {
  set_has_weight_a();
  weight_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_a)
}

// optional double weight_steer_rate = 3;
inline bool DistanceApproachConfig::has_weight_steer_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_steer_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistanceApproachConfig::clear_has_weight_steer_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistanceApproachConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  clear_has_weight_steer_rate();
}
inline double DistanceApproachConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_steer_rate)
  return weight_steer_rate_;
}
inline void DistanceApproachConfig::set_weight_steer_rate(double value) {
  set_has_weight_steer_rate();
  weight_steer_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
inline bool DistanceApproachConfig::has_weight_a_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_a_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistanceApproachConfig::clear_has_weight_a_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistanceApproachConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  clear_has_weight_a_rate();
}
inline double DistanceApproachConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_a_rate)
  return weight_a_rate_;
}
inline void DistanceApproachConfig::set_weight_a_rate(double value) {
  set_has_weight_a_rate();
  weight_a_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_a_rate)
}

// optional double weight_x = 5;
inline bool DistanceApproachConfig::has_weight_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistanceApproachConfig::clear_has_weight_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistanceApproachConfig::clear_weight_x() {
  weight_x_ = 0;
  clear_has_weight_x();
}
inline double DistanceApproachConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_x)
  return weight_x_;
}
inline void DistanceApproachConfig::set_weight_x(double value) {
  set_has_weight_x();
  weight_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_x)
}

// optional double weight_y = 6;
inline bool DistanceApproachConfig::has_weight_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistanceApproachConfig::clear_has_weight_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistanceApproachConfig::clear_weight_y() {
  weight_y_ = 0;
  clear_has_weight_y();
}
inline double DistanceApproachConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_y)
  return weight_y_;
}
inline void DistanceApproachConfig::set_weight_y(double value) {
  set_has_weight_y();
  weight_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_y)
}

// optional double weight_phi = 7;
inline bool DistanceApproachConfig::has_weight_phi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_phi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistanceApproachConfig::clear_has_weight_phi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistanceApproachConfig::clear_weight_phi() {
  weight_phi_ = 0;
  clear_has_weight_phi();
}
inline double DistanceApproachConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_phi)
  return weight_phi_;
}
inline void DistanceApproachConfig::set_weight_phi(double value) {
  set_has_weight_phi();
  weight_phi_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_phi)
}

// optional double weight_v = 8;
inline bool DistanceApproachConfig::has_weight_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistanceApproachConfig::clear_has_weight_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistanceApproachConfig::clear_weight_v() {
  weight_v_ = 0;
  clear_has_weight_v();
}
inline double DistanceApproachConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_v)
  return weight_v_;
}
inline void DistanceApproachConfig::set_weight_v(double value) {
  set_has_weight_v();
  weight_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
inline bool DistanceApproachConfig::has_weight_steer_stitching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_steer_stitching() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistanceApproachConfig::clear_has_weight_steer_stitching() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistanceApproachConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  clear_has_weight_steer_stitching();
}
inline double DistanceApproachConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_steer_stitching)
  return weight_steer_stitching_;
}
inline void DistanceApproachConfig::set_weight_steer_stitching(double value) {
  set_has_weight_steer_stitching();
  weight_steer_stitching_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
inline bool DistanceApproachConfig::has_weight_a_stitching() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_a_stitching() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistanceApproachConfig::clear_has_weight_a_stitching() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistanceApproachConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  clear_has_weight_a_stitching();
}
inline double DistanceApproachConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_a_stitching)
  return weight_a_stitching_;
}
inline void DistanceApproachConfig::set_weight_a_stitching(double value) {
  set_has_weight_a_stitching();
  weight_a_stitching_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
inline bool DistanceApproachConfig::has_weight_first_order_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_first_order_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DistanceApproachConfig::clear_has_weight_first_order_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DistanceApproachConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  clear_has_weight_first_order_time();
}
inline double DistanceApproachConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_first_order_time)
  return weight_first_order_time_;
}
inline void DistanceApproachConfig::set_weight_first_order_time(double value) {
  set_has_weight_first_order_time();
  weight_first_order_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
inline bool DistanceApproachConfig::has_weight_second_order_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_second_order_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DistanceApproachConfig::clear_has_weight_second_order_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DistanceApproachConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  clear_has_weight_second_order_time();
}
inline double DistanceApproachConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_second_order_time)
  return weight_second_order_time_;
}
inline void DistanceApproachConfig::set_weight_second_order_time(double value) {
  set_has_weight_second_order_time();
  weight_second_order_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
inline bool DistanceApproachConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DistanceApproachConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DistanceApproachConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DistanceApproachConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DistanceApproachConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DistanceApproachConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
inline bool DistanceApproachConfig::has_max_speed_forward() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_speed_forward() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DistanceApproachConfig::clear_has_max_speed_forward() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DistanceApproachConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  clear_has_max_speed_forward();
}
inline double DistanceApproachConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_speed_forward)
  return max_speed_forward_;
}
inline void DistanceApproachConfig::set_max_speed_forward(double value) {
  set_has_max_speed_forward();
  max_speed_forward_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
inline bool DistanceApproachConfig::has_max_speed_reverse() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_speed_reverse() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DistanceApproachConfig::clear_has_max_speed_reverse() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DistanceApproachConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  clear_has_max_speed_reverse();
}
inline double DistanceApproachConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_speed_reverse)
  return max_speed_reverse_;
}
inline void DistanceApproachConfig::set_max_speed_reverse(double value) {
  set_has_max_speed_reverse();
  max_speed_reverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
inline bool DistanceApproachConfig::has_max_acceleration_forward() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_acceleration_forward() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DistanceApproachConfig::clear_has_max_acceleration_forward() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DistanceApproachConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  clear_has_max_acceleration_forward();
}
inline double DistanceApproachConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_acceleration_forward)
  return max_acceleration_forward_;
}
inline void DistanceApproachConfig::set_max_acceleration_forward(double value) {
  set_has_max_acceleration_forward();
  max_acceleration_forward_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
inline bool DistanceApproachConfig::has_max_acceleration_reverse() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_acceleration_reverse() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DistanceApproachConfig::clear_has_max_acceleration_reverse() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DistanceApproachConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  clear_has_max_acceleration_reverse();
}
inline double DistanceApproachConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_acceleration_reverse)
  return max_acceleration_reverse_;
}
inline void DistanceApproachConfig::set_max_acceleration_reverse(double value) {
  set_has_max_acceleration_reverse();
  max_acceleration_reverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
inline bool DistanceApproachConfig::has_min_time_sample_scaling() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DistanceApproachConfig::set_has_min_time_sample_scaling() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DistanceApproachConfig::clear_has_min_time_sample_scaling() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DistanceApproachConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  clear_has_min_time_sample_scaling();
}
inline double DistanceApproachConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.min_time_sample_scaling)
  return min_time_sample_scaling_;
}
inline void DistanceApproachConfig::set_min_time_sample_scaling(double value) {
  set_has_min_time_sample_scaling();
  min_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
inline bool DistanceApproachConfig::has_max_time_sample_scaling() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_time_sample_scaling() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DistanceApproachConfig::clear_has_max_time_sample_scaling() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DistanceApproachConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  clear_has_max_time_sample_scaling();
}
inline double DistanceApproachConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_time_sample_scaling)
  return max_time_sample_scaling_;
}
inline void DistanceApproachConfig::set_max_time_sample_scaling(double value) {
  set_has_max_time_sample_scaling();
  max_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
inline bool DistanceApproachConfig::has_use_fix_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DistanceApproachConfig::set_has_use_fix_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DistanceApproachConfig::clear_has_use_fix_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DistanceApproachConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  clear_has_use_fix_time();
}
inline bool DistanceApproachConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.use_fix_time)
  return use_fix_time_;
}
inline void DistanceApproachConfig::set_use_fix_time(bool value) {
  set_has_use_fix_time();
  use_fix_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.use_fix_time)
}

// optional .apollo.planning.IpoptConfig ipopt_config = 21;
inline bool DistanceApproachConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistanceApproachConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistanceApproachConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistanceApproachConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->Clear();
  clear_has_ipopt_config();
}
inline const ::apollo::planning::IpoptConfig& DistanceApproachConfig::_internal_ipopt_config() const {
  return *ipopt_config_;
}
inline const ::apollo::planning::IpoptConfig& DistanceApproachConfig::ipopt_config() const {
  const ::apollo::planning::IpoptConfig* p = ipopt_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.ipopt_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::IpoptConfig*>(
      &::apollo::planning::_IpoptConfig_default_instance_);
}
inline ::apollo::planning::IpoptConfig* DistanceApproachConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DistanceApproachConfig.ipopt_config)
  clear_has_ipopt_config();
  ::apollo::planning::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline ::apollo::planning::IpoptConfig* DistanceApproachConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::IpoptConfig>(GetArenaNoVirtual());
    ipopt_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DistanceApproachConfig.ipopt_config)
  return ipopt_config_;
}
inline void DistanceApproachConfig::set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipopt_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DistanceApproachConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
inline bool DistanceApproachConfig::has_enable_constraint_check() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_constraint_check() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DistanceApproachConfig::clear_has_enable_constraint_check() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DistanceApproachConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  clear_has_enable_constraint_check();
}
inline bool DistanceApproachConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_constraint_check)
  return enable_constraint_check_;
}
inline void DistanceApproachConfig::set_enable_constraint_check(bool value) {
  set_has_enable_constraint_check();
  enable_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
inline bool DistanceApproachConfig::has_enable_hand_derivative() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_hand_derivative() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DistanceApproachConfig::clear_has_enable_hand_derivative() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DistanceApproachConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  clear_has_enable_hand_derivative();
}
inline bool DistanceApproachConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_hand_derivative)
  return enable_hand_derivative_;
}
inline void DistanceApproachConfig::set_enable_hand_derivative(bool value) {
  set_has_enable_hand_derivative();
  enable_hand_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
inline bool DistanceApproachConfig::has_enable_derivative_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_derivative_check() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DistanceApproachConfig::clear_has_enable_derivative_check() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DistanceApproachConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  clear_has_enable_derivative_check();
}
inline bool DistanceApproachConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_derivative_check)
  return enable_derivative_check_;
}
inline void DistanceApproachConfig::set_enable_derivative_check(bool value) {
  set_has_enable_derivative_check();
  enable_derivative_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
inline bool DistanceApproachConfig::has_enable_initial_final_check() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_initial_final_check() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DistanceApproachConfig::clear_has_enable_initial_final_check() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DistanceApproachConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  clear_has_enable_initial_final_check();
}
inline bool DistanceApproachConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_initial_final_check)
  return enable_initial_final_check_;
}
inline void DistanceApproachConfig::set_enable_initial_final_check(bool value) {
  set_has_enable_initial_final_check();
  enable_initial_final_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_initial_final_check)
}

// optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
inline bool DistanceApproachConfig::has_distance_approach_mode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DistanceApproachConfig::set_has_distance_approach_mode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DistanceApproachConfig::clear_has_distance_approach_mode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DistanceApproachConfig::clear_distance_approach_mode() {
  distance_approach_mode_ = 0;
  clear_has_distance_approach_mode();
}
inline ::apollo::planning::DistanceApproachMode DistanceApproachConfig::distance_approach_mode() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.distance_approach_mode)
  return static_cast< ::apollo::planning::DistanceApproachMode >(distance_approach_mode_);
}
inline void DistanceApproachConfig::set_distance_approach_mode(::apollo::planning::DistanceApproachMode value) {
  assert(::apollo::planning::DistanceApproachMode_IsValid(value));
  set_has_distance_approach_mode();
  distance_approach_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.distance_approach_mode)
}

// optional bool enable_jacobian_ad = 27 [default = false];
inline bool DistanceApproachConfig::has_enable_jacobian_ad() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_jacobian_ad() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DistanceApproachConfig::clear_has_enable_jacobian_ad() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DistanceApproachConfig::clear_enable_jacobian_ad() {
  enable_jacobian_ad_ = false;
  clear_has_enable_jacobian_ad();
}
inline bool DistanceApproachConfig::enable_jacobian_ad() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_jacobian_ad)
  return enable_jacobian_ad_;
}
inline void DistanceApproachConfig::set_enable_jacobian_ad(bool value) {
  set_has_enable_jacobian_ad();
  enable_jacobian_ad_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_jacobian_ad)
}

// optional bool enable_check_initial_state = 28 [default = false];
inline bool DistanceApproachConfig::has_enable_check_initial_state() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_check_initial_state() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DistanceApproachConfig::clear_has_enable_check_initial_state() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DistanceApproachConfig::clear_enable_check_initial_state() {
  enable_check_initial_state_ = false;
  clear_has_enable_check_initial_state();
}
inline bool DistanceApproachConfig::enable_check_initial_state() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_check_initial_state)
  return enable_check_initial_state_;
}
inline void DistanceApproachConfig::set_enable_check_initial_state(bool value) {
  set_has_enable_check_initial_state();
  enable_check_initial_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_check_initial_state)
}

// optional double weight_end_state = 29 [default = 0];
inline bool DistanceApproachConfig::has_weight_end_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_end_state() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DistanceApproachConfig::clear_has_weight_end_state() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DistanceApproachConfig::clear_weight_end_state() {
  weight_end_state_ = 0;
  clear_has_weight_end_state();
}
inline double DistanceApproachConfig::weight_end_state() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_end_state)
  return weight_end_state_;
}
inline void DistanceApproachConfig::set_weight_end_state(double value) {
  set_has_weight_end_state();
  weight_end_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_end_state)
}

// optional double weight_slack = 30 [default = 0];
inline bool DistanceApproachConfig::has_weight_slack() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_slack() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DistanceApproachConfig::clear_has_weight_slack() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DistanceApproachConfig::clear_weight_slack() {
  weight_slack_ = 0;
  clear_has_weight_slack();
}
inline double DistanceApproachConfig::weight_slack() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_slack)
  return weight_slack_;
}
inline void DistanceApproachConfig::set_weight_slack(double value) {
  set_has_weight_slack();
  weight_slack_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_slack)
}

// -------------------------------------------------------------------

// IpoptConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptConfig::has_ipopt_print_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpoptConfig::set_has_ipopt_print_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpoptConfig::clear_has_ipopt_print_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpoptConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  clear_has_ipopt_print_level();
}
inline ::google::protobuf::int32 IpoptConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_print_level)
  return ipopt_print_level_;
}
inline void IpoptConfig::set_ipopt_print_level(::google::protobuf::int32 value) {
  set_has_ipopt_print_level();
  ipopt_print_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptConfig::has_mumps_mem_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpoptConfig::set_has_mumps_mem_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpoptConfig::clear_has_mumps_mem_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpoptConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  clear_has_mumps_mem_percent();
}
inline ::google::protobuf::int32 IpoptConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.mumps_mem_percent)
  return mumps_mem_percent_;
}
inline void IpoptConfig::set_mumps_mem_percent(::google::protobuf::int32 value) {
  set_has_mumps_mem_percent();
  mumps_mem_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptConfig::has_mumps_pivtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpoptConfig::set_has_mumps_pivtol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpoptConfig::clear_has_mumps_pivtol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpoptConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  clear_has_mumps_pivtol();
}
inline double IpoptConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.mumps_pivtol)
  return mumps_pivtol_;
}
inline void IpoptConfig::set_mumps_pivtol(double value) {
  set_has_mumps_pivtol();
  mumps_pivtol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptConfig::has_ipopt_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpoptConfig::set_has_ipopt_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpoptConfig::clear_has_ipopt_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpoptConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  clear_has_ipopt_max_iter();
}
inline ::google::protobuf::int32 IpoptConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_max_iter)
  return ipopt_max_iter_;
}
inline void IpoptConfig::set_ipopt_max_iter(::google::protobuf::int32 value) {
  set_has_ipopt_max_iter();
  ipopt_max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptConfig::has_ipopt_tol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpoptConfig::set_has_ipopt_tol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpoptConfig::clear_has_ipopt_tol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpoptConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  clear_has_ipopt_tol();
}
inline double IpoptConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_tol)
  return ipopt_tol_;
}
inline void IpoptConfig::set_ipopt_tol(double value) {
  set_has_ipopt_tol();
  ipopt_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpoptConfig::set_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpoptConfig::clear_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpoptConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  clear_has_ipopt_acceptable_constr_viol_tol();
}
inline double IpoptConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_acceptable_constr_viol_tol)
  return ipopt_acceptable_constr_viol_tol_;
}
inline void IpoptConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  set_has_ipopt_acceptable_constr_viol_tol();
  ipopt_acceptable_constr_viol_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptConfig::has_ipopt_min_hessian_perturbation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpoptConfig::set_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpoptConfig::clear_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpoptConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  clear_has_ipopt_min_hessian_perturbation();
}
inline double IpoptConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_min_hessian_perturbation)
  return ipopt_min_hessian_perturbation_;
}
inline void IpoptConfig::set_ipopt_min_hessian_perturbation(double value) {
  set_has_ipopt_min_hessian_perturbation();
  ipopt_min_hessian_perturbation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptConfig::has_ipopt_jacobian_regularization_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpoptConfig::set_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpoptConfig::clear_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpoptConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  clear_has_ipopt_jacobian_regularization_value();
}
inline double IpoptConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_jacobian_regularization_value)
  return ipopt_jacobian_regularization_value_;
}
inline void IpoptConfig::set_ipopt_jacobian_regularization_value(double value) {
  set_has_ipopt_jacobian_regularization_value();
  ipopt_jacobian_regularization_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptConfig::has_ipopt_print_timing_statistics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpoptConfig::set_has_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpoptConfig::clear_has_ipopt_print_timing_statistics() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpoptConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_print_timing_statistics();
}
inline const ::std::string& IpoptConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.GetNoArena();
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const ::std::string& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
#if LANG_CXX11
inline void IpoptConfig::set_ipopt_print_timing_statistics(::std::string&& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
#endif
inline void IpoptConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
inline ::std::string* IpoptConfig::mutable_ipopt_print_timing_statistics() {
  set_has_ipopt_print_timing_statistics();
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
  if (!has_ipopt_print_timing_statistics()) {
    return NULL;
  }
  clear_has_ipopt_print_timing_statistics();
  return ipopt_print_timing_statistics_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptConfig::set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != NULL) {
    set_has_ipopt_print_timing_statistics();
  } else {
    clear_has_ipopt_print_timing_statistics();
  }
  ipopt_print_timing_statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptConfig::has_ipopt_alpha_for_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpoptConfig::set_has_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpoptConfig::clear_has_ipopt_alpha_for_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpoptConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_alpha_for_y();
}
inline const ::std::string& IpoptConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.GetNoArena();
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const ::std::string& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
#if LANG_CXX11
inline void IpoptConfig::set_ipopt_alpha_for_y(::std::string&& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
#endif
inline void IpoptConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
inline ::std::string* IpoptConfig::mutable_ipopt_alpha_for_y() {
  set_has_ipopt_alpha_for_y();
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
  if (!has_ipopt_alpha_for_y()) {
    return NULL;
  }
  clear_has_ipopt_alpha_for_y();
  return ipopt_alpha_for_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptConfig::set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != NULL) {
    set_has_ipopt_alpha_for_y();
  } else {
    clear_has_ipopt_alpha_for_y();
  }
  ipopt_alpha_for_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptConfig::has_ipopt_recalc_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpoptConfig::set_has_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpoptConfig::clear_has_ipopt_recalc_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpoptConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_recalc_y();
}
inline const ::std::string& IpoptConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.GetNoArena();
}
inline void IpoptConfig::set_ipopt_recalc_y(const ::std::string& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
#if LANG_CXX11
inline void IpoptConfig::set_ipopt_recalc_y(::std::string&& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
#endif
inline void IpoptConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
inline void IpoptConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
inline ::std::string* IpoptConfig::mutable_ipopt_recalc_y() {
  set_has_ipopt_recalc_y();
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptConfig.ipopt_recalc_y)
  if (!has_ipopt_recalc_y()) {
    return NULL;
  }
  clear_has_ipopt_recalc_y();
  return ipopt_recalc_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptConfig::set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != NULL) {
    set_has_ipopt_recalc_y();
  } else {
    clear_has_ipopt_recalc_y();
  }
  ipopt_recalc_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptConfig::has_ipopt_mu_init() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpoptConfig::set_has_ipopt_mu_init() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpoptConfig::clear_has_ipopt_mu_init() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpoptConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  clear_has_ipopt_mu_init();
}
inline double IpoptConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_mu_init)
  return ipopt_mu_init_;
}
inline void IpoptConfig::set_ipopt_mu_init(double value) {
  set_has_ipopt_mu_init();
  ipopt_mu_init_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_mu_init)
}

// -------------------------------------------------------------------

// OSQPConfig

// optional double alpha = 1 [default = 1];
inline bool OSQPConfig::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OSQPConfig::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OSQPConfig::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OSQPConfig::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline double OSQPConfig::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.alpha)
  return alpha_;
}
inline void OSQPConfig::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.alpha)
}

// optional double eps_abs = 2 [default = 0.001];
inline bool OSQPConfig::has_eps_abs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OSQPConfig::set_has_eps_abs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OSQPConfig::clear_has_eps_abs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OSQPConfig::clear_eps_abs() {
  eps_abs_ = 0.001;
  clear_has_eps_abs();
}
inline double OSQPConfig::eps_abs() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.eps_abs)
  return eps_abs_;
}
inline void OSQPConfig::set_eps_abs(double value) {
  set_has_eps_abs();
  eps_abs_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.eps_abs)
}

// optional double eps_rel = 3 [default = 0.001];
inline bool OSQPConfig::has_eps_rel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OSQPConfig::set_has_eps_rel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OSQPConfig::clear_has_eps_rel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OSQPConfig::clear_eps_rel() {
  eps_rel_ = 0.001;
  clear_has_eps_rel();
}
inline double OSQPConfig::eps_rel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.eps_rel)
  return eps_rel_;
}
inline void OSQPConfig::set_eps_rel(double value) {
  set_has_eps_rel();
  eps_rel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.eps_rel)
}

// optional int32 max_iter = 4 [default = 10000];
inline bool OSQPConfig::has_max_iter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OSQPConfig::set_has_max_iter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OSQPConfig::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OSQPConfig::clear_max_iter() {
  max_iter_ = 10000;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 OSQPConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.max_iter)
  return max_iter_;
}
inline void OSQPConfig::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.max_iter)
}

// optional bool polish = 5 [default = true];
inline bool OSQPConfig::has_polish() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OSQPConfig::set_has_polish() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OSQPConfig::clear_has_polish() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OSQPConfig::clear_polish() {
  polish_ = true;
  clear_has_polish();
}
inline bool OSQPConfig::polish() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.polish)
  return polish_;
}
inline void OSQPConfig::set_polish(bool value) {
  set_has_polish();
  polish_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.polish)
}

// optional bool osqp_debug_log = 6 [default = false];
inline bool OSQPConfig::has_osqp_debug_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OSQPConfig::set_has_osqp_debug_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OSQPConfig::clear_has_osqp_debug_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OSQPConfig::clear_osqp_debug_log() {
  osqp_debug_log_ = false;
  clear_has_osqp_debug_log();
}
inline bool OSQPConfig::osqp_debug_log() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.osqp_debug_log)
  return osqp_debug_log_;
}
inline void OSQPConfig::set_osqp_debug_log(bool value) {
  set_has_osqp_debug_log();
  osqp_debug_log_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.osqp_debug_log)
}

// -------------------------------------------------------------------

// IterativeAnchoringConfig

// optional double interpolated_delta_s = 1 [default = 0.1];
inline bool IterativeAnchoringConfig::has_interpolated_delta_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IterativeAnchoringConfig::set_has_interpolated_delta_s() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IterativeAnchoringConfig::clear_has_interpolated_delta_s() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IterativeAnchoringConfig::clear_interpolated_delta_s() {
  interpolated_delta_s_ = 0.1;
  clear_has_interpolated_delta_s();
}
inline double IterativeAnchoringConfig::interpolated_delta_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.interpolated_delta_s)
  return interpolated_delta_s_;
}
inline void IterativeAnchoringConfig::set_interpolated_delta_s(double value) {
  set_has_interpolated_delta_s();
  interpolated_delta_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.interpolated_delta_s)
}

// optional int32 reanchoring_trails_num = 2 [default = 50];
inline bool IterativeAnchoringConfig::has_reanchoring_trails_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IterativeAnchoringConfig::set_has_reanchoring_trails_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IterativeAnchoringConfig::clear_has_reanchoring_trails_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IterativeAnchoringConfig::clear_reanchoring_trails_num() {
  reanchoring_trails_num_ = 50;
  clear_has_reanchoring_trails_num();
}
inline ::google::protobuf::int32 IterativeAnchoringConfig::reanchoring_trails_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.reanchoring_trails_num)
  return reanchoring_trails_num_;
}
inline void IterativeAnchoringConfig::set_reanchoring_trails_num(::google::protobuf::int32 value) {
  set_has_reanchoring_trails_num();
  reanchoring_trails_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.reanchoring_trails_num)
}

// optional double reanchoring_pos_stddev = 3 [default = 0.25];
inline bool IterativeAnchoringConfig::has_reanchoring_pos_stddev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IterativeAnchoringConfig::set_has_reanchoring_pos_stddev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IterativeAnchoringConfig::clear_has_reanchoring_pos_stddev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IterativeAnchoringConfig::clear_reanchoring_pos_stddev() {
  reanchoring_pos_stddev_ = 0.25;
  clear_has_reanchoring_pos_stddev();
}
inline double IterativeAnchoringConfig::reanchoring_pos_stddev() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.reanchoring_pos_stddev)
  return reanchoring_pos_stddev_;
}
inline void IterativeAnchoringConfig::set_reanchoring_pos_stddev(double value) {
  set_has_reanchoring_pos_stddev();
  reanchoring_pos_stddev_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.reanchoring_pos_stddev)
}

// optional double reanchoring_length_stddev = 4 [default = 1];
inline bool IterativeAnchoringConfig::has_reanchoring_length_stddev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IterativeAnchoringConfig::set_has_reanchoring_length_stddev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IterativeAnchoringConfig::clear_has_reanchoring_length_stddev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IterativeAnchoringConfig::clear_reanchoring_length_stddev() {
  reanchoring_length_stddev_ = 1;
  clear_has_reanchoring_length_stddev();
}
inline double IterativeAnchoringConfig::reanchoring_length_stddev() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.reanchoring_length_stddev)
  return reanchoring_length_stddev_;
}
inline void IterativeAnchoringConfig::set_reanchoring_length_stddev(double value) {
  set_has_reanchoring_length_stddev();
  reanchoring_length_stddev_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.reanchoring_length_stddev)
}

// optional bool estimate_bound = 5 [default = false];
inline bool IterativeAnchoringConfig::has_estimate_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IterativeAnchoringConfig::set_has_estimate_bound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IterativeAnchoringConfig::clear_has_estimate_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IterativeAnchoringConfig::clear_estimate_bound() {
  estimate_bound_ = false;
  clear_has_estimate_bound();
}
inline bool IterativeAnchoringConfig::estimate_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.estimate_bound)
  return estimate_bound_;
}
inline void IterativeAnchoringConfig::set_estimate_bound(bool value) {
  set_has_estimate_bound();
  estimate_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.estimate_bound)
}

// optional double default_bound = 6 [default = 2];
inline bool IterativeAnchoringConfig::has_default_bound() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IterativeAnchoringConfig::set_has_default_bound() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IterativeAnchoringConfig::clear_has_default_bound() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IterativeAnchoringConfig::clear_default_bound() {
  default_bound_ = 2;
  clear_has_default_bound();
}
inline double IterativeAnchoringConfig::default_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.default_bound)
  return default_bound_;
}
inline void IterativeAnchoringConfig::set_default_bound(double value) {
  set_has_default_bound();
  default_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.default_bound)
}

// optional double vehicle_shortest_dimension = 7 [default = 1.04];
inline bool IterativeAnchoringConfig::has_vehicle_shortest_dimension() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IterativeAnchoringConfig::set_has_vehicle_shortest_dimension() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IterativeAnchoringConfig::clear_has_vehicle_shortest_dimension() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IterativeAnchoringConfig::clear_vehicle_shortest_dimension() {
  vehicle_shortest_dimension_ = 1.04;
  clear_has_vehicle_shortest_dimension();
}
inline double IterativeAnchoringConfig::vehicle_shortest_dimension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.vehicle_shortest_dimension)
  return vehicle_shortest_dimension_;
}
inline void IterativeAnchoringConfig::set_vehicle_shortest_dimension(double value) {
  set_has_vehicle_shortest_dimension();
  vehicle_shortest_dimension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.vehicle_shortest_dimension)
}

// optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
inline bool IterativeAnchoringConfig::has_fem_pos_deviation_smoother_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IterativeAnchoringConfig::set_has_fem_pos_deviation_smoother_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IterativeAnchoringConfig::clear_has_fem_pos_deviation_smoother_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::FemPosDeviationSmootherConfig& IterativeAnchoringConfig::_internal_fem_pos_deviation_smoother_config() const {
  return *fem_pos_deviation_smoother_config_;
}
inline const ::apollo::planning::FemPosDeviationSmootherConfig& IterativeAnchoringConfig::fem_pos_deviation_smoother_config() const {
  const ::apollo::planning::FemPosDeviationSmootherConfig* p = fem_pos_deviation_smoother_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::FemPosDeviationSmootherConfig*>(
      &::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_);
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::release_fem_pos_deviation_smoother_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  clear_has_fem_pos_deviation_smoother_config();
  ::apollo::planning::FemPosDeviationSmootherConfig* temp = fem_pos_deviation_smoother_config_;
  fem_pos_deviation_smoother_config_ = NULL;
  return temp;
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::mutable_fem_pos_deviation_smoother_config() {
  set_has_fem_pos_deviation_smoother_config();
  if (fem_pos_deviation_smoother_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::FemPosDeviationSmootherConfig>(GetArenaNoVirtual());
    fem_pos_deviation_smoother_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return fem_pos_deviation_smoother_config_;
}
inline void IterativeAnchoringConfig::set_allocated_fem_pos_deviation_smoother_config(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fem_pos_deviation_smoother_config_);
  }
  if (fem_pos_deviation_smoother_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fem_pos_deviation_smoother_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fem_pos_deviation_smoother_config, submessage_arena);
    }
    set_has_fem_pos_deviation_smoother_config();
  } else {
    clear_has_fem_pos_deviation_smoother_config();
  }
  fem_pos_deviation_smoother_config_ = fem_pos_deviation_smoother_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
}

// optional double collision_decrease_ratio = 9 [default = 0.9];
inline bool IterativeAnchoringConfig::has_collision_decrease_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IterativeAnchoringConfig::set_has_collision_decrease_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IterativeAnchoringConfig::clear_has_collision_decrease_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IterativeAnchoringConfig::clear_collision_decrease_ratio() {
  collision_decrease_ratio_ = 0.9;
  clear_has_collision_decrease_ratio();
}
inline double IterativeAnchoringConfig::collision_decrease_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.collision_decrease_ratio)
  return collision_decrease_ratio_;
}
inline void IterativeAnchoringConfig::set_collision_decrease_ratio(double value) {
  set_has_collision_decrease_ratio();
  collision_decrease_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.collision_decrease_ratio)
}

// optional double max_forward_v = 10 [default = 2];
inline bool IterativeAnchoringConfig::has_max_forward_v() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_forward_v() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IterativeAnchoringConfig::clear_has_max_forward_v() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IterativeAnchoringConfig::clear_max_forward_v() {
  max_forward_v_ = 2;
  clear_has_max_forward_v();
}
inline double IterativeAnchoringConfig::max_forward_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_forward_v)
  return max_forward_v_;
}
inline void IterativeAnchoringConfig::set_max_forward_v(double value) {
  set_has_max_forward_v();
  max_forward_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_forward_v)
}

// optional double max_reverse_v = 11 [default = 2];
inline bool IterativeAnchoringConfig::has_max_reverse_v() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_reverse_v() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IterativeAnchoringConfig::clear_has_max_reverse_v() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IterativeAnchoringConfig::clear_max_reverse_v() {
  max_reverse_v_ = 2;
  clear_has_max_reverse_v();
}
inline double IterativeAnchoringConfig::max_reverse_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_reverse_v)
  return max_reverse_v_;
}
inline void IterativeAnchoringConfig::set_max_reverse_v(double value) {
  set_has_max_reverse_v();
  max_reverse_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_reverse_v)
}

// optional double max_forward_acc = 12 [default = 3];
inline bool IterativeAnchoringConfig::has_max_forward_acc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_forward_acc() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IterativeAnchoringConfig::clear_has_max_forward_acc() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IterativeAnchoringConfig::clear_max_forward_acc() {
  max_forward_acc_ = 3;
  clear_has_max_forward_acc();
}
inline double IterativeAnchoringConfig::max_forward_acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_forward_acc)
  return max_forward_acc_;
}
inline void IterativeAnchoringConfig::set_max_forward_acc(double value) {
  set_has_max_forward_acc();
  max_forward_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_forward_acc)
}

// optional double max_reverse_acc = 13 [default = 2];
inline bool IterativeAnchoringConfig::has_max_reverse_acc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_reverse_acc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IterativeAnchoringConfig::clear_has_max_reverse_acc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IterativeAnchoringConfig::clear_max_reverse_acc() {
  max_reverse_acc_ = 2;
  clear_has_max_reverse_acc();
}
inline double IterativeAnchoringConfig::max_reverse_acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_reverse_acc)
  return max_reverse_acc_;
}
inline void IterativeAnchoringConfig::set_max_reverse_acc(double value) {
  set_has_max_reverse_acc();
  max_reverse_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_reverse_acc)
}

// optional double max_acc_jerk = 14 [default = 4];
inline bool IterativeAnchoringConfig::has_max_acc_jerk() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_acc_jerk() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IterativeAnchoringConfig::clear_has_max_acc_jerk() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IterativeAnchoringConfig::clear_max_acc_jerk() {
  max_acc_jerk_ = 4;
  clear_has_max_acc_jerk();
}
inline double IterativeAnchoringConfig::max_acc_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_acc_jerk)
  return max_acc_jerk_;
}
inline void IterativeAnchoringConfig::set_max_acc_jerk(double value) {
  set_has_max_acc_jerk();
  max_acc_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_acc_jerk)
}

// optional double delta_t = 15 [default = 0.2];
inline bool IterativeAnchoringConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IterativeAnchoringConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IterativeAnchoringConfig::clear_delta_t() {
  delta_t_ = 0.2;
  clear_has_delta_t();
}
inline double IterativeAnchoringConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.delta_t)
  return delta_t_;
}
inline void IterativeAnchoringConfig::set_delta_t(double value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.delta_t)
}

// optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
inline bool IterativeAnchoringConfig::has_s_curve_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IterativeAnchoringConfig::set_has_s_curve_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IterativeAnchoringConfig::clear_has_s_curve_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& IterativeAnchoringConfig::_internal_s_curve_config() const {
  return *s_curve_config_;
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& IterativeAnchoringConfig::s_curve_config() const {
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* p = s_curve_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.s_curve_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      &::apollo::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* IterativeAnchoringConfig::release_s_curve_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.IterativeAnchoringConfig.s_curve_config)
  clear_has_s_curve_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = NULL;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* IterativeAnchoringConfig::mutable_s_curve_config() {
  set_has_s_curve_config();
  if (s_curve_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkSpeedOptimizerConfig>(GetArenaNoVirtual());
    s_curve_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.IterativeAnchoringConfig.s_curve_config)
  return s_curve_config_;
}
inline void IterativeAnchoringConfig::set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(s_curve_config_);
  }
  if (s_curve_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      s_curve_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, s_curve_config, submessage_arena);
    }
    set_has_s_curve_config();
  } else {
    clear_has_s_curve_config();
  }
  s_curve_config_ = s_curve_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IterativeAnchoringConfig.s_curve_config)
}

// -------------------------------------------------------------------

// TrajectoryPartitionConfig

// optional uint64 interpolated_pieces_num = 1 [default = 50];
inline bool TrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_interpolated_pieces_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPartitionConfig::clear_has_interpolated_pieces_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
  clear_has_interpolated_pieces_num();
}
inline ::google::protobuf::uint64 TrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.interpolated_pieces_num)
  return interpolated_pieces_num_;
}
inline void TrajectoryPartitionConfig::set_interpolated_pieces_num(::google::protobuf::uint64 value) {
  set_has_interpolated_pieces_num();
  interpolated_pieces_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 2 [default = 3];
inline bool TrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_initial_gear_check_horizon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPartitionConfig::clear_has_initial_gear_check_horizon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
  clear_has_initial_gear_check_horizon();
}
inline ::google::protobuf::uint64 TrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.initial_gear_check_horizon)
  return initial_gear_check_horizon_;
}
inline void TrajectoryPartitionConfig::set_initial_gear_check_horizon(::google::protobuf::uint64 value) {
  set_has_initial_gear_check_horizon();
  initial_gear_check_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_searching_range = 3 [default = 0.3];
inline bool TrajectoryPartitionConfig::has_heading_searching_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_heading_searching_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryPartitionConfig::clear_has_heading_searching_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryPartitionConfig::clear_heading_searching_range() {
  heading_searching_range_ = 0.3;
  clear_has_heading_searching_range();
}
inline double TrajectoryPartitionConfig::heading_searching_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.heading_searching_range)
  return heading_searching_range_;
}
inline void TrajectoryPartitionConfig::set_heading_searching_range(double value) {
  set_has_heading_searching_range();
  heading_searching_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.heading_searching_range)
}

// optional double gear_shift_period_duration = 4 [default = 2];
inline bool TrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_gear_shift_period_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryPartitionConfig::clear_has_gear_shift_period_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 2;
  clear_has_gear_shift_period_duration();
}
inline double TrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.gear_shift_period_duration)
  return gear_shift_period_duration_;
}
inline void TrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  set_has_gear_shift_period_duration();
  gear_shift_period_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional double gear_shift_max_t = 5 [default = 3];
inline bool TrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_gear_shift_max_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryPartitionConfig::clear_has_gear_shift_max_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 3;
  clear_has_gear_shift_max_t();
}
inline double TrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.gear_shift_max_t)
  return gear_shift_max_t_;
}
inline void TrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  set_has_gear_shift_max_t();
  gear_shift_max_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 6 [default = 0.02];
inline bool TrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_gear_shift_unit_t() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryPartitionConfig::clear_has_gear_shift_unit_t() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0.02;
  clear_has_gear_shift_unit_t();
}
inline double TrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.gear_shift_unit_t)
  return gear_shift_unit_t_;
}
inline void TrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  set_has_gear_shift_unit_t();
  gear_shift_unit_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.gear_shift_unit_t)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::DualWarmUpMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DualWarmUpMode>() {
  return ::apollo::planning::DualWarmUpMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::DistanceApproachMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DistanceApproachMode>() {
  return ::apollo::planning::DistanceApproachMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_planner_5fopen_5fspace_5fconfig_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fem_pos_deviation_smoother_config.proto

#include "fem_pos_deviation_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class FemPosDeviationSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FemPosDeviationSmootherConfig>
      _instance;
} _FemPosDeviationSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto {
static void InitDefaultsFemPosDeviationSmootherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::FemPosDeviationSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::FemPosDeviationSmootherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FemPosDeviationSmootherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFemPosDeviationSmootherConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FemPosDeviationSmootherConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_fem_pos_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_ref_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, apply_curvature_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_curvature_constraint_slack_var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, curvature_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, use_sqp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, sqp_ftol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, sqp_ctol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, sqp_pen_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, sqp_sub_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, time_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, verbose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, scaled_termination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, warm_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, print_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, max_num_of_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, acceptable_num_of_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, acceptable_tol_),
  4,
  5,
  6,
  13,
  7,
  8,
  1,
  9,
  10,
  11,
  12,
  16,
  0,
  2,
  14,
  15,
  3,
  17,
  18,
  19,
  20,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::apollo::planning::FemPosDeviationSmootherConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fem_pos_deviation_smoother_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'fem_pos_deviation_smoother_config.prot"
      "o\022\017apollo.planning\"\265\005\n\035FemPosDeviationSm"
      "ootherConfig\022-\n\030weight_fem_pos_deviation"
      "\030\002 \001(\001:\01310000000000\022\037\n\024weight_ref_deviat"
      "ion\030\003 \001(\001:\0011\022\035\n\022weight_path_length\030\004 \001(\001"
      ":\0011\022(\n\032apply_curvature_constraint\030\005 \001(\010:"
      "\004true\0222\n%weight_curvature_constraint_sla"
      "ck_var\030\006 \001(\001:\003100\022!\n\024curvature_constrain"
      "t\030\007 \001(\001:\0030.2\022\026\n\007use_sqp\030\010 \001(\010:\005false\022\030\n\010"
      "sqp_ftol\030\t \001(\001:\0060.0001\022\027\n\010sqp_ctol\030\n \001(\001"
      ":\0050.001\022\034\n\020sqp_pen_max_iter\030\013 \001(\005:\00210\022\035\n"
      "\020sqp_sub_max_iter\030\014 \001(\005:\003100\022\025\n\010max_iter"
      "\030d \001(\005:\003500\022\025\n\ntime_limit\030e \001(\001:\0010\022\026\n\007ve"
      "rbose\030f \001(\010:\005false\022 \n\022scaled_termination"
      "\030g \001(\010:\004true\022\030\n\nwarm_start\030h \001(\010:\004true\022\027"
      "\n\013print_level\030\310\001 \001(\005:\0010\022#\n\025max_num_of_it"
      "erations\030\311\001 \001(\005:\003500\022)\n\034acceptable_num_o"
      "f_iterations\030\312\001 \001(\005:\00215\022\023\n\003tol\030\313\001 \001(\001:\0051"
      "e-08\022\034\n\016acceptable_tol\030\314\001 \001(\001:\0030.1"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fem_pos_deviation_smoother_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto
namespace apollo {
namespace planning {

// ===================================================================

void FemPosDeviationSmootherConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FemPosDeviationSmootherConfig::kWeightFemPosDeviationFieldNumber;
const int FemPosDeviationSmootherConfig::kWeightRefDeviationFieldNumber;
const int FemPosDeviationSmootherConfig::kWeightPathLengthFieldNumber;
const int FemPosDeviationSmootherConfig::kApplyCurvatureConstraintFieldNumber;
const int FemPosDeviationSmootherConfig::kWeightCurvatureConstraintSlackVarFieldNumber;
const int FemPosDeviationSmootherConfig::kCurvatureConstraintFieldNumber;
const int FemPosDeviationSmootherConfig::kUseSqpFieldNumber;
const int FemPosDeviationSmootherConfig::kSqpFtolFieldNumber;
const int FemPosDeviationSmootherConfig::kSqpCtolFieldNumber;
const int FemPosDeviationSmootherConfig::kSqpPenMaxIterFieldNumber;
const int FemPosDeviationSmootherConfig::kSqpSubMaxIterFieldNumber;
const int FemPosDeviationSmootherConfig::kMaxIterFieldNumber;
const int FemPosDeviationSmootherConfig::kTimeLimitFieldNumber;
const int FemPosDeviationSmootherConfig::kVerboseFieldNumber;
const int FemPosDeviationSmootherConfig::kScaledTerminationFieldNumber;
const int FemPosDeviationSmootherConfig::kWarmStartFieldNumber;
const int FemPosDeviationSmootherConfig::kPrintLevelFieldNumber;
const int FemPosDeviationSmootherConfig::kMaxNumOfIterationsFieldNumber;
const int FemPosDeviationSmootherConfig::kAcceptableNumOfIterationsFieldNumber;
const int FemPosDeviationSmootherConfig::kTolFieldNumber;
const int FemPosDeviationSmootherConfig::kAcceptableTolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::scc_info_FemPosDeviationSmootherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.FemPosDeviationSmootherConfig)
}
FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_limit_, &from.time_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&time_limit_)) + sizeof(acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.FemPosDeviationSmootherConfig)
}

void FemPosDeviationSmootherConfig::SharedCtor() {
  ::memset(&time_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&print_level_) -
      reinterpret_cast<char*>(&time_limit_)) + sizeof(print_level_));
  weight_fem_pos_deviation_ = 10000000000;
  weight_ref_deviation_ = 1;
  weight_path_length_ = 1;
  weight_curvature_constraint_slack_var_ = 100;
  curvature_constraint_ = 0.2;
  sqp_ftol_ = 0.0001;
  sqp_ctol_ = 0.001;
  sqp_pen_max_iter_ = 10;
  sqp_sub_max_iter_ = 100;
  apply_curvature_constraint_ = true;
  scaled_termination_ = true;
  warm_start_ = true;
  max_iter_ = 500;
  max_num_of_iterations_ = 500;
  acceptable_num_of_iterations_ = 15;
  tol_ = 1e-08;
  acceptable_tol_ = 0.1;
}

FemPosDeviationSmootherConfig::~FemPosDeviationSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.FemPosDeviationSmootherConfig)
  SharedDtor();
}

void FemPosDeviationSmootherConfig::SharedDtor() {
}

void FemPosDeviationSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FemPosDeviationSmootherConfig::descriptor() {
  ::protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FemPosDeviationSmootherConfig& FemPosDeviationSmootherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::scc_info_FemPosDeviationSmootherConfig.base);
  return *internal_default_instance();
}


void FemPosDeviationSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.FemPosDeviationSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&time_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&print_level_) -
        reinterpret_cast<char*>(&time_limit_)) + sizeof(print_level_));
    weight_fem_pos_deviation_ = 10000000000;
    weight_ref_deviation_ = 1;
    weight_path_length_ = 1;
    weight_curvature_constraint_slack_var_ = 100;
  }
  if (cached_has_bits & 65280u) {
    curvature_constraint_ = 0.2;
    sqp_ftol_ = 0.0001;
    sqp_ctol_ = 0.001;
    sqp_pen_max_iter_ = 10;
    sqp_sub_max_iter_ = 100;
    apply_curvature_constraint_ = true;
    scaled_termination_ = true;
    warm_start_ = true;
  }
  if (cached_has_bits & 2031616u) {
    max_iter_ = 500;
    max_num_of_iterations_ = 500;
    acceptable_num_of_iterations_ = 15;
    tol_ = 1e-08;
    acceptable_tol_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FemPosDeviationSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.FemPosDeviationSmootherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_weight_fem_pos_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_fem_pos_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_ref_deviation = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_weight_ref_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_ref_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_path_length = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_weight_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool apply_curvature_constraint = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_apply_curvature_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_curvature_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_weight_curvature_constraint_slack_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_curvature_constraint_slack_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curvature_constraint = 7 [default = 0.2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_curvature_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_sqp = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_use_sqp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sqp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sqp_ftol = 9 [default = 0.0001];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_sqp_ftol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sqp_ftol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sqp_ctol = 10 [default = 0.001];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_sqp_ctol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sqp_ctol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sqp_pen_max_iter = 11 [default = 10];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_sqp_pen_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqp_pen_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sqp_sub_max_iter = 12 [default = 100];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_sqp_sub_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqp_sub_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 100 [default = 500];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_limit = 101 [default = 0];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 809 & 0xFF */)) {
          set_has_time_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool verbose = 102 [default = false];
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          set_has_verbose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verbose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scaled_termination = 103 [default = true];
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 824 & 0xFF */)) {
          set_has_scaled_termination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scaled_termination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool warm_start = 104 [default = true];
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 832 & 0xFF */)) {
          set_has_warm_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warm_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 print_level = 200 [default = 0];
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {
          set_has_print_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_num_of_iterations = 201 [default = 500];
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 1608 & 0xFF */)) {
          set_has_max_num_of_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_of_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acceptable_num_of_iterations = 202 [default = 15];
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 1616 & 0xFF */)) {
          set_has_acceptable_num_of_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptable_num_of_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tol = 203 [default = 1e-08];
      case 203: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 1625 & 0xFF */)) {
          set_has_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceptable_tol = 204 [default = 0.1];
      case 204: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 1633 & 0xFF */)) {
          set_has_acceptable_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceptable_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.FemPosDeviationSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.FemPosDeviationSmootherConfig)
  return false;
#undef DO_
}

void FemPosDeviationSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.FemPosDeviationSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_fem_pos_deviation(), output);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_ref_deviation(), output);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight_path_length(), output);
  }

  // optional bool apply_curvature_constraint = 5 [default = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->apply_curvature_constraint(), output);
  }

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_curvature_constraint_slack_var(), output);
  }

  // optional double curvature_constraint = 7 [default = 0.2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature_constraint(), output);
  }

  // optional bool use_sqp = 8 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_sqp(), output);
  }

  // optional double sqp_ftol = 9 [default = 0.0001];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sqp_ftol(), output);
  }

  // optional double sqp_ctol = 10 [default = 0.001];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sqp_ctol(), output);
  }

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sqp_pen_max_iter(), output);
  }

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sqp_sub_max_iter(), output);
  }

  // optional int32 max_iter = 100 [default = 500];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->max_iter(), output);
  }

  // optional double time_limit = 101 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->time_limit(), output);
  }

  // optional bool verbose = 102 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->verbose(), output);
  }

  // optional bool scaled_termination = 103 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->scaled_termination(), output);
  }

  // optional bool warm_start = 104 [default = true];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(104, this->warm_start(), output);
  }

  // optional int32 print_level = 200 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(200, this->print_level(), output);
  }

  // optional int32 max_num_of_iterations = 201 [default = 500];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->max_num_of_iterations(), output);
  }

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->acceptable_num_of_iterations(), output);
  }

  // optional double tol = 203 [default = 1e-08];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(203, this->tol(), output);
  }

  // optional double acceptable_tol = 204 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(204, this->acceptable_tol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.FemPosDeviationSmootherConfig)
}

::google::protobuf::uint8* FemPosDeviationSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.FemPosDeviationSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_fem_pos_deviation(), target);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_ref_deviation(), target);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight_path_length(), target);
  }

  // optional bool apply_curvature_constraint = 5 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->apply_curvature_constraint(), target);
  }

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_curvature_constraint_slack_var(), target);
  }

  // optional double curvature_constraint = 7 [default = 0.2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature_constraint(), target);
  }

  // optional bool use_sqp = 8 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_sqp(), target);
  }

  // optional double sqp_ftol = 9 [default = 0.0001];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sqp_ftol(), target);
  }

  // optional double sqp_ctol = 10 [default = 0.001];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sqp_ctol(), target);
  }

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sqp_pen_max_iter(), target);
  }

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sqp_sub_max_iter(), target);
  }

  // optional int32 max_iter = 100 [default = 500];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->max_iter(), target);
  }

  // optional double time_limit = 101 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->time_limit(), target);
  }

  // optional bool verbose = 102 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->verbose(), target);
  }

  // optional bool scaled_termination = 103 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->scaled_termination(), target);
  }

  // optional bool warm_start = 104 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(104, this->warm_start(), target);
  }

  // optional int32 print_level = 200 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(200, this->print_level(), target);
  }

  // optional int32 max_num_of_iterations = 201 [default = 500];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->acceptable_num_of_iterations(), target);
  }

  // optional double tol = 203 [default = 1e-08];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(203, this->tol(), target);
  }

  // optional double acceptable_tol = 204 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(204, this->acceptable_tol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.FemPosDeviationSmootherConfig)
  return target;
}

size_t FemPosDeviationSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.FemPosDeviationSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double time_limit = 101 [default = 0];
    if (has_time_limit()) {
      total_size += 2 + 8;
    }

    // optional bool use_sqp = 8 [default = false];
    if (has_use_sqp()) {
      total_size += 1 + 1;
    }

    // optional bool verbose = 102 [default = false];
    if (has_verbose()) {
      total_size += 2 + 1;
    }

    // optional int32 print_level = 200 [default = 0];
    if (has_print_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_level());
    }

    // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
    if (has_weight_fem_pos_deviation()) {
      total_size += 1 + 8;
    }

    // optional double weight_ref_deviation = 3 [default = 1];
    if (has_weight_ref_deviation()) {
      total_size += 1 + 8;
    }

    // optional double weight_path_length = 4 [default = 1];
    if (has_weight_path_length()) {
      total_size += 1 + 8;
    }

    // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
    if (has_weight_curvature_constraint_slack_var()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double curvature_constraint = 7 [default = 0.2];
    if (has_curvature_constraint()) {
      total_size += 1 + 8;
    }

    // optional double sqp_ftol = 9 [default = 0.0001];
    if (has_sqp_ftol()) {
      total_size += 1 + 8;
    }

    // optional double sqp_ctol = 10 [default = 0.001];
    if (has_sqp_ctol()) {
      total_size += 1 + 8;
    }

    // optional int32 sqp_pen_max_iter = 11 [default = 10];
    if (has_sqp_pen_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqp_pen_max_iter());
    }

    // optional int32 sqp_sub_max_iter = 12 [default = 100];
    if (has_sqp_sub_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqp_sub_max_iter());
    }

    // optional bool apply_curvature_constraint = 5 [default = true];
    if (has_apply_curvature_constraint()) {
      total_size += 1 + 1;
    }

    // optional bool scaled_termination = 103 [default = true];
    if (has_scaled_termination()) {
      total_size += 2 + 1;
    }

    // optional bool warm_start = 104 [default = true];
    if (has_warm_start()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int32 max_iter = 100 [default = 500];
    if (has_max_iter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional int32 max_num_of_iterations = 201 [default = 500];
    if (has_max_num_of_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 202 [default = 15];
    if (has_acceptable_num_of_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptable_num_of_iterations());
    }

    // optional double tol = 203 [default = 1e-08];
    if (has_tol()) {
      total_size += 2 + 8;
    }

    // optional double acceptable_tol = 204 [default = 0.1];
    if (has_acceptable_tol()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FemPosDeviationSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FemPosDeviationSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FemPosDeviationSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.FemPosDeviationSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.FemPosDeviationSmootherConfig)
    MergeFrom(*source);
  }
}

void FemPosDeviationSmootherConfig::MergeFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      time_limit_ = from.time_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_sqp_ = from.use_sqp_;
    }
    if (cached_has_bits & 0x00000004u) {
      verbose_ = from.verbose_;
    }
    if (cached_has_bits & 0x00000008u) {
      print_level_ = from.print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_fem_pos_deviation_ = from.weight_fem_pos_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_ref_deviation_ = from.weight_ref_deviation_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_path_length_ = from.weight_path_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_curvature_constraint_slack_var_ = from.weight_curvature_constraint_slack_var_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      curvature_constraint_ = from.curvature_constraint_;
    }
    if (cached_has_bits & 0x00000200u) {
      sqp_ftol_ = from.sqp_ftol_;
    }
    if (cached_has_bits & 0x00000400u) {
      sqp_ctol_ = from.sqp_ctol_;
    }
    if (cached_has_bits & 0x00000800u) {
      sqp_pen_max_iter_ = from.sqp_pen_max_iter_;
    }
    if (cached_has_bits & 0x00001000u) {
      sqp_sub_max_iter_ = from.sqp_sub_max_iter_;
    }
    if (cached_has_bits & 0x00002000u) {
      apply_curvature_constraint_ = from.apply_curvature_constraint_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_termination_ = from.scaled_termination_;
    }
    if (cached_has_bits & 0x00008000u) {
      warm_start_ = from.warm_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_num_of_iterations_ = from.max_num_of_iterations_;
    }
    if (cached_has_bits & 0x00040000u) {
      acceptable_num_of_iterations_ = from.acceptable_num_of_iterations_;
    }
    if (cached_has_bits & 0x00080000u) {
      tol_ = from.tol_;
    }
    if (cached_has_bits & 0x00100000u) {
      acceptable_tol_ = from.acceptable_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FemPosDeviationSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FemPosDeviationSmootherConfig::CopyFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FemPosDeviationSmootherConfig::IsInitialized() const {
  return true;
}

void FemPosDeviationSmootherConfig::Swap(FemPosDeviationSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FemPosDeviationSmootherConfig::InternalSwap(FemPosDeviationSmootherConfig* other) {
  using std::swap;
  swap(time_limit_, other->time_limit_);
  swap(use_sqp_, other->use_sqp_);
  swap(verbose_, other->verbose_);
  swap(print_level_, other->print_level_);
  swap(weight_fem_pos_deviation_, other->weight_fem_pos_deviation_);
  swap(weight_ref_deviation_, other->weight_ref_deviation_);
  swap(weight_path_length_, other->weight_path_length_);
  swap(weight_curvature_constraint_slack_var_, other->weight_curvature_constraint_slack_var_);
  swap(curvature_constraint_, other->curvature_constraint_);
  swap(sqp_ftol_, other->sqp_ftol_);
  swap(sqp_ctol_, other->sqp_ctol_);
  swap(sqp_pen_max_iter_, other->sqp_pen_max_iter_);
  swap(sqp_sub_max_iter_, other->sqp_sub_max_iter_);
  swap(apply_curvature_constraint_, other->apply_curvature_constraint_);
  swap(scaled_termination_, other->scaled_termination_);
  swap(warm_start_, other->warm_start_);
  swap(max_iter_, other->max_iter_);
  swap(max_num_of_iterations_, other->max_num_of_iterations_);
  swap(acceptable_num_of_iterations_, other->acceptable_num_of_iterations_);
  swap(tol_, other->tol_);
  swap(acceptable_tol_, other->acceptable_tol_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FemPosDeviationSmootherConfig::GetMetadata() const {
  protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::FemPosDeviationSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::FemPosDeviationSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::FemPosDeviationSmootherConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

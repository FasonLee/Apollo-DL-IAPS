// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cos_theta_smoother_config.proto

#include "cos_theta_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class CosThetaSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CosThetaSmootherConfig>
      _instance;
} _CosThetaSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto {
static void InitDefaultsCosThetaSmootherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CosThetaSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::CosThetaSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CosThetaSmootherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CosThetaSmootherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCosThetaSmootherConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CosThetaSmootherConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, weight_cos_included_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, weight_anchor_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, weight_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, print_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, max_num_of_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, acceptable_num_of_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, acceptable_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, ipopt_use_automatic_differentiation_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::apollo::planning::CosThetaSmootherConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CosThetaSmootherConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cos_theta_smoother_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037cos_theta_smoother_config.proto\022\017apoll"
      "o.planning\"\310\002\n\026CosThetaSmootherConfig\022(\n"
      "\031weight_cos_included_angle\030\001 \001(\001:\00510000\022"
      "\037\n\024weight_anchor_points\030\002 \001(\001:\0011\022\030\n\rweig"
      "ht_length\030\003 \001(\001:\0011\022\026\n\013print_level\030\004 \001(\005:"
      "\0010\022\"\n\025max_num_of_iterations\030\005 \001(\005:\003500\022("
      "\n\034acceptable_num_of_iterations\030\006 \001(\005:\00215"
      "\022\022\n\003tol\030\007 \001(\001:\0051e-08\022\033\n\016acceptable_tol\030\010"
      " \001(\001:\0030.1\0222\n#ipopt_use_automatic_differe"
      "ntiation\030\t \001(\010:\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cos_theta_smoother_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto
namespace apollo {
namespace planning {

// ===================================================================

void CosThetaSmootherConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosThetaSmootherConfig::kWeightCosIncludedAngleFieldNumber;
const int CosThetaSmootherConfig::kWeightAnchorPointsFieldNumber;
const int CosThetaSmootherConfig::kWeightLengthFieldNumber;
const int CosThetaSmootherConfig::kPrintLevelFieldNumber;
const int CosThetaSmootherConfig::kMaxNumOfIterationsFieldNumber;
const int CosThetaSmootherConfig::kAcceptableNumOfIterationsFieldNumber;
const int CosThetaSmootherConfig::kTolFieldNumber;
const int CosThetaSmootherConfig::kAcceptableTolFieldNumber;
const int CosThetaSmootherConfig::kIpoptUseAutomaticDifferentiationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosThetaSmootherConfig::CosThetaSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::scc_info_CosThetaSmootherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CosThetaSmootherConfig)
}
CosThetaSmootherConfig::CosThetaSmootherConfig(const CosThetaSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&print_level_, &from.print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&print_level_)) + sizeof(acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CosThetaSmootherConfig)
}

void CosThetaSmootherConfig::SharedCtor() {
  ::memset(&print_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipopt_use_automatic_differentiation_) -
      reinterpret_cast<char*>(&print_level_)) + sizeof(ipopt_use_automatic_differentiation_));
  weight_cos_included_angle_ = 10000;
  weight_anchor_points_ = 1;
  weight_length_ = 1;
  max_num_of_iterations_ = 500;
  acceptable_num_of_iterations_ = 15;
  tol_ = 1e-08;
  acceptable_tol_ = 0.1;
}

CosThetaSmootherConfig::~CosThetaSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CosThetaSmootherConfig)
  SharedDtor();
}

void CosThetaSmootherConfig::SharedDtor() {
}

void CosThetaSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CosThetaSmootherConfig::descriptor() {
  ::protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosThetaSmootherConfig& CosThetaSmootherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::scc_info_CosThetaSmootherConfig.base);
  return *internal_default_instance();
}


void CosThetaSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CosThetaSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_use_automatic_differentiation_) -
        reinterpret_cast<char*>(&print_level_)) + sizeof(ipopt_use_automatic_differentiation_));
    weight_cos_included_angle_ = 10000;
    weight_anchor_points_ = 1;
    weight_length_ = 1;
    max_num_of_iterations_ = 500;
    acceptable_num_of_iterations_ = 15;
    tol_ = 1e-08;
  }
  acceptable_tol_ = 0.1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosThetaSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CosThetaSmootherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_cos_included_angle = 1 [default = 10000];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_weight_cos_included_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_cos_included_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_anchor_points = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_weight_anchor_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_anchor_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_length = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_weight_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 print_level = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_print_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_num_of_iterations = 5 [default = 500];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_num_of_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_of_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acceptable_num_of_iterations = 6 [default = 15];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_acceptable_num_of_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptable_num_of_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tol = 7 [default = 1e-08];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceptable_tol = 8 [default = 0.1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_acceptable_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceptable_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ipopt_use_automatic_differentiation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ipopt_use_automatic_differentiation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CosThetaSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CosThetaSmootherConfig)
  return false;
#undef DO_
}

void CosThetaSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CosThetaSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_cos_included_angle = 1 [default = 10000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_cos_included_angle(), output);
  }

  // optional double weight_anchor_points = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_anchor_points(), output);
  }

  // optional double weight_length = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_length(), output);
  }

  // optional int32 print_level = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->print_level(), output);
  }

  // optional int32 max_num_of_iterations = 5 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_num_of_iterations(), output);
  }

  // optional int32 acceptable_num_of_iterations = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->acceptable_num_of_iterations(), output);
  }

  // optional double tol = 7 [default = 1e-08];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->tol(), output);
  }

  // optional double acceptable_tol = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acceptable_tol(), output);
  }

  // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ipopt_use_automatic_differentiation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CosThetaSmootherConfig)
}

::google::protobuf::uint8* CosThetaSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CosThetaSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_cos_included_angle = 1 [default = 10000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_cos_included_angle(), target);
  }

  // optional double weight_anchor_points = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_anchor_points(), target);
  }

  // optional double weight_length = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_length(), target);
  }

  // optional int32 print_level = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->print_level(), target);
  }

  // optional int32 max_num_of_iterations = 5 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->acceptable_num_of_iterations(), target);
  }

  // optional double tol = 7 [default = 1e-08];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->tol(), target);
  }

  // optional double acceptable_tol = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acceptable_tol(), target);
  }

  // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ipopt_use_automatic_differentiation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CosThetaSmootherConfig)
  return target;
}

size_t CosThetaSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CosThetaSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 print_level = 4 [default = 0];
    if (has_print_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_level());
    }

    // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
    if (has_ipopt_use_automatic_differentiation()) {
      total_size += 1 + 1;
    }

    // optional double weight_cos_included_angle = 1 [default = 10000];
    if (has_weight_cos_included_angle()) {
      total_size += 1 + 8;
    }

    // optional double weight_anchor_points = 2 [default = 1];
    if (has_weight_anchor_points()) {
      total_size += 1 + 8;
    }

    // optional double weight_length = 3 [default = 1];
    if (has_weight_length()) {
      total_size += 1 + 8;
    }

    // optional int32 max_num_of_iterations = 5 [default = 500];
    if (has_max_num_of_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 6 [default = 15];
    if (has_acceptable_num_of_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptable_num_of_iterations());
    }

    // optional double tol = 7 [default = 1e-08];
    if (has_tol()) {
      total_size += 1 + 8;
    }

  }
  // optional double acceptable_tol = 8 [default = 0.1];
  if (has_acceptable_tol()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosThetaSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CosThetaSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosThetaSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CosThetaSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CosThetaSmootherConfig)
    MergeFrom(*source);
  }
}

void CosThetaSmootherConfig::MergeFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      print_level_ = from.print_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_use_automatic_differentiation_ = from.ipopt_use_automatic_differentiation_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_cos_included_angle_ = from.weight_cos_included_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_anchor_points_ = from.weight_anchor_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_length_ = from.weight_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_num_of_iterations_ = from.max_num_of_iterations_;
    }
    if (cached_has_bits & 0x00000040u) {
      acceptable_num_of_iterations_ = from.acceptable_num_of_iterations_;
    }
    if (cached_has_bits & 0x00000080u) {
      tol_ = from.tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_acceptable_tol(from.acceptable_tol());
  }
}

void CosThetaSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosThetaSmootherConfig::CopyFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosThetaSmootherConfig::IsInitialized() const {
  return true;
}

void CosThetaSmootherConfig::Swap(CosThetaSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosThetaSmootherConfig::InternalSwap(CosThetaSmootherConfig* other) {
  using std::swap;
  swap(print_level_, other->print_level_);
  swap(ipopt_use_automatic_differentiation_, other->ipopt_use_automatic_differentiation_);
  swap(weight_cos_included_angle_, other->weight_cos_included_angle_);
  swap(weight_anchor_points_, other->weight_anchor_points_);
  swap(weight_length_, other->weight_length_);
  swap(max_num_of_iterations_, other->max_num_of_iterations_);
  swap(acceptable_num_of_iterations_, other->acceptable_num_of_iterations_);
  swap(tol_, other->tol_);
  swap(acceptable_tol_, other->acceptable_tol_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CosThetaSmootherConfig::GetMetadata() const {
  protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CosThetaSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::CosThetaSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CosThetaSmootherConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

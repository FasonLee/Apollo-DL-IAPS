// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#include "vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vehicle_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatencyParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Transform;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Extrinsics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehicleParam;
}  // namespace protobuf_vehicle_5fconfig_2eproto
namespace apollo {
namespace common {
class TransformDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transform>
      _instance;
} _Transform_default_instance_;
class ExtrinsicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Extrinsics>
      _instance;
} _Extrinsics_default_instance_;
class LatencyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyParam>
      _instance;
} _LatencyParam_default_instance_;
class VehicleParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleParam>
      _instance;
} _VehicleParam_default_instance_;
class VehicleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleConfig>
      _instance;
} _VehicleConfig_default_instance_;
}  // namespace common
}  // namespace apollo
namespace protobuf_vehicle_5fconfig_2eproto {
static void InitDefaultsTransform() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_Transform_default_instance_;
    new (ptr) ::apollo::common::Transform();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::Transform::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Transform =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransform}, {}};

static void InitDefaultsExtrinsics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_Extrinsics_default_instance_;
    new (ptr) ::apollo::common::Extrinsics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::Extrinsics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Extrinsics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExtrinsics}, {
      &protobuf_vehicle_5fconfig_2eproto::scc_info_Transform.base,}};

static void InitDefaultsLatencyParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyParam_default_instance_;
    new (ptr) ::apollo::common::LatencyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatencyParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatencyParam}, {}};

static void InitDefaultsVehicleParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_VehicleParam_default_instance_;
    new (ptr) ::apollo::common::VehicleParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::VehicleParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleParam}, {
      &protobuf_vehicle_5fconfig_2eproto::scc_info_LatencyParam.base,}};

static void InitDefaultsVehicleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_VehicleConfig_default_instance_;
    new (ptr) ::apollo::common::VehicleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::VehicleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VehicleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVehicleConfig}, {
      &protobuf_vehicle_5fconfig_2eproto::scc_info_VehicleParam.base,
      &protobuf_vehicle_5fconfig_2eproto::scc_info_Extrinsics.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Transform.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Extrinsics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleConfig.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Transform, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Transform, source_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Transform, target_frame_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Extrinsics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Extrinsics, tansforms_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyParam, dead_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyParam, rise_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyParam, peak_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyParam, settling_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, brand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, front_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, back_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, left_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, right_edge_to_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, min_turn_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, max_steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, max_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, min_steer_angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, steer_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, wheel_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, wheel_rolling_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, max_abs_speed_when_stopped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, brake_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, throttle_deadzone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, steering_latency_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, throttle_latency_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleParam, brake_latency_param_),
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  4,
  21,
  22,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleConfig, vehicle_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::VehicleConfig, extrinsics_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::common::Transform)},
  { 9, 15, sizeof(::apollo::common::Extrinsics)},
  { 16, 25, sizeof(::apollo::common::LatencyParam)},
  { 29, 57, sizeof(::apollo::common::VehicleParam)},
  { 80, 87, sizeof(::apollo::common::VehicleConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_Transform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_Extrinsics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_VehicleParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_VehicleConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vehicle_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024vehicle_config.proto\022\rapollo.common\"7\n"
      "\tTransform\022\024\n\014source_frame\030\001 \001(\014\022\024\n\014targ"
      "et_frame\030\002 \001(\014\"9\n\nExtrinsics\022+\n\ttansform"
      "s\030\001 \003(\0132\030.apollo.common.Transform\"^\n\014Lat"
      "encyParam\022\021\n\tdead_time\030\001 \001(\001\022\021\n\trise_tim"
      "e\030\002 \001(\001\022\021\n\tpeak_time\030\003 \001(\001\022\025\n\rsettling_t"
      "ime\030\004 \001(\001\"\262\006\n\014VehicleParam\022*\n\005brand\030\001 \001("
      "\0162\033.apollo.common.VehicleBrand\022!\n\024front_"
      "edge_to_center\030\003 \001(\001:\003nan\022 \n\023back_edge_t"
      "o_center\030\004 \001(\001:\003nan\022 \n\023left_edge_to_cent"
      "er\030\005 \001(\001:\003nan\022!\n\024right_edge_to_center\030\006 "
      "\001(\001:\003nan\022\023\n\006length\030\007 \001(\001:\003nan\022\022\n\005width\030\010"
      " \001(\001:\003nan\022\023\n\006height\030\t \001(\001:\003nan\022\034\n\017min_tu"
      "rn_radius\030\n \001(\001:\003nan\022\035\n\020max_acceleration"
      "\030\013 \001(\001:\003nan\022\035\n\020max_deceleration\030\014 \001(\001:\003n"
      "an\022\034\n\017max_steer_angle\030\r \001(\001:\003nan\022!\n\024max_"
      "steer_angle_rate\030\016 \001(\001:\003nan\022!\n\024min_steer"
      "_angle_rate\030\017 \001(\001:\003nan\022\030\n\013steer_ratio\030\020 "
      "\001(\001:\003nan\022\027\n\nwheel_base\030\021 \001(\001:\003nan\022!\n\024whe"
      "el_rolling_radius\030\022 \001(\001:\003nan\022\'\n\032max_abs_"
      "speed_when_stopped\030\023 \001(\002:\003nan\022\033\n\016brake_d"
      "eadzone\030\024 \001(\001:\003nan\022\036\n\021throttle_deadzone\030"
      "\025 \001(\001:\003nan\022;\n\026steering_latency_param\030\026 \001"
      "(\0132\033.apollo.common.LatencyParam\022;\n\026throt"
      "tle_latency_param\030\027 \001(\0132\033.apollo.common."
      "LatencyParam\0228\n\023brake_latency_param\030\030 \001("
      "\0132\033.apollo.common.LatencyParam\"r\n\rVehicl"
      "eConfig\0222\n\rvehicle_param\030\002 \001(\0132\033.apollo."
      "common.VehicleParam\022-\n\nextrinsics\030\003 \001(\0132"
      "\031.apollo.common.Extrinsics*~\n\014VehicleBra"
      "nd\022\017\n\013LINCOLN_MKZ\020\000\022\007\n\003GEM\020\001\022\t\n\005LEXUS\020\002\022"
      "\013\n\007TRANSIT\020\003\022\007\n\003GE3\020\004\022\007\n\003WEY\020\005\022\014\n\010ZHONGY"
      "UN\020\006\022\006\n\002CH\020\007\022\010\n\004DKIT\020\010\022\n\n\006NEOLIX\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vehicle_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vehicle_5fconfig_2eproto
namespace apollo {
namespace common {
const ::google::protobuf::EnumDescriptor* VehicleBrand_descriptor() {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Transform::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kSourceFrameFieldNumber;
const int Transform::kTargetFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fconfig_2eproto::scc_info_Transform.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Transform)
}
Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_frame()) {
    source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
  }
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_frame()) {
    target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Transform)
}

void Transform::SharedCtor() {
  source_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:apollo.common.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  source_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  ::protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transform& Transform::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fconfig_2eproto::scc_info_Transform.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_frame_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      target_frame_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Transform)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes source_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes target_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->source_frame(), output);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->source_frame(), target);
  }

  // optional bytes target_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Transform)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes source_frame = 1;
    if (has_source_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_frame());
    }

    // optional bytes target_frame = 2;
    if (has_target_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_frame());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_frame();
      source_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_frame();
      target_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_frame_);
    }
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  using std::swap;
  source_frame_.Swap(&other->source_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_frame_.Swap(&other->target_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Extrinsics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extrinsics::kTansformsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extrinsics::Extrinsics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fconfig_2eproto::scc_info_Extrinsics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tansforms_(from.tansforms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Extrinsics)
}

void Extrinsics::SharedCtor() {
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:apollo.common.Extrinsics)
  SharedDtor();
}

void Extrinsics::SharedDtor() {
}

void Extrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Extrinsics::descriptor() {
  ::protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Extrinsics& Extrinsics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fconfig_2eproto::scc_info_Extrinsics.base);
  return *internal_default_instance();
}


void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tansforms_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Extrinsics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Extrinsics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Transform tansforms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tansforms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Extrinsics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Extrinsics)
  return false;
#undef DO_
}

void Extrinsics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tansforms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tansforms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Extrinsics)
}

::google::protobuf::uint8* Extrinsics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Extrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tansforms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tansforms(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Extrinsics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Transform tansforms = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tansforms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tansforms(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extrinsics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrinsics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Extrinsics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Extrinsics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Extrinsics)
    MergeFrom(*source);
  }
}

void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tansforms_.MergeFrom(from.tansforms_);
}

void Extrinsics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::Swap(Extrinsics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extrinsics::InternalSwap(Extrinsics* other) {
  using std::swap;
  CastToBase(&tansforms_)->InternalSwap(CastToBase(&other->tansforms_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Extrinsics::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyParam::kDeadTimeFieldNumber;
const int LatencyParam::kRiseTimeFieldNumber;
const int LatencyParam::kPeakTimeFieldNumber;
const int LatencyParam::kSettlingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyParam::LatencyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fconfig_2eproto::scc_info_LatencyParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyParam)
}
LatencyParam::LatencyParam(const LatencyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dead_time_, &from.dead_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyParam)
}

void LatencyParam::SharedCtor() {
  ::memset(&dead_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
}

LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyParam)
  SharedDtor();
}

void LatencyParam::SharedDtor() {
}

void LatencyParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyParam::descriptor() {
  ::protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyParam& LatencyParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fconfig_2eproto::scc_info_LatencyParam.base);
  return *internal_default_instance();
}


void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&dead_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settling_time_) -
        reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dead_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_dead_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dead_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rise_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_rise_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rise_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double peak_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_peak_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double settling_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_settling_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settling_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyParam)
  return false;
#undef DO_
}

void LatencyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dead_time(), output);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rise_time(), output);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->peak_time(), output);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->settling_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyParam)
}

::google::protobuf::uint8* LatencyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dead_time(), target);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rise_time(), target);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->peak_time(), target);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->settling_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyParam)
  return target;
}

size_t LatencyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double dead_time = 1;
    if (has_dead_time()) {
      total_size += 1 + 8;
    }

    // optional double rise_time = 2;
    if (has_rise_time()) {
      total_size += 1 + 8;
    }

    // optional double peak_time = 3;
    if (has_peak_time()) {
      total_size += 1 + 8;
    }

    // optional double settling_time = 4;
    if (has_settling_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyParam)
    MergeFrom(*source);
  }
}

void LatencyParam::MergeFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dead_time_ = from.dead_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      rise_time_ = from.rise_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      peak_time_ = from.peak_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      settling_time_ = from.settling_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyParam::IsInitialized() const {
  return true;
}

void LatencyParam::Swap(LatencyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyParam::InternalSwap(LatencyParam* other) {
  using std::swap;
  swap(dead_time_, other->dead_time_);
  swap(rise_time_, other->rise_time_);
  swap(peak_time_, other->peak_time_);
  swap(settling_time_, other->settling_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyParam::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleParam::InitAsDefaultInstance() {
  ::apollo::common::_VehicleParam_default_instance_._instance.get_mutable()->steering_latency_param_ = const_cast< ::apollo::common::LatencyParam*>(
      ::apollo::common::LatencyParam::internal_default_instance());
  ::apollo::common::_VehicleParam_default_instance_._instance.get_mutable()->throttle_latency_param_ = const_cast< ::apollo::common::LatencyParam*>(
      ::apollo::common::LatencyParam::internal_default_instance());
  ::apollo::common::_VehicleParam_default_instance_._instance.get_mutable()->brake_latency_param_ = const_cast< ::apollo::common::LatencyParam*>(
      ::apollo::common::LatencyParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kBrandFieldNumber;
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kMinSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
const int VehicleParam::kMaxAbsSpeedWhenStoppedFieldNumber;
const int VehicleParam::kBrakeDeadzoneFieldNumber;
const int VehicleParam::kThrottleDeadzoneFieldNumber;
const int VehicleParam::kSteeringLatencyParamFieldNumber;
const int VehicleParam::kThrottleLatencyParamFieldNumber;
const int VehicleParam::kBrakeLatencyParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fconfig_2eproto::scc_info_VehicleParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_steering_latency_param()) {
    steering_latency_param_ = new ::apollo::common::LatencyParam(*from.steering_latency_param_);
  } else {
    steering_latency_param_ = NULL;
  }
  if (from.has_throttle_latency_param()) {
    throttle_latency_param_ = new ::apollo::common::LatencyParam(*from.throttle_latency_param_);
  } else {
    throttle_latency_param_ = NULL;
  }
  if (from.has_brake_latency_param()) {
    brake_latency_param_ = new ::apollo::common::LatencyParam(*from.brake_latency_param_);
  } else {
    brake_latency_param_ = NULL;
  }
  ::memcpy(&brand_, &from.brand_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_deadzone_) -
    reinterpret_cast<char*>(&brand_)) + sizeof(throttle_deadzone_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::memset(&steering_latency_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brand_) -
      reinterpret_cast<char*>(&steering_latency_param_)) + sizeof(brand_));
  max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
  front_edge_to_center_ = ::google::protobuf::internal::NaN();
  back_edge_to_center_ = ::google::protobuf::internal::NaN();
  left_edge_to_center_ = ::google::protobuf::internal::NaN();
  right_edge_to_center_ = ::google::protobuf::internal::NaN();
  length_ = ::google::protobuf::internal::NaN();
  width_ = ::google::protobuf::internal::NaN();
  height_ = ::google::protobuf::internal::NaN();
  min_turn_radius_ = ::google::protobuf::internal::NaN();
  max_acceleration_ = ::google::protobuf::internal::NaN();
  max_deceleration_ = ::google::protobuf::internal::NaN();
  max_steer_angle_ = ::google::protobuf::internal::NaN();
  max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  steer_ratio_ = ::google::protobuf::internal::NaN();
  wheel_base_ = ::google::protobuf::internal::NaN();
  wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
  brake_deadzone_ = ::google::protobuf::internal::NaN();
  throttle_deadzone_ = ::google::protobuf::internal::NaN();
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
  if (this != internal_default_instance()) delete steering_latency_param_;
  if (this != internal_default_instance()) delete throttle_latency_param_;
  if (this != internal_default_instance()) delete brake_latency_param_;
}

void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleParam::descriptor() {
  ::protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleParam& VehicleParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fconfig_2eproto::scc_info_VehicleParam.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(steering_latency_param_ != NULL);
      steering_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(throttle_latency_param_ != NULL);
      throttle_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brake_latency_param_ != NULL);
      brake_latency_param_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    brand_ = 0;
    max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
    front_edge_to_center_ = ::google::protobuf::internal::NaN();
    back_edge_to_center_ = ::google::protobuf::internal::NaN();
    left_edge_to_center_ = ::google::protobuf::internal::NaN();
  }
  if (cached_has_bits & 65280u) {
    right_edge_to_center_ = ::google::protobuf::internal::NaN();
    length_ = ::google::protobuf::internal::NaN();
    width_ = ::google::protobuf::internal::NaN();
    height_ = ::google::protobuf::internal::NaN();
    min_turn_radius_ = ::google::protobuf::internal::NaN();
    max_acceleration_ = ::google::protobuf::internal::NaN();
    max_deceleration_ = ::google::protobuf::internal::NaN();
    max_steer_angle_ = ::google::protobuf::internal::NaN();
  }
  if (cached_has_bits & 8323072u) {
    max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
    min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
    steer_ratio_ = ::google::protobuf::internal::NaN();
    wheel_base_ = ::google::protobuf::internal::NaN();
    wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
    brake_deadzone_ = ::google::protobuf::internal::NaN();
    throttle_deadzone_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.VehicleBrand brand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::VehicleBrand_IsValid(value)) {
            set_brand(static_cast< ::apollo::common::VehicleBrand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_edge_to_center = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_front_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double back_edge_to_center = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_back_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_edge_to_center = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_left_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_edge_to_center = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_right_edge_to_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 7 [default = nan];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 8 [default = nan];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 9 [default = nan];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_turn_radius = 10 [default = nan];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_min_turn_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 11 [default = nan];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 12 [default = nan];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_max_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle = 13 [default = nan];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_max_steer_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle_rate = 14 [default = nan];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_max_steer_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_steer_angle_rate = 15 [default = nan];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_min_steer_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_ratio = 16 [default = nan];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_steer_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_base = 17 [default = nan];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_wheel_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_rolling_radius = 18 [default = nan];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_wheel_rolling_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_abs_speed_when_stopped = 19 [default = nan];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_max_abs_speed_when_stopped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_abs_speed_when_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_deadzone = 20 [default = nan];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_brake_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_deadzone = 21 [default = nan];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_throttle_deadzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyParam steering_latency_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyParam throttle_latency_param = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_throttle_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyParam brake_latency_param = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleParam)
  return false;
#undef DO_
}

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brand(), output);
  }

  // optional double front_edge_to_center = 3 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->front_edge_to_center(), output);
  }

  // optional double back_edge_to_center = 4 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->back_edge_to_center(), output);
  }

  // optional double left_edge_to_center = 5 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->left_edge_to_center(), output);
  }

  // optional double right_edge_to_center = 6 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right_edge_to_center(), output);
  }

  // optional double length = 7 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double width = 8 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->width(), output);
  }

  // optional double height = 9 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->height(), output);
  }

  // optional double min_turn_radius = 10 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->min_turn_radius(), output);
  }

  // optional double max_acceleration = 11 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 12 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_deceleration(), output);
  }

  // optional double max_steer_angle = 13 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_steer_angle(), output);
  }

  // optional double max_steer_angle_rate = 14 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_steer_angle_rate(), output);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->min_steer_angle_rate(), output);
  }

  // optional double steer_ratio = 16 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->steer_ratio(), output);
  }

  // optional double wheel_base = 17 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->wheel_base(), output);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->wheel_rolling_radius(), output);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->max_abs_speed_when_stopped(), output);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->brake_deadzone(), output);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->throttle_deadzone(), output);
  }

  // optional .apollo.common.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_steering_latency_param(), output);
  }

  // optional .apollo.common.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_throttle_latency_param(), output);
  }

  // optional .apollo.common.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_brake_latency_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brand(), target);
  }

  // optional double front_edge_to_center = 3 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 4 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 5 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 6 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right_edge_to_center(), target);
  }

  // optional double length = 7 [default = nan];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double width = 8 [default = nan];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->width(), target);
  }

  // optional double height = 9 [default = nan];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->height(), target);
  }

  // optional double min_turn_radius = 10 [default = nan];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->min_turn_radius(), target);
  }

  // optional double max_acceleration = 11 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 12 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_deceleration(), target);
  }

  // optional double max_steer_angle = 13 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 14 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 16 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->steer_ratio(), target);
  }

  // optional double wheel_base = 17 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->max_abs_speed_when_stopped(), target);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->throttle_deadzone(), target);
  }

  // optional .apollo.common.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_steering_latency_param(), deterministic, target);
  }

  // optional .apollo.common.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_throttle_latency_param(), deterministic, target);
  }

  // optional .apollo.common.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_brake_latency_param(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.LatencyParam steering_latency_param = 22;
    if (has_steering_latency_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_latency_param_);
    }

    // optional .apollo.common.LatencyParam throttle_latency_param = 23;
    if (has_throttle_latency_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *throttle_latency_param_);
    }

    // optional .apollo.common.LatencyParam brake_latency_param = 24;
    if (has_brake_latency_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_latency_param_);
    }

    // optional .apollo.common.VehicleBrand brand = 1;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional float max_abs_speed_when_stopped = 19 [default = nan];
    if (has_max_abs_speed_when_stopped()) {
      total_size += 2 + 4;
    }

    // optional double front_edge_to_center = 3 [default = nan];
    if (has_front_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 4 [default = nan];
    if (has_back_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double left_edge_to_center = 5 [default = nan];
    if (has_left_edge_to_center()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double right_edge_to_center = 6 [default = nan];
    if (has_right_edge_to_center()) {
      total_size += 1 + 8;
    }

    // optional double length = 7 [default = nan];
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 8 [default = nan];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 9 [default = nan];
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double min_turn_radius = 10 [default = nan];
    if (has_min_turn_radius()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 11 [default = nan];
    if (has_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 12 [default = nan];
    if (has_max_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle = 13 [default = nan];
    if (has_max_steer_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional double max_steer_angle_rate = 14 [default = nan];
    if (has_max_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double min_steer_angle_rate = 15 [default = nan];
    if (has_min_steer_angle_rate()) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 16 [default = nan];
    if (has_steer_ratio()) {
      total_size += 2 + 8;
    }

    // optional double wheel_base = 17 [default = nan];
    if (has_wheel_base()) {
      total_size += 2 + 8;
    }

    // optional double wheel_rolling_radius = 18 [default = nan];
    if (has_wheel_rolling_radius()) {
      total_size += 2 + 8;
    }

    // optional double brake_deadzone = 20 [default = nan];
    if (has_brake_deadzone()) {
      total_size += 2 + 8;
    }

    // optional double throttle_deadzone = 21 [default = nan];
    if (has_throttle_deadzone()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_steering_latency_param()->::apollo::common::LatencyParam::MergeFrom(from.steering_latency_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_throttle_latency_param()->::apollo::common::LatencyParam::MergeFrom(from.throttle_latency_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_brake_latency_param()->::apollo::common::LatencyParam::MergeFrom(from.brake_latency_param());
    }
    if (cached_has_bits & 0x00000008u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_abs_speed_when_stopped_ = from.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000020u) {
      front_edge_to_center_ = from.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000040u) {
      back_edge_to_center_ = from.back_edge_to_center_;
    }
    if (cached_has_bits & 0x00000080u) {
      left_edge_to_center_ = from.left_edge_to_center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      right_edge_to_center_ = from.right_edge_to_center_;
    }
    if (cached_has_bits & 0x00000200u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000400u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_turn_radius_ = from.min_turn_radius_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_steer_angle_ = from.max_steer_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      max_steer_angle_rate_ = from.max_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      min_steer_angle_rate_ = from.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      steer_ratio_ = from.steer_ratio_;
    }
    if (cached_has_bits & 0x00080000u) {
      wheel_base_ = from.wheel_base_;
    }
    if (cached_has_bits & 0x00100000u) {
      wheel_rolling_radius_ = from.wheel_rolling_radius_;
    }
    if (cached_has_bits & 0x00200000u) {
      brake_deadzone_ = from.brake_deadzone_;
    }
    if (cached_has_bits & 0x00400000u) {
      throttle_deadzone_ = from.throttle_deadzone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  swap(steering_latency_param_, other->steering_latency_param_);
  swap(throttle_latency_param_, other->throttle_latency_param_);
  swap(brake_latency_param_, other->brake_latency_param_);
  swap(brand_, other->brand_);
  swap(max_abs_speed_when_stopped_, other->max_abs_speed_when_stopped_);
  swap(front_edge_to_center_, other->front_edge_to_center_);
  swap(back_edge_to_center_, other->back_edge_to_center_);
  swap(left_edge_to_center_, other->left_edge_to_center_);
  swap(right_edge_to_center_, other->right_edge_to_center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(min_turn_radius_, other->min_turn_radius_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(max_steer_angle_, other->max_steer_angle_);
  swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  swap(min_steer_angle_rate_, other->min_steer_angle_rate_);
  swap(steer_ratio_, other->steer_ratio_);
  swap(wheel_base_, other->wheel_base_);
  swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  swap(brake_deadzone_, other->brake_deadzone_);
  swap(throttle_deadzone_, other->throttle_deadzone_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleConfig::InitAsDefaultInstance() {
  ::apollo::common::_VehicleConfig_default_instance_._instance.get_mutable()->vehicle_param_ = const_cast< ::apollo::common::VehicleParam*>(
      ::apollo::common::VehicleParam::internal_default_instance());
  ::apollo::common::_VehicleConfig_default_instance_._instance.get_mutable()->extrinsics_ = const_cast< ::apollo::common::Extrinsics*>(
      ::apollo::common::Extrinsics::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleConfig::kVehicleParamFieldNumber;
const int VehicleConfig::kExtrinsicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleConfig::VehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fconfig_2eproto::scc_info_VehicleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_param()) {
    vehicle_param_ = new ::apollo::common::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = NULL;
  }
  if (from.has_extrinsics()) {
    extrinsics_ = new ::apollo::common::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  ::memset(&vehicle_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrinsics_) -
      reinterpret_cast<char*>(&vehicle_param_)) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleConfig)
  SharedDtor();
}

void VehicleConfig::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_param_;
  if (this != internal_default_instance()) delete extrinsics_;
}

void VehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleConfig::descriptor() {
  ::protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleConfig& VehicleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fconfig_2eproto::scc_info_VehicleConfig.base);
  return *internal_default_instance();
}


void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_param_ != NULL);
      vehicle_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(extrinsics_ != NULL);
      extrinsics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.VehicleParam vehicle_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Extrinsics extrinsics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extrinsics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleConfig)
  return false;
#undef DO_
}

void VehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vehicle_param(), output);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_extrinsics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleConfig)
}

::google::protobuf::uint8* VehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleParam vehicle_param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vehicle_param(), deterministic, target);
  }

  // optional .apollo.common.Extrinsics extrinsics = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_extrinsics(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.VehicleParam vehicle_param = 2;
    if (has_vehicle_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_param_);
    }

    // optional .apollo.common.Extrinsics extrinsics = 3;
    if (has_extrinsics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *extrinsics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vehicle_param()->::apollo::common::VehicleParam::MergeFrom(from.vehicle_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_extrinsics()->::apollo::common::Extrinsics::MergeFrom(from.extrinsics());
    }
  }
}

void VehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::Swap(VehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  swap(vehicle_param_, other->vehicle_param_);
  swap(extrinsics_, other->extrinsics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleConfig::GetMetadata() const {
  protobuf_vehicle_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::Transform* Arena::CreateMaybeMessage< ::apollo::common::Transform >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::Transform >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::Extrinsics* Arena::CreateMaybeMessage< ::apollo::common::Extrinsics >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::Extrinsics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyParam* Arena::CreateMaybeMessage< ::apollo::common::LatencyParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::VehicleParam* Arena::CreateMaybeMessage< ::apollo::common::VehicleParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::VehicleParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::VehicleConfig* Arena::CreateMaybeMessage< ::apollo::common::VehicleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::VehicleConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

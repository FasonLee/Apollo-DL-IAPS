// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_config.proto

#include "task_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_task_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DpStSpeedOptimizerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkPathWeights;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShiftConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MoveDestLaneConfigTable;
}  // namespace protobuf_task_5fconfig_2eproto
namespace apollo {
namespace planning {
class CreepDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreepDeciderConfig>
      _instance;
} _CreepDeciderConfig_default_instance_;
class LaneChangeDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneChangeDeciderConfig>
      _instance;
} _LaneChangeDeciderConfig_default_instance_;
class LearningModelInferenceTaskConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningModelInferenceTaskConfig>
      _instance;
} _LearningModelInferenceTaskConfig_default_instance_;
class LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningModelInferenceTrajectoryTaskConfig>
      _instance;
} _LearningModelInferenceTrajectoryTaskConfig_default_instance_;
class NaviObstacleDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NaviObstacleDeciderConfig>
      _instance;
} _NaviObstacleDeciderConfig_default_instance_;
class NaviPathDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NaviPathDeciderConfig>
      _instance;
} _NaviPathDeciderConfig_default_instance_;
class MoveDestLaneConfigTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MoveDestLaneConfigTable>
      _instance;
} _MoveDestLaneConfigTable_default_instance_;
class ShiftConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShiftConfig>
      _instance;
} _ShiftConfig_default_instance_;
class NaviSpeedDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NaviSpeedDeciderConfig>
      _instance;
} _NaviSpeedDeciderConfig_default_instance_;
class PathAssessmentDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathAssessmentDeciderConfig>
      _instance;
} _PathAssessmentDeciderConfig_default_instance_;
class PathBoundsDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathBoundsDeciderConfig>
      _instance;
} _PathBoundsDeciderConfig_default_instance_;
class PathDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathDeciderConfig>
      _instance;
} _PathDeciderConfig_default_instance_;
class PathLaneBorrowDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathLaneBorrowDeciderConfig>
      _instance;
} _PathLaneBorrowDeciderConfig_default_instance_;
class PathReferenceDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathReferenceDeciderConfig>
      _instance;
} _PathReferenceDeciderConfig_default_instance_;
class PathReuseDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathReuseDeciderConfig>
      _instance;
} _PathReuseDeciderConfig_default_instance_;
class PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkNonlinearSpeedOptimizerConfig>
      _instance;
} _PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_;
class PiecewiseJerkPathOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkPathOptimizerConfig>
      _instance;
} _PiecewiseJerkPathOptimizerConfig_default_instance_;
class PiecewiseJerkPathWeightsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkPathWeights>
      _instance;
} _PiecewiseJerkPathWeights_default_instance_;
class PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkSpeedOptimizerConfig>
      _instance;
} _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
class RuleBasedStopDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuleBasedStopDeciderConfig>
      _instance;
} _RuleBasedStopDeciderConfig_default_instance_;
class SpeedBoundsDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedBoundsDeciderConfig>
      _instance;
} _SpeedBoundsDeciderConfig_default_instance_;
class SpeedHeuristicOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedHeuristicOptimizerConfig>
      _instance;
} _SpeedHeuristicOptimizerConfig_default_instance_;
class DpStSpeedOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DpStSpeedOptimizerConfig>
      _instance;
} _DpStSpeedOptimizerConfig_default_instance_;
class STBoundsDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<STBoundsDeciderConfig>
      _instance;
} _STBoundsDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_task_5fconfig_2eproto {
static void InitDefaultsCreepDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CreepDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::CreepDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CreepDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreepDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreepDeciderConfig}, {}};

static void InitDefaultsLaneChangeDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LaneChangeDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::LaneChangeDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LaneChangeDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneChangeDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneChangeDeciderConfig}, {}};

static void InitDefaultsLearningModelInferenceTaskConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LearningModelInferenceTaskConfig_default_instance_;
    new (ptr) ::apollo::planning::LearningModelInferenceTaskConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LearningModelInferenceTaskConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LearningModelInferenceTaskConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLearningModelInferenceTaskConfig}, {}};

static void InitDefaultsLearningModelInferenceTrajectoryTaskConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LearningModelInferenceTrajectoryTaskConfig_default_instance_;
    new (ptr) ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LearningModelInferenceTrajectoryTaskConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLearningModelInferenceTrajectoryTaskConfig}, {}};

static void InitDefaultsNaviObstacleDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NaviObstacleDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::NaviObstacleDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NaviObstacleDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NaviObstacleDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNaviObstacleDeciderConfig}, {}};

static void InitDefaultsNaviPathDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NaviPathDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::NaviPathDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NaviPathDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NaviPathDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNaviPathDeciderConfig}, {
      &protobuf_task_5fconfig_2eproto::scc_info_MoveDestLaneConfigTable.base,}};

static void InitDefaultsMoveDestLaneConfigTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MoveDestLaneConfigTable_default_instance_;
    new (ptr) ::apollo::planning::MoveDestLaneConfigTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MoveDestLaneConfigTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MoveDestLaneConfigTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMoveDestLaneConfigTable}, {
      &protobuf_task_5fconfig_2eproto::scc_info_ShiftConfig.base,}};

static void InitDefaultsShiftConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ShiftConfig_default_instance_;
    new (ptr) ::apollo::planning::ShiftConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ShiftConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShiftConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShiftConfig}, {}};

static void InitDefaultsNaviSpeedDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NaviSpeedDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::NaviSpeedDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NaviSpeedDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NaviSpeedDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNaviSpeedDeciderConfig}, {}};

static void InitDefaultsPathAssessmentDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathAssessmentDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathAssessmentDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathAssessmentDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathAssessmentDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathAssessmentDeciderConfig}, {}};

static void InitDefaultsPathBoundsDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathBoundsDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathBoundsDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathBoundsDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathBoundsDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathBoundsDeciderConfig}, {}};

static void InitDefaultsPathDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathDeciderConfig}, {}};

static void InitDefaultsPathLaneBorrowDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathLaneBorrowDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathLaneBorrowDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathLaneBorrowDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathLaneBorrowDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathLaneBorrowDeciderConfig}, {}};

static void InitDefaultsPathReferenceDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathReferenceDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathReferenceDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathReferenceDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathReferenceDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathReferenceDeciderConfig}, {}};

static void InitDefaultsPathReuseDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathReuseDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathReuseDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathReuseDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathReuseDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathReuseDeciderConfig}, {}};

static void InitDefaultsPiecewiseJerkNonlinearSpeedOptimizerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkNonlinearSpeedOptimizerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPiecewiseJerkNonlinearSpeedOptimizerConfig}, {}};

static void InitDefaultsPiecewiseJerkPathOptimizerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PiecewiseJerkPathOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::PiecewiseJerkPathOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PiecewiseJerkPathOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PiecewiseJerkPathOptimizerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPiecewiseJerkPathOptimizerConfig}, {
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkPathWeights.base,}};

static void InitDefaultsPiecewiseJerkPathWeights() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PiecewiseJerkPathWeights_default_instance_;
    new (ptr) ::apollo::planning::PiecewiseJerkPathWeights();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PiecewiseJerkPathWeights::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkPathWeights =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPiecewiseJerkPathWeights}, {}};

static void InitDefaultsPiecewiseJerkSpeedOptimizerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPiecewiseJerkSpeedOptimizerConfig}, {}};

static void InitDefaultsRuleBasedStopDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RuleBasedStopDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::RuleBasedStopDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RuleBasedStopDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RuleBasedStopDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRuleBasedStopDeciderConfig}, {}};

static void InitDefaultsSpeedBoundsDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SpeedBoundsDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::SpeedBoundsDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SpeedBoundsDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeedBoundsDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeedBoundsDeciderConfig}, {}};

static void InitDefaultsSpeedHeuristicOptimizerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SpeedHeuristicOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::SpeedHeuristicOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SpeedHeuristicOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedHeuristicOptimizerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedHeuristicOptimizerConfig}, {
      &protobuf_task_5fconfig_2eproto::scc_info_DpStSpeedOptimizerConfig.base,}};

static void InitDefaultsDpStSpeedOptimizerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::DpStSpeedOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DpStSpeedOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DpStSpeedOptimizerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDpStSpeedOptimizerConfig}, {}};

static void InitDefaultsSTBoundsDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_STBoundsDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::STBoundsDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::STBoundsDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_STBoundsDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSTBoundsDeciderConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CreepDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneChangeDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LearningModelInferenceTaskConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LearningModelInferenceTrajectoryTaskConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NaviObstacleDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NaviPathDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MoveDestLaneConfigTable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShiftConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NaviSpeedDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathAssessmentDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathBoundsDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathLaneBorrowDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathReferenceDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathReuseDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PiecewiseJerkNonlinearSpeedOptimizerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PiecewiseJerkPathOptimizerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PiecewiseJerkPathWeights.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PiecewiseJerkSpeedOptimizerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RuleBasedStopDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedBoundsDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedHeuristicOptimizerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DpStSpeedOptimizerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_STBoundsDeciderConfig.base);
}

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, min_boundary_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, ignore_max_st_min_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, ignore_min_st_min_s_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, enable_lane_change_urgency_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, enable_prioritize_change_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, enable_remove_change_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, reckless_change_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, change_lane_success_freeze_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, change_lane_fail_freeze_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, model_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, cpu_model_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, gpu_model_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, use_cuda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, trajectory_delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, allow_empty_learning_based_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, allow_empty_output_trajectory_),
  4,
  0,
  1,
  5,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig, min_adc_future_trajectory_time_length_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, min_nudge_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_nudge_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_allow_nudge_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, safe_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, nudge_allow_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, cycles_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, judge_dis_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, basis_dis_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, lateral_velocity_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, speed_decider_detect_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_keep_nudge_cycles_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  9,
  10,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_look_forward_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_keep_lane_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_keep_lane_shift_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_keep_lane_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, keep_lane_shift_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, move_dest_lane_config_talbe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, move_dest_lane_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_kappa_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, kappa_move_dest_lane_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, start_plan_point_from_),
  5,
  4,
  6,
  7,
  8,
  9,
  0,
  10,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, lateral_shift_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ShiftConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ShiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ShiftConfig, max_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ShiftConfig, max_move_dest_lane_shift_y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, max_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, max_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, obstacle_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, safe_distance_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, safe_distance_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, following_accel_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, soft_centric_accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_centric_accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_safe_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_planning_start_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_accel_auto_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, kappa_preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, kappa_threshold_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathAssessmentDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathAssessmentDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_lane_borrowing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_pull_over_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_destination_to_adc_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_destination_to_pathend_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_road_edge_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_approach_lon_distance_adjust_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, adc_buffer_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_extend_lane_bounds_to_include_adc_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, static_obstacle_buffer_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathLaneBorrowDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathLaneBorrowDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathLaneBorrowDeciderConfig, allow_lane_borrowing_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, min_path_reference_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, weight_x_ref_path_reference_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReuseDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReuseDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PathReuseDeciderConfig, reuse_path_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, lat_acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, s_potential_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, ref_v_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, ref_s_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, end_s_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, end_v_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, end_a_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, soft_s_bound_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, use_warm_start_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, default_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, lane_change_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, path_reference_l_weight_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, l_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, dl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, ddl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, dddl_weight_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, kappa_penalty_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, ref_s_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, ref_v_weight_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, max_adc_stop_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_beam_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_beam_radius_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, is_block_angle_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, approach_distance_for_lane_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, urgent_distance_for_lane_change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, boundary_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, max_centric_acceleration_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, minimal_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, point_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, lowest_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, collision_safety_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, static_obs_nudge_speed_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, dynamic_obs_nudge_speed_ratio_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, default_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, lane_change_speed_config_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, unit_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, dense_dimension_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, dense_unit_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, sparse_unit_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, speed_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, accel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, reference_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, go_down_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, go_up_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, default_obstacle_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, default_speed_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, exceed_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, reference_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, keep_clear_low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, accel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, decel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, positive_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, negative_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, safe_time_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, safe_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, spatial_potential_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, is_lane_changing_),
  4,
  3,
  5,
  6,
  0,
  7,
  8,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::STBoundsDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::STBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::STBoundsDeciderConfig, total_time_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::planning::CreepDeciderConfig)},
  { 17, 28, sizeof(::apollo::planning::LaneChangeDeciderConfig)},
  { 34, 46, sizeof(::apollo::planning::LearningModelInferenceTaskConfig)},
  { 53, 59, sizeof(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig)},
  { 60, 76, sizeof(::apollo::planning::NaviObstacleDeciderConfig)},
  { 87, 103, sizeof(::apollo::planning::NaviPathDeciderConfig)},
  { 114, 120, sizeof(::apollo::planning::MoveDestLaneConfigTable)},
  { 121, 128, sizeof(::apollo::planning::ShiftConfig)},
  { 130, 153, sizeof(::apollo::planning::NaviSpeedDeciderConfig)},
  { 171, 176, sizeof(::apollo::planning::PathAssessmentDeciderConfig)},
  { 176, 189, sizeof(::apollo::planning::PathBoundsDeciderConfig)},
  { 197, 203, sizeof(::apollo::planning::PathDeciderConfig)},
  { 204, 210, sizeof(::apollo::planning::PathLaneBorrowDeciderConfig)},
  { 211, 218, sizeof(::apollo::planning::PathReferenceDeciderConfig)},
  { 220, 226, sizeof(::apollo::planning::PathReuseDeciderConfig)},
  { 227, 243, sizeof(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig)},
  { 254, 262, sizeof(::apollo::planning::PiecewiseJerkPathOptimizerConfig)},
  { 265, 274, sizeof(::apollo::planning::PiecewiseJerkPathWeights)},
  { 278, 288, sizeof(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig)},
  { 293, 306, sizeof(::apollo::planning::RuleBasedStopDeciderConfig)},
  { 314, 328, sizeof(::apollo::planning::SpeedBoundsDeciderConfig)},
  { 337, 344, sizeof(::apollo::planning::SpeedHeuristicOptimizerConfig)},
  { 346, 378, sizeof(::apollo::planning::DpStSpeedOptimizerConfig)},
  { 405, 411, sizeof(::apollo::planning::STBoundsDeciderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CreepDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LaneChangeDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LearningModelInferenceTaskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LearningModelInferenceTrajectoryTaskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_NaviObstacleDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_NaviPathDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_MoveDestLaneConfigTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ShiftConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_NaviSpeedDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathAssessmentDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathBoundsDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathLaneBorrowDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathReferenceDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PathReuseDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PiecewiseJerkPathOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PiecewiseJerkPathWeights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_RuleBasedStopDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_SpeedBoundsDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_SpeedHeuristicOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_STBoundsDeciderConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "task_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021task_config.proto\022\017apollo.planning\"\314\001\n"
      "\022CreepDeciderConfig\022\032\n\rstop_distance\030\001 \001"
      "(\001:\0030.5\022\026\n\013speed_limit\030\002 \001(\001:\0011\022$\n\027max_v"
      "alid_stop_distance\030\003 \001(\001:\0030.3\022\031\n\016min_bou"
      "ndary_t\030\004 \001(\001:\0016\022 \n\023ignore_max_st_min_t\030"
      "\005 \001(\001:\0030.1\022\037\n\023ignore_min_st_min_s\030\006 \001(\001:"
      "\00215\"\227\002\n\027LaneChangeDeciderConfig\022(\n enabl"
      "e_lane_change_urgency_check\030\001 \001(\010\022,\n\035ena"
      "ble_prioritize_change_lane\030\002 \001(\010:\005false\022"
      "(\n\031enable_remove_change_lane\030\003 \001(\010:\005fals"
      "e\022#\n\024reckless_change_lane\030\004 \001(\010:\005false\022,"
      "\n\037change_lane_success_freeze_time\030\005 \001(\001:"
      "\0031.5\022\'\n\034change_lane_fail_freeze_time\030\006 \001"
      "(\001:\0011\"\336\002\n LearningModelInferenceTaskConf"
      "ig\022O\n\nmodel_type\030\001 \001(\0162;.apollo.planning"
      ".LearningModelInferenceTaskConfig.ModelT"
      "ype\022\026\n\016cpu_model_file\030\002 \001(\t\022\026\n\016gpu_model"
      "_file\030\003 \001(\t\022\026\n\010use_cuda\030\004 \001(\010:\004true\022\037\n\022t"
      "rajectory_delta_t\030\005 \001(\001:\0030.2\022.\n\037allow_em"
      "pty_learning_based_data\030\006 \001(\010:\005false\022,\n\035"
      "allow_empty_output_trajectory\030\007 \001(\010:\005fal"
      "se\"\"\n\tModelType\022\007\n\003CNN\020\001\022\014\n\010CNN_LSTM\020\002\"^"
      "\n*LearningModelInferenceTrajectoryTaskCo"
      "nfig\0220\n%min_adc_future_trajectory_time_l"
      "ength\030\001 \001(\001:\0012\"\210\003\n\031NaviObstacleDeciderCo"
      "nfig\022\037\n\022min_nudge_distance\030\001 \001(\001:\0030.2\022\037\n"
      "\022max_nudge_distance\030\002 \001(\001:\0031.2\022%\n\025max_al"
      "low_nudge_speed\030\003 \001(\001:\00616.667\022\032\n\rsafe_di"
      "stance\030\004 \001(\001:\0030.2\022#\n\025nudge_allow_toleran"
      "ce\030\005 \001(\001:\0040.05\022\030\n\rcycles_number\030\006 \001(\r:\0013"
      "\022\032\n\017judge_dis_coeff\030\007 \001(\001:\0012\022\033\n\017basis_di"
      "s_value\030\010 \001(\001:\00230\022#\n\026lateral_velocity_va"
      "lue\030\t \001(\001:\0030.5\022%\n\032speed_decider_detect_r"
      "ange\030\n \001(\001:\0011\022\"\n\025max_keep_nudge_cycles\030\013"
      " \001(\r:\003100\"\325\003\n\025NaviPathDeciderConfig\022\032\n\017m"
      "in_path_length\030\001 \001(\001:\0015\022 \n\025min_look_forw"
      "ard_time\030\002 \001(\r:\0012\022#\n\026max_keep_lane_dista"
      "nce\030\003 \001(\001:\0030.8\022!\n\025max_keep_lane_shift_y\030"
      "\004 \001(\001:\00220\022 \n\024min_keep_lane_offset\030\005 \001(\001:"
      "\00215\022*\n\034keep_lane_shift_compensation\030\006 \001("
      "\001:\0040.01\022M\n\033move_dest_lane_config_talbe\030\007"
      " \001(\0132(.apollo.planning.MoveDestLaneConfi"
      "gTable\022)\n\033move_dest_lane_compensation\030\010 "
      "\001(\001:\0040.35\022\036\n\023max_kappa_threshold\030\t \001(\001:\001"
      "0\022,\n!kappa_move_dest_lane_compensation\030\n"
      " \001(\001:\0010\022 \n\025start_plan_point_from\030\013 \001(\r:\001"
      "0\"N\n\027MoveDestLaneConfigTable\0223\n\rlateral_"
      "shift\030\001 \003(\0132\034.apollo.planning.ShiftConfi"
      "g\"O\n\013ShiftConfig\022\027\n\tmax_speed\030\001 \001(\001:\0044.1"
      "6\022\'\n\032max_move_dest_lane_shift_y\030\003 \001(\001:\0030"
      ".4\"\322\004\n\026NaviSpeedDeciderConfig\022\032\n\017preferr"
      "ed_accel\030\001 \001(\001:\0012\022\032\n\017preferred_decel\030\002 \001"
      "(\001:\0012\022\031\n\016preferred_jerk\030\003 \001(\001:\0012\022\024\n\tmax_"
      "accel\030\004 \001(\001:\0014\022\024\n\tmax_decel\030\005 \001(\001:\0015\022\034\n\017"
      "obstacle_buffer\030\006 \001(\001:\0030.5\022\035\n\022safe_dista"
      "nce_base\030\007 \001(\001:\0012\022\036\n\023safe_distance_ratio"
      "\030\010 \001(\001:\0011\022\"\n\025following_accel_ratio\030\t \001(\001"
      ":\0030.5\022%\n\030soft_centric_accel_limit\030\n \001(\001:"
      "\0031.2\022%\n\030hard_centric_accel_limit\030\013 \001(\001:\003"
      "1.5\022\035\n\020hard_speed_limit\030\014 \001(\001:\003100\022\034\n\020ha"
      "rd_accel_limit\030\r \001(\001:\00210\022\036\n\020enable_safe_"
      "path\030\016 \001(\010:\004true\022)\n\033enable_planning_star"
      "t_point\030\017 \001(\010:\004true\022,\n\036enable_accel_auto"
      "_compensation\030\020 \001(\010:\004true\022\030\n\rkappa_previ"
      "ew\030\021 \001(\001:\0010\022\032\n\017kappa_threshold\030\022 \001(\001:\0010\""
      "\035\n\033PathAssessmentDeciderConfig\"\347\002\n\027PathB"
      "oundsDeciderConfig\022\031\n\021is_lane_borrowing\030"
      "\001 \001(\010\022\024\n\014is_pull_over\030\002 \001(\010\022/\n#pull_over"
      "_destination_to_adc_buffer\030\003 \001(\001:\00225\0223\n\'"
      "pull_over_destination_to_pathend_buffer\030"
      "\004 \001(\001:\00210\022(\n\032pull_over_road_edge_buffer\030"
      "\005 \001(\001:\0040.15\022:\n-pull_over_approach_lon_di"
      "stance_adjust_factor\030\006 \001(\001:\0031.5\022\033\n\020adc_b"
      "uffer_coeff\030\007 \001(\001:\0011\0222\n$is_extend_lane_b"
      "ounds_to_include_adc\030\010 \001(\010:\004true\"8\n\021Path"
      "DeciderConfig\022#\n\026static_obstacle_buffer\030"
      "\001 \001(\001:\0030.3\";\n\033PathLaneBorrowDeciderConfi"
      "g\022\034\n\024allow_lane_borrowing\030\001 \001(\010\"h\n\032PathR"
      "eferenceDeciderConfig\022%\n\031min_path_refere"
      "nce_length\030\001 \001(\r:\00220\022#\n\033weight_x_ref_pat"
      "h_reference\030\002 \001(\001\",\n\026PathReuseDeciderCon"
      "fig\022\022\n\nreuse_path\030\001 \001(\010\"\335\002\n*PiecewiseJer"
      "kNonlinearSpeedOptimizerConfig\022\027\n\nacc_we"
      "ight\030\001 \001(\001:\003500\022\030\n\013jerk_weight\030\002 \001(\001:\00310"
      "0\022\033\n\016lat_acc_weight\030\003 \001(\001:\003500\022\036\n\022s_pote"
      "ntial_weight\030\004 \001(\001:\00210\022\030\n\014ref_v_weight\030\005"
      " \001(\001:\00210\022\030\n\014ref_s_weight\030\006 \001(\001:\00210\022\030\n\014en"
      "d_s_weight\030\007 \001(\001:\00210\022\030\n\014end_v_weight\030\010 \001"
      "(\001:\00210\022\030\n\014end_a_weight\030\t \001(\001:\00210\022\037\n\023soft"
      "_s_bound_weight\030\n \001(\001:\00210\022\034\n\016use_warm_st"
      "art\030d \001(\010:\004true\"\332\001\n PiecewiseJerkPathOpt"
      "imizerConfig\022F\n\023default_path_config\030\001 \001("
      "\0132).apollo.planning.PiecewiseJerkPathWei"
      "ghts\022J\n\027lane_change_path_config\030\002 \001(\0132)."
      "apollo.planning.PiecewiseJerkPathWeights"
      "\022\"\n\027path_reference_l_weight\030\003 \001(\001:\0010\"}\n\030"
      "PiecewiseJerkPathWeights\022\023\n\010l_weight\030\001 \001"
      "(\001:\0011\022\026\n\tdl_weight\030\002 \001(\001:\003100\022\030\n\nddl_wei"
      "ght\030\003 \001(\001:\0041000\022\032\n\013dddl_weight\030\004 \001(\001:\00510"
      "000\"\253\001\n!PiecewiseJerkSpeedOptimizerConfi"
      "g\022\025\n\nacc_weight\030\001 \001(\001:\0011\022\027\n\013jerk_weight\030"
      "\002 \001(\001:\00210\022\"\n\024kappa_penalty_weight\030\003 \001(\001:"
      "\0041000\022\030\n\014ref_s_weight\030\004 \001(\001:\00210\022\030\n\014ref_v"
      "_weight\030\005 \001(\001:\00210\"\316\002\n\032RuleBasedStopDecid"
      "erConfig\022\037\n\022max_adc_stop_speed\030\001 \001(\001:\0030."
      "3\022$\n\027max_valid_stop_distance\030\002 \001(\001:\0030.5\022"
      "\035\n\022search_beam_length\030\003 \001(\001:\0015\022*\n\034search"
      "_beam_radius_intensity\030\004 \001(\001:\0040.08\022\032\n\014se"
      "arch_range\030\005 \001(\001:\0043.14\022&\n\030is_block_angle"
      "_threshold\030\006 \001(\001:\0041.57\022-\n!approach_dista"
      "nce_for_lane_change\030\n \001(\001:\00280\022+\n\037urgent_"
      "distance_for_lane_change\030\013 \001(\001:\00250\"\277\002\n\030S"
      "peedBoundsDeciderConfig\022\025\n\ntotal_time\030\001 "
      "\001(\001:\0017\022\034\n\017boundary_buffer\030\002 \001(\001:\0030.1\022)\n\036"
      "max_centric_acceleration_limit\030\003 \001(\001:\0012\022"
      "\034\n\rminimal_kappa\030\004 \001(\001:\0051e-05\022\032\n\017point_e"
      "xtension\030\005 \001(\001:\0011\022\031\n\014lowest_speed\030\006 \001(\001:"
      "\0032.5\022!\n\026collision_safety_range\030\007 \001(\001:\0011\022"
      "$\n\034static_obs_nudge_speed_ratio\030\010 \001(\001\022%\n"
      "\035dynamic_obs_nudge_speed_ratio\030\t \001(\001\"\265\001\n"
      "\035SpeedHeuristicOptimizerConfig\022G\n\024defaul"
      "t_speed_config\030\001 \001(\0132).apollo.planning.D"
      "pStSpeedOptimizerConfig\022K\n\030lane_change_s"
      "peed_config\030\002 \001(\0132).apollo.planning.DpSt"
      "SpeedOptimizerConfig\"\311\006\n\030DpStSpeedOptimi"
      "zerConfig\022\021\n\006unit_t\030\001 \001(\001:\0011\022\035\n\021dense_di"
      "mension_s\030\002 \001(\005:\00241\022\031\n\014dense_unit_s\030\003 \001("
      "\001:\0030.5\022\030\n\rsparse_unit_s\030\004 \001(\001:\0011\022\027\n\014spee"
      "d_weight\030\n \001(\001:\0010\022\030\n\014accel_weight\030\013 \001(\001:"
      "\00210\022\027\n\013jerk_weight\030\014 \001(\001:\00210\022\032\n\017obstacle"
      "_weight\030\r \001(\001:\0011\022\033\n\020reference_weight\030\016 \001"
      "(\001:\0010\022\031\n\016go_down_buffer\030\017 \001(\001:\0015\022\027\n\014go_u"
      "p_buffer\030\020 \001(\001:\0015\022*\n\025default_obstacle_co"
      "st\030\024 \001(\001:\01310000000000\022\035\n\022default_speed_c"
      "ost\030\037 \001(\001:\0011\022 \n\024exceed_speed_penalty\030  \001"
      "(\001:\00210\022\036\n\021low_speed_penalty\030! \001(\001:\0032.5\022\""
      "\n\027reference_speed_penalty\030\" \001(\001:\0011\022(\n\034ke"
      "ep_clear_low_speed_penalty\030# \001(\001:\00210\022\030\n\r"
      "accel_penalty\030( \001(\001:\0012\022\030\n\rdecel_penalty\030"
      ") \001(\001:\0012\022\036\n\023positive_jerk_coeff\0302 \001(\001:\0011"
      "\022 \n\023negative_jerk_coeff\0303 \001(\001:\003300\022\035\n\020ma"
      "x_acceleration\030< \001(\001:\0034.5\022\036\n\020max_deceler"
      "ation\030= \001(\001:\004-4.5\022\033\n\020safe_time_buffer\030F "
      "\001(\001:\0013\022\031\n\rsafe_distance\030G \001(\001:\00220\022$\n\031spa"
      "tial_potential_penalty\030P \001(\001:\0011\022\037\n\020is_la"
      "ne_changing\030Q \001(\010:\005false\".\n\025STBoundsDeci"
      "derConfig\022\025\n\ntotal_time\030\001 \001(\001:\0017"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_task_5fconfig_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* LearningModelInferenceTaskConfig_ModelType_descriptor() {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_task_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool LearningModelInferenceTaskConfig_ModelType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::CNN;
const LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::CNN_LSTM;
const LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::ModelType_MIN;
const LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::ModelType_MAX;
const int LearningModelInferenceTaskConfig::ModelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CreepDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreepDeciderConfig::kStopDistanceFieldNumber;
const int CreepDeciderConfig::kSpeedLimitFieldNumber;
const int CreepDeciderConfig::kMaxValidStopDistanceFieldNumber;
const int CreepDeciderConfig::kMinBoundaryTFieldNumber;
const int CreepDeciderConfig::kIgnoreMaxStMinTFieldNumber;
const int CreepDeciderConfig::kIgnoreMinStMinSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreepDeciderConfig::CreepDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_CreepDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CreepDeciderConfig)
}
CreepDeciderConfig::CreepDeciderConfig(const CreepDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_min_st_min_s_) -
    reinterpret_cast<char*>(&stop_distance_)) + sizeof(ignore_min_st_min_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CreepDeciderConfig)
}

void CreepDeciderConfig::SharedCtor() {
  stop_distance_ = 0.5;
  speed_limit_ = 1;
  max_valid_stop_distance_ = 0.3;
  min_boundary_t_ = 6;
  ignore_max_st_min_t_ = 0.1;
  ignore_min_st_min_s_ = 15;
}

CreepDeciderConfig::~CreepDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CreepDeciderConfig)
  SharedDtor();
}

void CreepDeciderConfig::SharedDtor() {
}

void CreepDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreepDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreepDeciderConfig& CreepDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_CreepDeciderConfig.base);
  return *internal_default_instance();
}


void CreepDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CreepDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    stop_distance_ = 0.5;
    speed_limit_ = 1;
    max_valid_stop_distance_ = 0.3;
    min_boundary_t_ = 6;
    ignore_max_st_min_t_ = 0.1;
    ignore_min_st_min_s_ = 15;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreepDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CreepDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 3 [default = 0.3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_boundary_t = 4 [default = 6];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_boundary_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_boundary_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ignore_max_st_min_t = 5 [default = 0.1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ignore_max_st_min_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ignore_max_st_min_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ignore_min_st_min_s = 6 [default = 15];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ignore_min_st_min_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ignore_min_st_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CreepDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CreepDeciderConfig)
  return false;
#undef DO_
}

void CreepDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CreepDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double speed_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed_limit(), output);
  }

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_valid_stop_distance(), output);
  }

  // optional double min_boundary_t = 4 [default = 6];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_boundary_t(), output);
  }

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ignore_max_st_min_t(), output);
  }

  // optional double ignore_min_st_min_s = 6 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ignore_min_st_min_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CreepDeciderConfig)
}

::google::protobuf::uint8* CreepDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CreepDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double speed_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed_limit(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_valid_stop_distance(), target);
  }

  // optional double min_boundary_t = 4 [default = 6];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_boundary_t(), target);
  }

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ignore_max_st_min_t(), target);
  }

  // optional double ignore_min_st_min_s = 6 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ignore_min_st_min_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CreepDeciderConfig)
  return target;
}

size_t CreepDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CreepDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 2 [default = 1];
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 0.3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_t = 4 [default = 6];
    if (has_min_boundary_t()) {
      total_size += 1 + 8;
    }

    // optional double ignore_max_st_min_t = 5 [default = 0.1];
    if (has_ignore_max_st_min_t()) {
      total_size += 1 + 8;
    }

    // optional double ignore_min_st_min_s = 6 [default = 15];
    if (has_ignore_min_st_min_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreepDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CreepDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CreepDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreepDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CreepDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CreepDeciderConfig)
    MergeFrom(*source);
  }
}

void CreepDeciderConfig::MergeFrom(const CreepDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CreepDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_boundary_t_ = from.min_boundary_t_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_max_st_min_t_ = from.ignore_max_st_min_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignore_min_st_min_s_ = from.ignore_min_st_min_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreepDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CreepDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreepDeciderConfig::CopyFrom(const CreepDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CreepDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreepDeciderConfig::IsInitialized() const {
  return true;
}

void CreepDeciderConfig::Swap(CreepDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreepDeciderConfig::InternalSwap(CreepDeciderConfig* other) {
  using std::swap;
  swap(stop_distance_, other->stop_distance_);
  swap(speed_limit_, other->speed_limit_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_boundary_t_, other->min_boundary_t_);
  swap(ignore_max_st_min_t_, other->ignore_max_st_min_t_);
  swap(ignore_min_st_min_s_, other->ignore_min_st_min_s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreepDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneChangeDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneChangeDeciderConfig::kEnableLaneChangeUrgencyCheckFieldNumber;
const int LaneChangeDeciderConfig::kEnablePrioritizeChangeLaneFieldNumber;
const int LaneChangeDeciderConfig::kEnableRemoveChangeLaneFieldNumber;
const int LaneChangeDeciderConfig::kRecklessChangeLaneFieldNumber;
const int LaneChangeDeciderConfig::kChangeLaneSuccessFreezeTimeFieldNumber;
const int LaneChangeDeciderConfig::kChangeLaneFailFreezeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneChangeDeciderConfig::LaneChangeDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_LaneChangeDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LaneChangeDeciderConfig)
}
LaneChangeDeciderConfig::LaneChangeDeciderConfig(const LaneChangeDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_lane_change_urgency_check_, &from.enable_lane_change_urgency_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_lane_fail_freeze_time_) -
    reinterpret_cast<char*>(&enable_lane_change_urgency_check_)) + sizeof(change_lane_fail_freeze_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LaneChangeDeciderConfig)
}

void LaneChangeDeciderConfig::SharedCtor() {
  ::memset(&enable_lane_change_urgency_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reckless_change_lane_) -
      reinterpret_cast<char*>(&enable_lane_change_urgency_check_)) + sizeof(reckless_change_lane_));
  change_lane_success_freeze_time_ = 1.5;
  change_lane_fail_freeze_time_ = 1;
}

LaneChangeDeciderConfig::~LaneChangeDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LaneChangeDeciderConfig)
  SharedDtor();
}

void LaneChangeDeciderConfig::SharedDtor() {
}

void LaneChangeDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneChangeDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneChangeDeciderConfig& LaneChangeDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_LaneChangeDeciderConfig.base);
  return *internal_default_instance();
}


void LaneChangeDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LaneChangeDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_lane_change_urgency_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reckless_change_lane_) -
      reinterpret_cast<char*>(&enable_lane_change_urgency_check_)) + sizeof(reckless_change_lane_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 48u) {
    change_lane_success_freeze_time_ = 1.5;
    change_lane_fail_freeze_time_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneChangeDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LaneChangeDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_lane_change_urgency_check = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable_lane_change_urgency_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_lane_change_urgency_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_prioritize_change_lane = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_prioritize_change_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_prioritize_change_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_remove_change_lane = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enable_remove_change_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_remove_change_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reckless_change_lane = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reckless_change_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reckless_change_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double change_lane_success_freeze_time = 5 [default = 1.5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_change_lane_success_freeze_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &change_lane_success_freeze_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double change_lane_fail_freeze_time = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_change_lane_fail_freeze_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &change_lane_fail_freeze_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LaneChangeDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LaneChangeDeciderConfig)
  return false;
#undef DO_
}

void LaneChangeDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LaneChangeDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_lane_change_urgency_check = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_lane_change_urgency_check(), output);
  }

  // optional bool enable_prioritize_change_lane = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_prioritize_change_lane(), output);
  }

  // optional bool enable_remove_change_lane = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_remove_change_lane(), output);
  }

  // optional bool reckless_change_lane = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reckless_change_lane(), output);
  }

  // optional double change_lane_success_freeze_time = 5 [default = 1.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->change_lane_success_freeze_time(), output);
  }

  // optional double change_lane_fail_freeze_time = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->change_lane_fail_freeze_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LaneChangeDeciderConfig)
}

::google::protobuf::uint8* LaneChangeDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LaneChangeDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_lane_change_urgency_check = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_lane_change_urgency_check(), target);
  }

  // optional bool enable_prioritize_change_lane = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_prioritize_change_lane(), target);
  }

  // optional bool enable_remove_change_lane = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_remove_change_lane(), target);
  }

  // optional bool reckless_change_lane = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reckless_change_lane(), target);
  }

  // optional double change_lane_success_freeze_time = 5 [default = 1.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->change_lane_success_freeze_time(), target);
  }

  // optional double change_lane_fail_freeze_time = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->change_lane_fail_freeze_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LaneChangeDeciderConfig)
  return target;
}

size_t LaneChangeDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LaneChangeDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool enable_lane_change_urgency_check = 1;
    if (has_enable_lane_change_urgency_check()) {
      total_size += 1 + 1;
    }

    // optional bool enable_prioritize_change_lane = 2 [default = false];
    if (has_enable_prioritize_change_lane()) {
      total_size += 1 + 1;
    }

    // optional bool enable_remove_change_lane = 3 [default = false];
    if (has_enable_remove_change_lane()) {
      total_size += 1 + 1;
    }

    // optional bool reckless_change_lane = 4 [default = false];
    if (has_reckless_change_lane()) {
      total_size += 1 + 1;
    }

    // optional double change_lane_success_freeze_time = 5 [default = 1.5];
    if (has_change_lane_success_freeze_time()) {
      total_size += 1 + 8;
    }

    // optional double change_lane_fail_freeze_time = 6 [default = 1];
    if (has_change_lane_fail_freeze_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneChangeDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LaneChangeDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneChangeDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneChangeDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LaneChangeDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LaneChangeDeciderConfig)
    MergeFrom(*source);
  }
}

void LaneChangeDeciderConfig::MergeFrom(const LaneChangeDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LaneChangeDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      enable_lane_change_urgency_check_ = from.enable_lane_change_urgency_check_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_prioritize_change_lane_ = from.enable_prioritize_change_lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_remove_change_lane_ = from.enable_remove_change_lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      reckless_change_lane_ = from.reckless_change_lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      change_lane_success_freeze_time_ = from.change_lane_success_freeze_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_lane_fail_freeze_time_ = from.change_lane_fail_freeze_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneChangeDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LaneChangeDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneChangeDeciderConfig::CopyFrom(const LaneChangeDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LaneChangeDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneChangeDeciderConfig::IsInitialized() const {
  return true;
}

void LaneChangeDeciderConfig::Swap(LaneChangeDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneChangeDeciderConfig::InternalSwap(LaneChangeDeciderConfig* other) {
  using std::swap;
  swap(enable_lane_change_urgency_check_, other->enable_lane_change_urgency_check_);
  swap(enable_prioritize_change_lane_, other->enable_prioritize_change_lane_);
  swap(enable_remove_change_lane_, other->enable_remove_change_lane_);
  swap(reckless_change_lane_, other->reckless_change_lane_);
  swap(change_lane_success_freeze_time_, other->change_lane_success_freeze_time_);
  swap(change_lane_fail_freeze_time_, other->change_lane_fail_freeze_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneChangeDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningModelInferenceTaskConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningModelInferenceTaskConfig::kModelTypeFieldNumber;
const int LearningModelInferenceTaskConfig::kCpuModelFileFieldNumber;
const int LearningModelInferenceTaskConfig::kGpuModelFileFieldNumber;
const int LearningModelInferenceTaskConfig::kUseCudaFieldNumber;
const int LearningModelInferenceTaskConfig::kTrajectoryDeltaTFieldNumber;
const int LearningModelInferenceTaskConfig::kAllowEmptyLearningBasedDataFieldNumber;
const int LearningModelInferenceTaskConfig::kAllowEmptyOutputTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningModelInferenceTaskConfig::LearningModelInferenceTaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_LearningModelInferenceTaskConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LearningModelInferenceTaskConfig)
}
LearningModelInferenceTaskConfig::LearningModelInferenceTaskConfig(const LearningModelInferenceTaskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cpu_model_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cpu_model_file()) {
    cpu_model_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_model_file_);
  }
  gpu_model_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gpu_model_file()) {
    gpu_model_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_model_file_);
  }
  ::memcpy(&allow_empty_learning_based_data_, &from.allow_empty_learning_based_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_delta_t_) -
    reinterpret_cast<char*>(&allow_empty_learning_based_data_)) + sizeof(trajectory_delta_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningModelInferenceTaskConfig)
}

void LearningModelInferenceTaskConfig::SharedCtor() {
  cpu_model_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpu_model_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&allow_empty_learning_based_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_empty_output_trajectory_) -
      reinterpret_cast<char*>(&allow_empty_learning_based_data_)) + sizeof(allow_empty_output_trajectory_));
  model_type_ = 1;
  use_cuda_ = true;
  trajectory_delta_t_ = 0.2;
}

LearningModelInferenceTaskConfig::~LearningModelInferenceTaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningModelInferenceTaskConfig)
  SharedDtor();
}

void LearningModelInferenceTaskConfig::SharedDtor() {
  cpu_model_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpu_model_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LearningModelInferenceTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LearningModelInferenceTaskConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningModelInferenceTaskConfig& LearningModelInferenceTaskConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_LearningModelInferenceTaskConfig.base);
  return *internal_default_instance();
}


void LearningModelInferenceTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningModelInferenceTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_model_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      gpu_model_file_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&allow_empty_learning_based_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_empty_output_trajectory_) -
      reinterpret_cast<char*>(&allow_empty_learning_based_data_)) + sizeof(allow_empty_output_trajectory_));
  if (cached_has_bits & 112u) {
    model_type_ = 1;
    use_cuda_ = true;
    trajectory_delta_t_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningModelInferenceTaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LearningModelInferenceTaskConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::LearningModelInferenceTaskConfig_ModelType_IsValid(value)) {
            set_model_type(static_cast< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cpu_model_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_model_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cpu_model_file().data(), static_cast<int>(this->cpu_model_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gpu_model_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_model_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gpu_model_file().data(), static_cast<int>(this->gpu_model_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_cuda = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_cuda();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cuda_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trajectory_delta_t = 5 [default = 0.2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_trajectory_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_empty_learning_based_data = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_allow_empty_learning_based_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_empty_learning_based_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_empty_output_trajectory = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_allow_empty_output_trajectory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_empty_output_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LearningModelInferenceTaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LearningModelInferenceTaskConfig)
  return false;
#undef DO_
}

void LearningModelInferenceTaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LearningModelInferenceTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->model_type(), output);
  }

  // optional string cpu_model_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpu_model_file().data(), static_cast<int>(this->cpu_model_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cpu_model_file(), output);
  }

  // optional string gpu_model_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpu_model_file().data(), static_cast<int>(this->gpu_model_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gpu_model_file(), output);
  }

  // optional bool use_cuda = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_cuda(), output);
  }

  // optional double trajectory_delta_t = 5 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->trajectory_delta_t(), output);
  }

  // optional bool allow_empty_learning_based_data = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_empty_learning_based_data(), output);
  }

  // optional bool allow_empty_output_trajectory = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allow_empty_output_trajectory(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LearningModelInferenceTaskConfig)
}

::google::protobuf::uint8* LearningModelInferenceTaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningModelInferenceTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->model_type(), target);
  }

  // optional string cpu_model_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpu_model_file().data(), static_cast<int>(this->cpu_model_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cpu_model_file(), target);
  }

  // optional string gpu_model_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpu_model_file().data(), static_cast<int>(this->gpu_model_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gpu_model_file(), target);
  }

  // optional bool use_cuda = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_cuda(), target);
  }

  // optional double trajectory_delta_t = 5 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->trajectory_delta_t(), target);
  }

  // optional bool allow_empty_learning_based_data = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_empty_learning_based_data(), target);
  }

  // optional bool allow_empty_output_trajectory = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allow_empty_output_trajectory(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningModelInferenceTaskConfig)
  return target;
}

size_t LearningModelInferenceTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningModelInferenceTaskConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string cpu_model_file = 2;
    if (has_cpu_model_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_model_file());
    }

    // optional string gpu_model_file = 3;
    if (has_gpu_model_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_model_file());
    }

    // optional bool allow_empty_learning_based_data = 6 [default = false];
    if (has_allow_empty_learning_based_data()) {
      total_size += 1 + 1;
    }

    // optional bool allow_empty_output_trajectory = 7 [default = false];
    if (has_allow_empty_output_trajectory()) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional bool use_cuda = 4 [default = true];
    if (has_use_cuda()) {
      total_size += 1 + 1;
    }

    // optional double trajectory_delta_t = 5 [default = 0.2];
    if (has_trajectory_delta_t()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningModelInferenceTaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LearningModelInferenceTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningModelInferenceTaskConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningModelInferenceTaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LearningModelInferenceTaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LearningModelInferenceTaskConfig)
    MergeFrom(*source);
  }
}

void LearningModelInferenceTaskConfig::MergeFrom(const LearningModelInferenceTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningModelInferenceTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cpu_model_file();
      cpu_model_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_model_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gpu_model_file();
      gpu_model_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_model_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      allow_empty_learning_based_data_ = from.allow_empty_learning_based_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      allow_empty_output_trajectory_ = from.allow_empty_output_trajectory_;
    }
    if (cached_has_bits & 0x00000010u) {
      model_type_ = from.model_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_cuda_ = from.use_cuda_;
    }
    if (cached_has_bits & 0x00000040u) {
      trajectory_delta_t_ = from.trajectory_delta_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LearningModelInferenceTaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LearningModelInferenceTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningModelInferenceTaskConfig::CopyFrom(const LearningModelInferenceTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningModelInferenceTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningModelInferenceTaskConfig::IsInitialized() const {
  return true;
}

void LearningModelInferenceTaskConfig::Swap(LearningModelInferenceTaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningModelInferenceTaskConfig::InternalSwap(LearningModelInferenceTaskConfig* other) {
  using std::swap;
  cpu_model_file_.Swap(&other->cpu_model_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gpu_model_file_.Swap(&other->gpu_model_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(allow_empty_learning_based_data_, other->allow_empty_learning_based_data_);
  swap(allow_empty_output_trajectory_, other->allow_empty_output_trajectory_);
  swap(model_type_, other->model_type_);
  swap(use_cuda_, other->use_cuda_);
  swap(trajectory_delta_t_, other->trajectory_delta_t_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LearningModelInferenceTaskConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningModelInferenceTrajectoryTaskConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningModelInferenceTrajectoryTaskConfig::kMinAdcFutureTrajectoryTimeLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningModelInferenceTrajectoryTaskConfig::LearningModelInferenceTrajectoryTaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_LearningModelInferenceTrajectoryTaskConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
}
LearningModelInferenceTrajectoryTaskConfig::LearningModelInferenceTrajectoryTaskConfig(const LearningModelInferenceTrajectoryTaskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_adc_future_trajectory_time_length_ = from.min_adc_future_trajectory_time_length_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
}

void LearningModelInferenceTrajectoryTaskConfig::SharedCtor() {
  min_adc_future_trajectory_time_length_ = 2;
}

LearningModelInferenceTrajectoryTaskConfig::~LearningModelInferenceTrajectoryTaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  SharedDtor();
}

void LearningModelInferenceTrajectoryTaskConfig::SharedDtor() {
}

void LearningModelInferenceTrajectoryTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LearningModelInferenceTrajectoryTaskConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningModelInferenceTrajectoryTaskConfig& LearningModelInferenceTrajectoryTaskConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_LearningModelInferenceTrajectoryTaskConfig.base);
  return *internal_default_instance();
}


void LearningModelInferenceTrajectoryTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_adc_future_trajectory_time_length_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningModelInferenceTrajectoryTaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_min_adc_future_trajectory_time_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_adc_future_trajectory_time_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  return false;
#undef DO_
}

void LearningModelInferenceTrajectoryTaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_adc_future_trajectory_time_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
}

::google::protobuf::uint8* LearningModelInferenceTrajectoryTaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_adc_future_trajectory_time_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  return target;
}

size_t LearningModelInferenceTrajectoryTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  if (has_min_adc_future_trajectory_time_length()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningModelInferenceTrajectoryTaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningModelInferenceTrajectoryTaskConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningModelInferenceTrajectoryTaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
    MergeFrom(*source);
  }
}

void LearningModelInferenceTrajectoryTaskConfig::MergeFrom(const LearningModelInferenceTrajectoryTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_adc_future_trajectory_time_length()) {
    set_min_adc_future_trajectory_time_length(from.min_adc_future_trajectory_time_length());
  }
}

void LearningModelInferenceTrajectoryTaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningModelInferenceTrajectoryTaskConfig::CopyFrom(const LearningModelInferenceTrajectoryTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningModelInferenceTrajectoryTaskConfig::IsInitialized() const {
  return true;
}

void LearningModelInferenceTrajectoryTaskConfig::Swap(LearningModelInferenceTrajectoryTaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningModelInferenceTrajectoryTaskConfig::InternalSwap(LearningModelInferenceTrajectoryTaskConfig* other) {
  using std::swap;
  swap(min_adc_future_trajectory_time_length_, other->min_adc_future_trajectory_time_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LearningModelInferenceTrajectoryTaskConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NaviObstacleDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaviObstacleDeciderConfig::kMinNudgeDistanceFieldNumber;
const int NaviObstacleDeciderConfig::kMaxNudgeDistanceFieldNumber;
const int NaviObstacleDeciderConfig::kMaxAllowNudgeSpeedFieldNumber;
const int NaviObstacleDeciderConfig::kSafeDistanceFieldNumber;
const int NaviObstacleDeciderConfig::kNudgeAllowToleranceFieldNumber;
const int NaviObstacleDeciderConfig::kCyclesNumberFieldNumber;
const int NaviObstacleDeciderConfig::kJudgeDisCoeffFieldNumber;
const int NaviObstacleDeciderConfig::kBasisDisValueFieldNumber;
const int NaviObstacleDeciderConfig::kLateralVelocityValueFieldNumber;
const int NaviObstacleDeciderConfig::kSpeedDeciderDetectRangeFieldNumber;
const int NaviObstacleDeciderConfig::kMaxKeepNudgeCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaviObstacleDeciderConfig::NaviObstacleDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_NaviObstacleDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviObstacleDeciderConfig)
}
NaviObstacleDeciderConfig::NaviObstacleDeciderConfig(const NaviObstacleDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_nudge_distance_, &from.min_nudge_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_decider_detect_range_) -
    reinterpret_cast<char*>(&min_nudge_distance_)) + sizeof(speed_decider_detect_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviObstacleDeciderConfig)
}

void NaviObstacleDeciderConfig::SharedCtor() {
  min_nudge_distance_ = 0.2;
  max_nudge_distance_ = 1.2;
  max_allow_nudge_speed_ = 16.667;
  safe_distance_ = 0.2;
  nudge_allow_tolerance_ = 0.05;
  judge_dis_coeff_ = 2;
  basis_dis_value_ = 30;
  cycles_number_ = 3u;
  max_keep_nudge_cycles_ = 100u;
  lateral_velocity_value_ = 0.5;
  speed_decider_detect_range_ = 1;
}

NaviObstacleDeciderConfig::~NaviObstacleDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviObstacleDeciderConfig)
  SharedDtor();
}

void NaviObstacleDeciderConfig::SharedDtor() {
}

void NaviObstacleDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NaviObstacleDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaviObstacleDeciderConfig& NaviObstacleDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_NaviObstacleDeciderConfig.base);
  return *internal_default_instance();
}


void NaviObstacleDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviObstacleDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    min_nudge_distance_ = 0.2;
    max_nudge_distance_ = 1.2;
    max_allow_nudge_speed_ = 16.667;
    safe_distance_ = 0.2;
    nudge_allow_tolerance_ = 0.05;
    judge_dis_coeff_ = 2;
    basis_dis_value_ = 30;
    cycles_number_ = 3u;
  }
  if (cached_has_bits & 1792u) {
    max_keep_nudge_cycles_ = 100u;
    lateral_velocity_value_ = 0.5;
    speed_decider_detect_range_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NaviObstacleDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.NaviObstacleDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_nudge_distance = 1 [default = 0.2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_min_nudge_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_nudge_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_nudge_distance = 2 [default = 1.2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_nudge_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_nudge_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_allow_nudge_speed = 3 [default = 16.667];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_allow_nudge_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_allow_nudge_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance = 4 [default = 0.2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_safe_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double nudge_allow_tolerance = 5 [default = 0.05];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_nudge_allow_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nudge_allow_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cycles_number = 6 [default = 3];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cycles_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cycles_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double judge_dis_coeff = 7 [default = 2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_judge_dis_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &judge_dis_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double basis_dis_value = 8 [default = 30];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_basis_dis_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &basis_dis_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_velocity_value = 9 [default = 0.5];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_lateral_velocity_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_velocity_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_decider_detect_range = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_speed_decider_detect_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_decider_detect_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max_keep_nudge_cycles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_keep_nudge_cycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.NaviObstacleDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.NaviObstacleDeciderConfig)
  return false;
#undef DO_
}

void NaviObstacleDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.NaviObstacleDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_nudge_distance = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_nudge_distance(), output);
  }

  // optional double max_nudge_distance = 2 [default = 1.2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_nudge_distance(), output);
  }

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_allow_nudge_speed(), output);
  }

  // optional double safe_distance = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->safe_distance(), output);
  }

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->nudge_allow_tolerance(), output);
  }

  // optional uint32 cycles_number = 6 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cycles_number(), output);
  }

  // optional double judge_dis_coeff = 7 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->judge_dis_coeff(), output);
  }

  // optional double basis_dis_value = 8 [default = 30];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->basis_dis_value(), output);
  }

  // optional double lateral_velocity_value = 9 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lateral_velocity_value(), output);
  }

  // optional double speed_decider_detect_range = 10 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->speed_decider_detect_range(), output);
  }

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_keep_nudge_cycles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.NaviObstacleDeciderConfig)
}

::google::protobuf::uint8* NaviObstacleDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviObstacleDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_nudge_distance = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_nudge_distance(), target);
  }

  // optional double max_nudge_distance = 2 [default = 1.2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_nudge_distance(), target);
  }

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_allow_nudge_speed(), target);
  }

  // optional double safe_distance = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->safe_distance(), target);
  }

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->nudge_allow_tolerance(), target);
  }

  // optional uint32 cycles_number = 6 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cycles_number(), target);
  }

  // optional double judge_dis_coeff = 7 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->judge_dis_coeff(), target);
  }

  // optional double basis_dis_value = 8 [default = 30];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->basis_dis_value(), target);
  }

  // optional double lateral_velocity_value = 9 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lateral_velocity_value(), target);
  }

  // optional double speed_decider_detect_range = 10 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->speed_decider_detect_range(), target);
  }

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_keep_nudge_cycles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviObstacleDeciderConfig)
  return target;
}

size_t NaviObstacleDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviObstacleDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double min_nudge_distance = 1 [default = 0.2];
    if (has_min_nudge_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_nudge_distance = 2 [default = 1.2];
    if (has_max_nudge_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_allow_nudge_speed = 3 [default = 16.667];
    if (has_max_allow_nudge_speed()) {
      total_size += 1 + 8;
    }

    // optional double safe_distance = 4 [default = 0.2];
    if (has_safe_distance()) {
      total_size += 1 + 8;
    }

    // optional double nudge_allow_tolerance = 5 [default = 0.05];
    if (has_nudge_allow_tolerance()) {
      total_size += 1 + 8;
    }

    // optional double judge_dis_coeff = 7 [default = 2];
    if (has_judge_dis_coeff()) {
      total_size += 1 + 8;
    }

    // optional double basis_dis_value = 8 [default = 30];
    if (has_basis_dis_value()) {
      total_size += 1 + 8;
    }

    // optional uint32 cycles_number = 6 [default = 3];
    if (has_cycles_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cycles_number());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
    if (has_max_keep_nudge_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_keep_nudge_cycles());
    }

    // optional double lateral_velocity_value = 9 [default = 0.5];
    if (has_lateral_velocity_value()) {
      total_size += 1 + 8;
    }

    // optional double speed_decider_detect_range = 10 [default = 1];
    if (has_speed_decider_detect_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaviObstacleDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviObstacleDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviObstacleDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaviObstacleDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviObstacleDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviObstacleDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviObstacleDeciderConfig::MergeFrom(const NaviObstacleDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviObstacleDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_nudge_distance_ = from.min_nudge_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_nudge_distance_ = from.max_nudge_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_allow_nudge_speed_ = from.max_allow_nudge_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      safe_distance_ = from.safe_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      nudge_allow_tolerance_ = from.nudge_allow_tolerance_;
    }
    if (cached_has_bits & 0x00000020u) {
      judge_dis_coeff_ = from.judge_dis_coeff_;
    }
    if (cached_has_bits & 0x00000040u) {
      basis_dis_value_ = from.basis_dis_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      cycles_number_ = from.cycles_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      max_keep_nudge_cycles_ = from.max_keep_nudge_cycles_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_velocity_value_ = from.lateral_velocity_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_decider_detect_range_ = from.speed_decider_detect_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviObstacleDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviObstacleDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviObstacleDeciderConfig::CopyFrom(const NaviObstacleDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviObstacleDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviObstacleDeciderConfig::IsInitialized() const {
  return true;
}

void NaviObstacleDeciderConfig::Swap(NaviObstacleDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaviObstacleDeciderConfig::InternalSwap(NaviObstacleDeciderConfig* other) {
  using std::swap;
  swap(min_nudge_distance_, other->min_nudge_distance_);
  swap(max_nudge_distance_, other->max_nudge_distance_);
  swap(max_allow_nudge_speed_, other->max_allow_nudge_speed_);
  swap(safe_distance_, other->safe_distance_);
  swap(nudge_allow_tolerance_, other->nudge_allow_tolerance_);
  swap(judge_dis_coeff_, other->judge_dis_coeff_);
  swap(basis_dis_value_, other->basis_dis_value_);
  swap(cycles_number_, other->cycles_number_);
  swap(max_keep_nudge_cycles_, other->max_keep_nudge_cycles_);
  swap(lateral_velocity_value_, other->lateral_velocity_value_);
  swap(speed_decider_detect_range_, other->speed_decider_detect_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NaviObstacleDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NaviPathDeciderConfig::InitAsDefaultInstance() {
  ::apollo::planning::_NaviPathDeciderConfig_default_instance_._instance.get_mutable()->move_dest_lane_config_talbe_ = const_cast< ::apollo::planning::MoveDestLaneConfigTable*>(
      ::apollo::planning::MoveDestLaneConfigTable::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaviPathDeciderConfig::kMinPathLengthFieldNumber;
const int NaviPathDeciderConfig::kMinLookForwardTimeFieldNumber;
const int NaviPathDeciderConfig::kMaxKeepLaneDistanceFieldNumber;
const int NaviPathDeciderConfig::kMaxKeepLaneShiftYFieldNumber;
const int NaviPathDeciderConfig::kMinKeepLaneOffsetFieldNumber;
const int NaviPathDeciderConfig::kKeepLaneShiftCompensationFieldNumber;
const int NaviPathDeciderConfig::kMoveDestLaneConfigTalbeFieldNumber;
const int NaviPathDeciderConfig::kMoveDestLaneCompensationFieldNumber;
const int NaviPathDeciderConfig::kMaxKappaThresholdFieldNumber;
const int NaviPathDeciderConfig::kKappaMoveDestLaneCompensationFieldNumber;
const int NaviPathDeciderConfig::kStartPlanPointFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaviPathDeciderConfig::NaviPathDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_NaviPathDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviPathDeciderConfig)
}
NaviPathDeciderConfig::NaviPathDeciderConfig(const NaviPathDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_move_dest_lane_config_talbe()) {
    move_dest_lane_config_talbe_ = new ::apollo::planning::MoveDestLaneConfigTable(*from.move_dest_lane_config_talbe_);
  } else {
    move_dest_lane_config_talbe_ = NULL;
  }
  ::memcpy(&max_kappa_threshold_, &from.max_kappa_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_dest_lane_compensation_) -
    reinterpret_cast<char*>(&max_kappa_threshold_)) + sizeof(move_dest_lane_compensation_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviPathDeciderConfig)
}

void NaviPathDeciderConfig::SharedCtor() {
  ::memset(&move_dest_lane_config_talbe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_plan_point_from_) -
      reinterpret_cast<char*>(&move_dest_lane_config_talbe_)) + sizeof(start_plan_point_from_));
  min_look_forward_time_ = 2u;
  min_path_length_ = 5;
  max_keep_lane_distance_ = 0.8;
  max_keep_lane_shift_y_ = 20;
  min_keep_lane_offset_ = 15;
  keep_lane_shift_compensation_ = 0.01;
  move_dest_lane_compensation_ = 0.35;
}

NaviPathDeciderConfig::~NaviPathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviPathDeciderConfig)
  SharedDtor();
}

void NaviPathDeciderConfig::SharedDtor() {
  if (this != internal_default_instance()) delete move_dest_lane_config_talbe_;
}

void NaviPathDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NaviPathDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaviPathDeciderConfig& NaviPathDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_NaviPathDeciderConfig.base);
  return *internal_default_instance();
}


void NaviPathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviPathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(move_dest_lane_config_talbe_ != NULL);
    move_dest_lane_config_talbe_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&max_kappa_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_plan_point_from_) -
        reinterpret_cast<char*>(&max_kappa_threshold_)) + sizeof(start_plan_point_from_));
    min_look_forward_time_ = 2u;
    min_path_length_ = 5;
    max_keep_lane_distance_ = 0.8;
    max_keep_lane_shift_y_ = 20;
  }
  if (cached_has_bits & 1792u) {
    min_keep_lane_offset_ = 15;
    keep_lane_shift_compensation_ = 0.01;
    move_dest_lane_compensation_ = 0.35;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NaviPathDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.NaviPathDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_path_length = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_min_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_look_forward_time = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_look_forward_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_look_forward_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_keep_lane_distance = 3 [default = 0.8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_keep_lane_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_keep_lane_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_keep_lane_shift_y = 4 [default = 20];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_keep_lane_shift_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_keep_lane_shift_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_keep_lane_offset = 5 [default = 15];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_min_keep_lane_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_keep_lane_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double keep_lane_shift_compensation = 6 [default = 0.01];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_keep_lane_shift_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_lane_shift_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_move_dest_lane_config_talbe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double move_dest_lane_compensation = 8 [default = 0.35];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_move_dest_lane_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &move_dest_lane_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_kappa_threshold = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_max_kappa_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_kappa_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_kappa_move_dest_lane_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_move_dest_lane_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_plan_point_from = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_start_plan_point_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_plan_point_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.NaviPathDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.NaviPathDeciderConfig)
  return false;
#undef DO_
}

void NaviPathDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.NaviPathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_path_length(), output);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_look_forward_time(), output);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_keep_lane_distance(), output);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_keep_lane_shift_y(), output);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_keep_lane_offset(), output);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->keep_lane_shift_compensation(), output);
  }

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_move_dest_lane_config_talbe(), output);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->move_dest_lane_compensation(), output);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_kappa_threshold(), output);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->kappa_move_dest_lane_compensation(), output);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_plan_point_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.NaviPathDeciderConfig)
}

::google::protobuf::uint8* NaviPathDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviPathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_path_length(), target);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_look_forward_time(), target);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_keep_lane_distance(), target);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_keep_lane_shift_y(), target);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_keep_lane_offset(), target);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->keep_lane_shift_compensation(), target);
  }

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_move_dest_lane_config_talbe(), deterministic, target);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->move_dest_lane_compensation(), target);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_kappa_threshold(), target);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->kappa_move_dest_lane_compensation(), target);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->start_plan_point_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviPathDeciderConfig)
  return target;
}

size_t NaviPathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviPathDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
    if (has_move_dest_lane_config_talbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *move_dest_lane_config_talbe_);
    }

    // optional double max_kappa_threshold = 9 [default = 0];
    if (has_max_kappa_threshold()) {
      total_size += 1 + 8;
    }

    // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
    if (has_kappa_move_dest_lane_compensation()) {
      total_size += 1 + 8;
    }

    // optional uint32 start_plan_point_from = 11 [default = 0];
    if (has_start_plan_point_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_plan_point_from());
    }

    // optional uint32 min_look_forward_time = 2 [default = 2];
    if (has_min_look_forward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_look_forward_time());
    }

    // optional double min_path_length = 1 [default = 5];
    if (has_min_path_length()) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_distance = 3 [default = 0.8];
    if (has_max_keep_lane_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_shift_y = 4 [default = 20];
    if (has_max_keep_lane_shift_y()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double min_keep_lane_offset = 5 [default = 15];
    if (has_min_keep_lane_offset()) {
      total_size += 1 + 8;
    }

    // optional double keep_lane_shift_compensation = 6 [default = 0.01];
    if (has_keep_lane_shift_compensation()) {
      total_size += 1 + 8;
    }

    // optional double move_dest_lane_compensation = 8 [default = 0.35];
    if (has_move_dest_lane_compensation()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaviPathDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviPathDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaviPathDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviPathDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviPathDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviPathDeciderConfig::MergeFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_move_dest_lane_config_talbe()->::apollo::planning::MoveDestLaneConfigTable::MergeFrom(from.move_dest_lane_config_talbe());
    }
    if (cached_has_bits & 0x00000002u) {
      max_kappa_threshold_ = from.max_kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_move_dest_lane_compensation_ = from.kappa_move_dest_lane_compensation_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_plan_point_from_ = from.start_plan_point_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_look_forward_time_ = from.min_look_forward_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_path_length_ = from.min_path_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_keep_lane_distance_ = from.max_keep_lane_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_keep_lane_shift_y_ = from.max_keep_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      min_keep_lane_offset_ = from.min_keep_lane_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      keep_lane_shift_compensation_ = from.keep_lane_shift_compensation_;
    }
    if (cached_has_bits & 0x00000400u) {
      move_dest_lane_compensation_ = from.move_dest_lane_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviPathDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviPathDeciderConfig::CopyFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPathDeciderConfig::IsInitialized() const {
  return true;
}

void NaviPathDeciderConfig::Swap(NaviPathDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaviPathDeciderConfig::InternalSwap(NaviPathDeciderConfig* other) {
  using std::swap;
  swap(move_dest_lane_config_talbe_, other->move_dest_lane_config_talbe_);
  swap(max_kappa_threshold_, other->max_kappa_threshold_);
  swap(kappa_move_dest_lane_compensation_, other->kappa_move_dest_lane_compensation_);
  swap(start_plan_point_from_, other->start_plan_point_from_);
  swap(min_look_forward_time_, other->min_look_forward_time_);
  swap(min_path_length_, other->min_path_length_);
  swap(max_keep_lane_distance_, other->max_keep_lane_distance_);
  swap(max_keep_lane_shift_y_, other->max_keep_lane_shift_y_);
  swap(min_keep_lane_offset_, other->min_keep_lane_offset_);
  swap(keep_lane_shift_compensation_, other->keep_lane_shift_compensation_);
  swap(move_dest_lane_compensation_, other->move_dest_lane_compensation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NaviPathDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MoveDestLaneConfigTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveDestLaneConfigTable::kLateralShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveDestLaneConfigTable::MoveDestLaneConfigTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_MoveDestLaneConfigTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MoveDestLaneConfigTable)
}
MoveDestLaneConfigTable::MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lateral_shift_(from.lateral_shift_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MoveDestLaneConfigTable)
}

void MoveDestLaneConfigTable::SharedCtor() {
}

MoveDestLaneConfigTable::~MoveDestLaneConfigTable() {
  // @@protoc_insertion_point(destructor:apollo.planning.MoveDestLaneConfigTable)
  SharedDtor();
}

void MoveDestLaneConfigTable::SharedDtor() {
}

void MoveDestLaneConfigTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MoveDestLaneConfigTable::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MoveDestLaneConfigTable& MoveDestLaneConfigTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_MoveDestLaneConfigTable.base);
  return *internal_default_instance();
}


void MoveDestLaneConfigTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MoveDestLaneConfigTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lateral_shift_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveDestLaneConfigTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.MoveDestLaneConfigTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lateral_shift()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.MoveDestLaneConfigTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.MoveDestLaneConfigTable)
  return false;
#undef DO_
}

void MoveDestLaneConfigTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.MoveDestLaneConfigTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lateral_shift_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lateral_shift(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.MoveDestLaneConfigTable)
}

::google::protobuf::uint8* MoveDestLaneConfigTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MoveDestLaneConfigTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lateral_shift_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lateral_shift(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MoveDestLaneConfigTable)
  return target;
}

size_t MoveDestLaneConfigTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MoveDestLaneConfigTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lateral_shift_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lateral_shift(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDestLaneConfigTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDestLaneConfigTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveDestLaneConfigTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MoveDestLaneConfigTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MoveDestLaneConfigTable)
    MergeFrom(*source);
  }
}

void MoveDestLaneConfigTable::MergeFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lateral_shift_.MergeFrom(from.lateral_shift_);
}

void MoveDestLaneConfigTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDestLaneConfigTable::CopyFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDestLaneConfigTable::IsInitialized() const {
  return true;
}

void MoveDestLaneConfigTable::Swap(MoveDestLaneConfigTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveDestLaneConfigTable::InternalSwap(MoveDestLaneConfigTable* other) {
  using std::swap;
  CastToBase(&lateral_shift_)->InternalSwap(CastToBase(&other->lateral_shift_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MoveDestLaneConfigTable::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShiftConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShiftConfig::kMaxSpeedFieldNumber;
const int ShiftConfig::kMaxMoveDestLaneShiftYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShiftConfig::ShiftConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_ShiftConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ShiftConfig)
}
ShiftConfig::ShiftConfig(const ShiftConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_speed_, &from.max_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_move_dest_lane_shift_y_) -
    reinterpret_cast<char*>(&max_speed_)) + sizeof(max_move_dest_lane_shift_y_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ShiftConfig)
}

void ShiftConfig::SharedCtor() {
  max_speed_ = 4.16;
  max_move_dest_lane_shift_y_ = 0.4;
}

ShiftConfig::~ShiftConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ShiftConfig)
  SharedDtor();
}

void ShiftConfig::SharedDtor() {
}

void ShiftConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShiftConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShiftConfig& ShiftConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_ShiftConfig.base);
  return *internal_default_instance();
}


void ShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    max_speed_ = 4.16;
    max_move_dest_lane_shift_y_ = 0.4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShiftConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ShiftConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_speed = 1 [default = 4.16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_max_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_move_dest_lane_shift_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_move_dest_lane_shift_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ShiftConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ShiftConfig)
  return false;
#undef DO_
}

void ShiftConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_speed(), output);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_move_dest_lane_shift_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ShiftConfig)
}

::google::protobuf::uint8* ShiftConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_speed(), target);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_move_dest_lane_shift_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ShiftConfig)
  return target;
}

size_t ShiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ShiftConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double max_speed = 1 [default = 4.16];
    if (has_max_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
    if (has_max_move_dest_lane_shift_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShiftConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShiftConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShiftConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ShiftConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ShiftConfig)
    MergeFrom(*source);
  }
}

void ShiftConfig::MergeFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_move_dest_lane_shift_y_ = from.max_move_dest_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShiftConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftConfig::CopyFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftConfig::IsInitialized() const {
  return true;
}

void ShiftConfig::Swap(ShiftConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShiftConfig::InternalSwap(ShiftConfig* other) {
  using std::swap;
  swap(max_speed_, other->max_speed_);
  swap(max_move_dest_lane_shift_y_, other->max_move_dest_lane_shift_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShiftConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NaviSpeedDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaviSpeedDeciderConfig::kPreferredAccelFieldNumber;
const int NaviSpeedDeciderConfig::kPreferredDecelFieldNumber;
const int NaviSpeedDeciderConfig::kPreferredJerkFieldNumber;
const int NaviSpeedDeciderConfig::kMaxAccelFieldNumber;
const int NaviSpeedDeciderConfig::kMaxDecelFieldNumber;
const int NaviSpeedDeciderConfig::kObstacleBufferFieldNumber;
const int NaviSpeedDeciderConfig::kSafeDistanceBaseFieldNumber;
const int NaviSpeedDeciderConfig::kSafeDistanceRatioFieldNumber;
const int NaviSpeedDeciderConfig::kFollowingAccelRatioFieldNumber;
const int NaviSpeedDeciderConfig::kSoftCentricAccelLimitFieldNumber;
const int NaviSpeedDeciderConfig::kHardCentricAccelLimitFieldNumber;
const int NaviSpeedDeciderConfig::kHardSpeedLimitFieldNumber;
const int NaviSpeedDeciderConfig::kHardAccelLimitFieldNumber;
const int NaviSpeedDeciderConfig::kEnableSafePathFieldNumber;
const int NaviSpeedDeciderConfig::kEnablePlanningStartPointFieldNumber;
const int NaviSpeedDeciderConfig::kEnableAccelAutoCompensationFieldNumber;
const int NaviSpeedDeciderConfig::kKappaPreviewFieldNumber;
const int NaviSpeedDeciderConfig::kKappaThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaviSpeedDeciderConfig::NaviSpeedDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_NaviSpeedDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviSpeedDeciderConfig)
}
NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kappa_preview_, &from.kappa_preview_,
    static_cast<size_t>(reinterpret_cast<char*>(&hard_accel_limit_) -
    reinterpret_cast<char*>(&kappa_preview_)) + sizeof(hard_accel_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviSpeedDeciderConfig)
}

void NaviSpeedDeciderConfig::SharedCtor() {
  ::memset(&kappa_preview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_threshold_) -
      reinterpret_cast<char*>(&kappa_preview_)) + sizeof(kappa_threshold_));
  enable_safe_path_ = true;
  enable_planning_start_point_ = true;
  enable_accel_auto_compensation_ = true;
  preferred_accel_ = 2;
  preferred_decel_ = 2;
  preferred_jerk_ = 2;
  max_accel_ = 4;
  max_decel_ = 5;
  obstacle_buffer_ = 0.5;
  safe_distance_base_ = 2;
  safe_distance_ratio_ = 1;
  following_accel_ratio_ = 0.5;
  soft_centric_accel_limit_ = 1.2;
  hard_centric_accel_limit_ = 1.5;
  hard_speed_limit_ = 100;
  hard_accel_limit_ = 10;
}

NaviSpeedDeciderConfig::~NaviSpeedDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviSpeedDeciderConfig)
  SharedDtor();
}

void NaviSpeedDeciderConfig::SharedDtor() {
}

void NaviSpeedDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NaviSpeedDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaviSpeedDeciderConfig& NaviSpeedDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_NaviSpeedDeciderConfig.base);
  return *internal_default_instance();
}


void NaviSpeedDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviSpeedDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&kappa_preview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kappa_threshold_) -
        reinterpret_cast<char*>(&kappa_preview_)) + sizeof(kappa_threshold_));
    enable_safe_path_ = true;
    enable_planning_start_point_ = true;
    enable_accel_auto_compensation_ = true;
    preferred_accel_ = 2;
    preferred_decel_ = 2;
    preferred_jerk_ = 2;
  }
  if (cached_has_bits & 65280u) {
    max_accel_ = 4;
    max_decel_ = 5;
    obstacle_buffer_ = 0.5;
    safe_distance_base_ = 2;
    safe_distance_ratio_ = 1;
    following_accel_ratio_ = 0.5;
    soft_centric_accel_limit_ = 1.2;
    hard_centric_accel_limit_ = 1.5;
  }
  if (cached_has_bits & 196608u) {
    hard_speed_limit_ = 100;
    hard_accel_limit_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NaviSpeedDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.NaviSpeedDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double preferred_accel = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_preferred_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_decel = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_preferred_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_jerk = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_preferred_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_accel = 4 [default = 4];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_decel = 5 [default = 5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_max_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_buffer = 6 [default = 0.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_obstacle_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance_base = 7 [default = 2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_safe_distance_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance_ratio = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_safe_distance_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double following_accel_ratio = 9 [default = 0.5];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_following_accel_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_accel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_centric_accel_limit = 10 [default = 1.2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_soft_centric_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_centric_accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hard_centric_accel_limit = 11 [default = 1.5];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_hard_centric_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hard_centric_accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hard_speed_limit = 12 [default = 100];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_hard_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hard_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hard_accel_limit = 13 [default = 10];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_hard_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hard_accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_safe_path = 14 [default = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_enable_safe_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_safe_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_planning_start_point = 15 [default = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_enable_planning_start_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_planning_start_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_accel_auto_compensation = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_enable_accel_auto_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_accel_auto_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_preview = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_kappa_preview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_preview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_threshold = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_kappa_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.NaviSpeedDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.NaviSpeedDeciderConfig)
  return false;
#undef DO_
}

void NaviSpeedDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.NaviSpeedDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->preferred_accel(), output);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->preferred_decel(), output);
  }

  // optional double preferred_jerk = 3 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preferred_jerk(), output);
  }

  // optional double max_accel = 4 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_accel(), output);
  }

  // optional double max_decel = 5 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_decel(), output);
  }

  // optional double obstacle_buffer = 6 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->obstacle_buffer(), output);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->safe_distance_base(), output);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->safe_distance_ratio(), output);
  }

  // optional double following_accel_ratio = 9 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->following_accel_ratio(), output);
  }

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->soft_centric_accel_limit(), output);
  }

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->hard_centric_accel_limit(), output);
  }

  // optional double hard_speed_limit = 12 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->hard_speed_limit(), output);
  }

  // optional double hard_accel_limit = 13 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->hard_accel_limit(), output);
  }

  // optional bool enable_safe_path = 14 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_safe_path(), output);
  }

  // optional bool enable_planning_start_point = 15 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_planning_start_point(), output);
  }

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_accel_auto_compensation(), output);
  }

  // optional double kappa_preview = 17 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->kappa_preview(), output);
  }

  // optional double kappa_threshold = 18 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->kappa_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.NaviSpeedDeciderConfig)
}

::google::protobuf::uint8* NaviSpeedDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviSpeedDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->preferred_accel(), target);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->preferred_decel(), target);
  }

  // optional double preferred_jerk = 3 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preferred_jerk(), target);
  }

  // optional double max_accel = 4 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_accel(), target);
  }

  // optional double max_decel = 5 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_decel(), target);
  }

  // optional double obstacle_buffer = 6 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->obstacle_buffer(), target);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->safe_distance_base(), target);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->safe_distance_ratio(), target);
  }

  // optional double following_accel_ratio = 9 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->following_accel_ratio(), target);
  }

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->soft_centric_accel_limit(), target);
  }

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->hard_centric_accel_limit(), target);
  }

  // optional double hard_speed_limit = 12 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->hard_speed_limit(), target);
  }

  // optional double hard_accel_limit = 13 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->hard_accel_limit(), target);
  }

  // optional bool enable_safe_path = 14 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_safe_path(), target);
  }

  // optional bool enable_planning_start_point = 15 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_planning_start_point(), target);
  }

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_accel_auto_compensation(), target);
  }

  // optional double kappa_preview = 17 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->kappa_preview(), target);
  }

  // optional double kappa_threshold = 18 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->kappa_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviSpeedDeciderConfig)
  return target;
}

size_t NaviSpeedDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviSpeedDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double kappa_preview = 17 [default = 0];
    if (has_kappa_preview()) {
      total_size += 2 + 8;
    }

    // optional double kappa_threshold = 18 [default = 0];
    if (has_kappa_threshold()) {
      total_size += 2 + 8;
    }

    // optional bool enable_safe_path = 14 [default = true];
    if (has_enable_safe_path()) {
      total_size += 1 + 1;
    }

    // optional bool enable_planning_start_point = 15 [default = true];
    if (has_enable_planning_start_point()) {
      total_size += 1 + 1;
    }

    // optional bool enable_accel_auto_compensation = 16 [default = true];
    if (has_enable_accel_auto_compensation()) {
      total_size += 2 + 1;
    }

    // optional double preferred_accel = 1 [default = 2];
    if (has_preferred_accel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 2 [default = 2];
    if (has_preferred_decel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_jerk = 3 [default = 2];
    if (has_preferred_jerk()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double max_accel = 4 [default = 4];
    if (has_max_accel()) {
      total_size += 1 + 8;
    }

    // optional double max_decel = 5 [default = 5];
    if (has_max_decel()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_buffer = 6 [default = 0.5];
    if (has_obstacle_buffer()) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_base = 7 [default = 2];
    if (has_safe_distance_base()) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_ratio = 8 [default = 1];
    if (has_safe_distance_ratio()) {
      total_size += 1 + 8;
    }

    // optional double following_accel_ratio = 9 [default = 0.5];
    if (has_following_accel_ratio()) {
      total_size += 1 + 8;
    }

    // optional double soft_centric_accel_limit = 10 [default = 1.2];
    if (has_soft_centric_accel_limit()) {
      total_size += 1 + 8;
    }

    // optional double hard_centric_accel_limit = 11 [default = 1.5];
    if (has_hard_centric_accel_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double hard_speed_limit = 12 [default = 100];
    if (has_hard_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double hard_accel_limit = 13 [default = 10];
    if (has_hard_accel_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaviSpeedDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviSpeedDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaviSpeedDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviSpeedDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviSpeedDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviSpeedDeciderConfig::MergeFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      kappa_preview_ = from.kappa_preview_;
    }
    if (cached_has_bits & 0x00000002u) {
      kappa_threshold_ = from.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_safe_path_ = from.enable_safe_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_planning_start_point_ = from.enable_planning_start_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_accel_auto_compensation_ = from.enable_accel_auto_compensation_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_accel_ = from.preferred_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      preferred_decel_ = from.preferred_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      preferred_jerk_ = from.preferred_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      max_accel_ = from.max_accel_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_decel_ = from.max_decel_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_buffer_ = from.obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      safe_distance_base_ = from.safe_distance_base_;
    }
    if (cached_has_bits & 0x00001000u) {
      safe_distance_ratio_ = from.safe_distance_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      following_accel_ratio_ = from.following_accel_ratio_;
    }
    if (cached_has_bits & 0x00004000u) {
      soft_centric_accel_limit_ = from.soft_centric_accel_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      hard_centric_accel_limit_ = from.hard_centric_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      hard_speed_limit_ = from.hard_speed_limit_;
    }
    if (cached_has_bits & 0x00020000u) {
      hard_accel_limit_ = from.hard_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviSpeedDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviSpeedDeciderConfig::CopyFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviSpeedDeciderConfig::IsInitialized() const {
  return true;
}

void NaviSpeedDeciderConfig::Swap(NaviSpeedDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaviSpeedDeciderConfig::InternalSwap(NaviSpeedDeciderConfig* other) {
  using std::swap;
  swap(kappa_preview_, other->kappa_preview_);
  swap(kappa_threshold_, other->kappa_threshold_);
  swap(enable_safe_path_, other->enable_safe_path_);
  swap(enable_planning_start_point_, other->enable_planning_start_point_);
  swap(enable_accel_auto_compensation_, other->enable_accel_auto_compensation_);
  swap(preferred_accel_, other->preferred_accel_);
  swap(preferred_decel_, other->preferred_decel_);
  swap(preferred_jerk_, other->preferred_jerk_);
  swap(max_accel_, other->max_accel_);
  swap(max_decel_, other->max_decel_);
  swap(obstacle_buffer_, other->obstacle_buffer_);
  swap(safe_distance_base_, other->safe_distance_base_);
  swap(safe_distance_ratio_, other->safe_distance_ratio_);
  swap(following_accel_ratio_, other->following_accel_ratio_);
  swap(soft_centric_accel_limit_, other->soft_centric_accel_limit_);
  swap(hard_centric_accel_limit_, other->hard_centric_accel_limit_);
  swap(hard_speed_limit_, other->hard_speed_limit_);
  swap(hard_accel_limit_, other->hard_accel_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NaviSpeedDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathAssessmentDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathAssessmentDeciderConfig::PathAssessmentDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PathAssessmentDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathAssessmentDeciderConfig)
}
PathAssessmentDeciderConfig::PathAssessmentDeciderConfig(const PathAssessmentDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathAssessmentDeciderConfig)
}

void PathAssessmentDeciderConfig::SharedCtor() {
}

PathAssessmentDeciderConfig::~PathAssessmentDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathAssessmentDeciderConfig)
  SharedDtor();
}

void PathAssessmentDeciderConfig::SharedDtor() {
}

void PathAssessmentDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathAssessmentDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathAssessmentDeciderConfig& PathAssessmentDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PathAssessmentDeciderConfig.base);
  return *internal_default_instance();
}


void PathAssessmentDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathAssessmentDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathAssessmentDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathAssessmentDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathAssessmentDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathAssessmentDeciderConfig)
  return false;
#undef DO_
}

void PathAssessmentDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathAssessmentDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathAssessmentDeciderConfig)
}

::google::protobuf::uint8* PathAssessmentDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathAssessmentDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathAssessmentDeciderConfig)
  return target;
}

size_t PathAssessmentDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathAssessmentDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathAssessmentDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathAssessmentDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathAssessmentDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathAssessmentDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathAssessmentDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathAssessmentDeciderConfig)
    MergeFrom(*source);
  }
}

void PathAssessmentDeciderConfig::MergeFrom(const PathAssessmentDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathAssessmentDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PathAssessmentDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathAssessmentDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathAssessmentDeciderConfig::CopyFrom(const PathAssessmentDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathAssessmentDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathAssessmentDeciderConfig::IsInitialized() const {
  return true;
}

void PathAssessmentDeciderConfig::Swap(PathAssessmentDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathAssessmentDeciderConfig::InternalSwap(PathAssessmentDeciderConfig* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathAssessmentDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathBoundsDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathBoundsDeciderConfig::kIsLaneBorrowingFieldNumber;
const int PathBoundsDeciderConfig::kIsPullOverFieldNumber;
const int PathBoundsDeciderConfig::kPullOverDestinationToAdcBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverDestinationToPathendBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverRoadEdgeBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverApproachLonDistanceAdjustFactorFieldNumber;
const int PathBoundsDeciderConfig::kAdcBufferCoeffFieldNumber;
const int PathBoundsDeciderConfig::kIsExtendLaneBoundsToIncludeAdcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathBoundsDeciderConfig::PathBoundsDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PathBoundsDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathBoundsDeciderConfig)
}
PathBoundsDeciderConfig::PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_lane_borrowing_, &from.is_lane_borrowing_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_buffer_coeff_) -
    reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(adc_buffer_coeff_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathBoundsDeciderConfig)
}

void PathBoundsDeciderConfig::SharedCtor() {
  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  is_extend_lane_bounds_to_include_adc_ = true;
  pull_over_destination_to_adc_buffer_ = 25;
  pull_over_destination_to_pathend_buffer_ = 10;
  pull_over_road_edge_buffer_ = 0.15;
  pull_over_approach_lon_distance_adjust_factor_ = 1.5;
  adc_buffer_coeff_ = 1;
}

PathBoundsDeciderConfig::~PathBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathBoundsDeciderConfig)
  SharedDtor();
}

void PathBoundsDeciderConfig::SharedDtor() {
}

void PathBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathBoundsDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathBoundsDeciderConfig& PathBoundsDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PathBoundsDeciderConfig.base);
  return *internal_default_instance();
}


void PathBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 252u) {
    is_extend_lane_bounds_to_include_adc_ = true;
    pull_over_destination_to_adc_buffer_ = 25;
    pull_over_destination_to_pathend_buffer_ = 10;
    pull_over_road_edge_buffer_ = 0.15;
    pull_over_approach_lon_distance_adjust_factor_ = 1.5;
    adc_buffer_coeff_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathBoundsDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathBoundsDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_lane_borrowing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_lane_borrowing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lane_borrowing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pull_over = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_pull_over();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pull_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_pull_over_destination_to_adc_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_destination_to_adc_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pull_over_destination_to_pathend_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_destination_to_pathend_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_pull_over_road_edge_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_road_edge_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_pull_over_approach_lon_distance_adjust_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_approach_lon_distance_adjust_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_buffer_coeff = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_adc_buffer_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_buffer_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_extend_lane_bounds_to_include_adc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_extend_lane_bounds_to_include_adc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathBoundsDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathBoundsDeciderConfig)
  return false;
#undef DO_
}

void PathBoundsDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_lane_borrowing(), output);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pull_over(), output);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pull_over_destination_to_adc_buffer(), output);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pull_over_destination_to_pathend_buffer(), output);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pull_over_road_edge_buffer(), output);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pull_over_approach_lon_distance_adjust_factor(), output);
  }

  // optional double adc_buffer_coeff = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->adc_buffer_coeff(), output);
  }

  // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_extend_lane_bounds_to_include_adc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathBoundsDeciderConfig)
}

::google::protobuf::uint8* PathBoundsDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_lane_borrowing(), target);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pull_over(), target);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pull_over_destination_to_adc_buffer(), target);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pull_over_destination_to_pathend_buffer(), target);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pull_over_road_edge_buffer(), target);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pull_over_approach_lon_distance_adjust_factor(), target);
  }

  // optional double adc_buffer_coeff = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->adc_buffer_coeff(), target);
  }

  // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_extend_lane_bounds_to_include_adc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathBoundsDeciderConfig)
  return target;
}

size_t PathBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathBoundsDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_lane_borrowing = 1;
    if (has_is_lane_borrowing()) {
      total_size += 1 + 1;
    }

    // optional bool is_pull_over = 2;
    if (has_is_pull_over()) {
      total_size += 1 + 1;
    }

    // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
    if (has_is_extend_lane_bounds_to_include_adc()) {
      total_size += 1 + 1;
    }

    // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
    if (has_pull_over_destination_to_adc_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
    if (has_pull_over_destination_to_pathend_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
    if (has_pull_over_road_edge_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
    if (has_pull_over_approach_lon_distance_adjust_factor()) {
      total_size += 1 + 8;
    }

    // optional double adc_buffer_coeff = 7 [default = 1];
    if (has_adc_buffer_coeff()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathBoundsDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathBoundsDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathBoundsDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathBoundsDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void PathBoundsDeciderConfig::MergeFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      is_lane_borrowing_ = from.is_lane_borrowing_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pull_over_ = from.is_pull_over_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_extend_lane_bounds_to_include_adc_ = from.is_extend_lane_bounds_to_include_adc_;
    }
    if (cached_has_bits & 0x00000008u) {
      pull_over_destination_to_adc_buffer_ = from.pull_over_destination_to_adc_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      pull_over_destination_to_pathend_buffer_ = from.pull_over_destination_to_pathend_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      pull_over_road_edge_buffer_ = from.pull_over_road_edge_buffer_;
    }
    if (cached_has_bits & 0x00000040u) {
      pull_over_approach_lon_distance_adjust_factor_ = from.pull_over_approach_lon_distance_adjust_factor_;
    }
    if (cached_has_bits & 0x00000080u) {
      adc_buffer_coeff_ = from.adc_buffer_coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathBoundsDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathBoundsDeciderConfig::CopyFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void PathBoundsDeciderConfig::Swap(PathBoundsDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathBoundsDeciderConfig::InternalSwap(PathBoundsDeciderConfig* other) {
  using std::swap;
  swap(is_lane_borrowing_, other->is_lane_borrowing_);
  swap(is_pull_over_, other->is_pull_over_);
  swap(is_extend_lane_bounds_to_include_adc_, other->is_extend_lane_bounds_to_include_adc_);
  swap(pull_over_destination_to_adc_buffer_, other->pull_over_destination_to_adc_buffer_);
  swap(pull_over_destination_to_pathend_buffer_, other->pull_over_destination_to_pathend_buffer_);
  swap(pull_over_road_edge_buffer_, other->pull_over_road_edge_buffer_);
  swap(pull_over_approach_lon_distance_adjust_factor_, other->pull_over_approach_lon_distance_adjust_factor_);
  swap(adc_buffer_coeff_, other->adc_buffer_coeff_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathBoundsDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathDeciderConfig::kStaticObstacleBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathDeciderConfig::PathDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PathDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathDeciderConfig)
}
PathDeciderConfig::PathDeciderConfig(const PathDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  static_obstacle_buffer_ = from.static_obstacle_buffer_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathDeciderConfig)
}

void PathDeciderConfig::SharedCtor() {
  static_obstacle_buffer_ = 0.3;
}

PathDeciderConfig::~PathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathDeciderConfig)
  SharedDtor();
}

void PathDeciderConfig::SharedDtor() {
}

void PathDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathDeciderConfig& PathDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PathDeciderConfig.base);
  return *internal_default_instance();
}


void PathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_obstacle_buffer_ = 0.3;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double static_obstacle_buffer = 1 [default = 0.3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_static_obstacle_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &static_obstacle_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathDeciderConfig)
  return false;
#undef DO_
}

void PathDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double static_obstacle_buffer = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->static_obstacle_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathDeciderConfig)
}

::google::protobuf::uint8* PathDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double static_obstacle_buffer = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->static_obstacle_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathDeciderConfig)
  return target;
}

size_t PathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double static_obstacle_buffer = 1 [default = 0.3];
  if (has_static_obstacle_buffer()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathDeciderConfig)
    MergeFrom(*source);
  }
}

void PathDeciderConfig::MergeFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_static_obstacle_buffer()) {
    set_static_obstacle_buffer(from.static_obstacle_buffer());
  }
}

void PathDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathDeciderConfig::CopyFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathDeciderConfig::IsInitialized() const {
  return true;
}

void PathDeciderConfig::Swap(PathDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathDeciderConfig::InternalSwap(PathDeciderConfig* other) {
  using std::swap;
  swap(static_obstacle_buffer_, other->static_obstacle_buffer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathLaneBorrowDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathLaneBorrowDeciderConfig::kAllowLaneBorrowingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathLaneBorrowDeciderConfig::PathLaneBorrowDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PathLaneBorrowDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathLaneBorrowDeciderConfig)
}
PathLaneBorrowDeciderConfig::PathLaneBorrowDeciderConfig(const PathLaneBorrowDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allow_lane_borrowing_ = from.allow_lane_borrowing_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathLaneBorrowDeciderConfig)
}

void PathLaneBorrowDeciderConfig::SharedCtor() {
  allow_lane_borrowing_ = false;
}

PathLaneBorrowDeciderConfig::~PathLaneBorrowDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathLaneBorrowDeciderConfig)
  SharedDtor();
}

void PathLaneBorrowDeciderConfig::SharedDtor() {
}

void PathLaneBorrowDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathLaneBorrowDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathLaneBorrowDeciderConfig& PathLaneBorrowDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PathLaneBorrowDeciderConfig.base);
  return *internal_default_instance();
}


void PathLaneBorrowDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathLaneBorrowDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_lane_borrowing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathLaneBorrowDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathLaneBorrowDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allow_lane_borrowing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_allow_lane_borrowing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_lane_borrowing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathLaneBorrowDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathLaneBorrowDeciderConfig)
  return false;
#undef DO_
}

void PathLaneBorrowDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathLaneBorrowDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_lane_borrowing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathLaneBorrowDeciderConfig)
}

::google::protobuf::uint8* PathLaneBorrowDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathLaneBorrowDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allow_lane_borrowing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathLaneBorrowDeciderConfig)
  return target;
}

size_t PathLaneBorrowDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathLaneBorrowDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool allow_lane_borrowing = 1;
  if (has_allow_lane_borrowing()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathLaneBorrowDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathLaneBorrowDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathLaneBorrowDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathLaneBorrowDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathLaneBorrowDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathLaneBorrowDeciderConfig)
    MergeFrom(*source);
  }
}

void PathLaneBorrowDeciderConfig::MergeFrom(const PathLaneBorrowDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathLaneBorrowDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_allow_lane_borrowing()) {
    set_allow_lane_borrowing(from.allow_lane_borrowing());
  }
}

void PathLaneBorrowDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathLaneBorrowDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathLaneBorrowDeciderConfig::CopyFrom(const PathLaneBorrowDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathLaneBorrowDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathLaneBorrowDeciderConfig::IsInitialized() const {
  return true;
}

void PathLaneBorrowDeciderConfig::Swap(PathLaneBorrowDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathLaneBorrowDeciderConfig::InternalSwap(PathLaneBorrowDeciderConfig* other) {
  using std::swap;
  swap(allow_lane_borrowing_, other->allow_lane_borrowing_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathLaneBorrowDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathReferenceDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathReferenceDeciderConfig::kMinPathReferenceLengthFieldNumber;
const int PathReferenceDeciderConfig::kWeightXRefPathReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathReferenceDeciderConfig::PathReferenceDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PathReferenceDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathReferenceDeciderConfig)
}
PathReferenceDeciderConfig::PathReferenceDeciderConfig(const PathReferenceDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&weight_x_ref_path_reference_, &from.weight_x_ref_path_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_path_reference_length_) -
    reinterpret_cast<char*>(&weight_x_ref_path_reference_)) + sizeof(min_path_reference_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathReferenceDeciderConfig)
}

void PathReferenceDeciderConfig::SharedCtor() {
  weight_x_ref_path_reference_ = 0;
  min_path_reference_length_ = 20u;
}

PathReferenceDeciderConfig::~PathReferenceDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathReferenceDeciderConfig)
  SharedDtor();
}

void PathReferenceDeciderConfig::SharedDtor() {
}

void PathReferenceDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathReferenceDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathReferenceDeciderConfig& PathReferenceDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PathReferenceDeciderConfig.base);
  return *internal_default_instance();
}


void PathReferenceDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathReferenceDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    weight_x_ref_path_reference_ = 0;
    min_path_reference_length_ = 20u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathReferenceDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathReferenceDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_path_reference_length = 1 [default = 20];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_path_reference_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_path_reference_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_x_ref_path_reference = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_weight_x_ref_path_reference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_x_ref_path_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathReferenceDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathReferenceDeciderConfig)
  return false;
#undef DO_
}

void PathReferenceDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathReferenceDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_path_reference_length = 1 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_path_reference_length(), output);
  }

  // optional double weight_x_ref_path_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_x_ref_path_reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathReferenceDeciderConfig)
}

::google::protobuf::uint8* PathReferenceDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathReferenceDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_path_reference_length = 1 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_path_reference_length(), target);
  }

  // optional double weight_x_ref_path_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_x_ref_path_reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathReferenceDeciderConfig)
  return target;
}

size_t PathReferenceDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathReferenceDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double weight_x_ref_path_reference = 2;
    if (has_weight_x_ref_path_reference()) {
      total_size += 1 + 8;
    }

    // optional uint32 min_path_reference_length = 1 [default = 20];
    if (has_min_path_reference_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_path_reference_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathReferenceDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathReferenceDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathReferenceDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathReferenceDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathReferenceDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathReferenceDeciderConfig)
    MergeFrom(*source);
  }
}

void PathReferenceDeciderConfig::MergeFrom(const PathReferenceDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathReferenceDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      weight_x_ref_path_reference_ = from.weight_x_ref_path_reference_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_path_reference_length_ = from.min_path_reference_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathReferenceDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathReferenceDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathReferenceDeciderConfig::CopyFrom(const PathReferenceDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathReferenceDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathReferenceDeciderConfig::IsInitialized() const {
  return true;
}

void PathReferenceDeciderConfig::Swap(PathReferenceDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathReferenceDeciderConfig::InternalSwap(PathReferenceDeciderConfig* other) {
  using std::swap;
  swap(weight_x_ref_path_reference_, other->weight_x_ref_path_reference_);
  swap(min_path_reference_length_, other->min_path_reference_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathReferenceDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathReuseDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathReuseDeciderConfig::kReusePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathReuseDeciderConfig::PathReuseDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PathReuseDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathReuseDeciderConfig)
}
PathReuseDeciderConfig::PathReuseDeciderConfig(const PathReuseDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reuse_path_ = from.reuse_path_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathReuseDeciderConfig)
}

void PathReuseDeciderConfig::SharedCtor() {
  reuse_path_ = false;
}

PathReuseDeciderConfig::~PathReuseDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathReuseDeciderConfig)
  SharedDtor();
}

void PathReuseDeciderConfig::SharedDtor() {
}

void PathReuseDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathReuseDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathReuseDeciderConfig& PathReuseDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PathReuseDeciderConfig.base);
  return *internal_default_instance();
}


void PathReuseDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathReuseDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reuse_path_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathReuseDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PathReuseDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reuse_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reuse_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PathReuseDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PathReuseDeciderConfig)
  return false;
#undef DO_
}

void PathReuseDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PathReuseDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reuse_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reuse_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PathReuseDeciderConfig)
}

::google::protobuf::uint8* PathReuseDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathReuseDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reuse_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reuse_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathReuseDeciderConfig)
  return target;
}

size_t PathReuseDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathReuseDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool reuse_path = 1;
  if (has_reuse_path()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathReuseDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathReuseDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathReuseDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathReuseDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathReuseDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathReuseDeciderConfig)
    MergeFrom(*source);
  }
}

void PathReuseDeciderConfig::MergeFrom(const PathReuseDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathReuseDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reuse_path()) {
    set_reuse_path(from.reuse_path());
  }
}

void PathReuseDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathReuseDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathReuseDeciderConfig::CopyFrom(const PathReuseDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathReuseDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathReuseDeciderConfig::IsInitialized() const {
  return true;
}

void PathReuseDeciderConfig::Swap(PathReuseDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathReuseDeciderConfig::InternalSwap(PathReuseDeciderConfig* other) {
  using std::swap;
  swap(reuse_path_, other->reuse_path_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathReuseDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkNonlinearSpeedOptimizerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kAccWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kJerkWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kLatAccWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kSPotentialWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kRefVWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kRefSWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kEndSWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kEndVWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kEndAWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kSoftSBoundWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedOptimizerConfig::kUseWarmStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkNonlinearSpeedOptimizerConfig::PiecewiseJerkNonlinearSpeedOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkNonlinearSpeedOptimizerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
}
PiecewiseJerkNonlinearSpeedOptimizerConfig::PiecewiseJerkNonlinearSpeedOptimizerConfig(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_warm_start_, &from.use_warm_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&soft_s_bound_weight_) -
    reinterpret_cast<char*>(&use_warm_start_)) + sizeof(soft_s_bound_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::SharedCtor() {
  use_warm_start_ = true;
  acc_weight_ = 500;
  jerk_weight_ = 100;
  lat_acc_weight_ = 500;
  s_potential_weight_ = 10;
  ref_v_weight_ = 10;
  ref_s_weight_ = 10;
  end_s_weight_ = 10;
  end_v_weight_ = 10;
  end_a_weight_ = 10;
  soft_s_bound_weight_ = 10;
}

PiecewiseJerkNonlinearSpeedOptimizerConfig::~PiecewiseJerkNonlinearSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  SharedDtor();
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::SharedDtor() {
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PiecewiseJerkNonlinearSpeedOptimizerConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkNonlinearSpeedOptimizerConfig& PiecewiseJerkNonlinearSpeedOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkNonlinearSpeedOptimizerConfig.base);
  return *internal_default_instance();
}


void PiecewiseJerkNonlinearSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    use_warm_start_ = true;
    acc_weight_ = 500;
    jerk_weight_ = 100;
    lat_acc_weight_ = 500;
    s_potential_weight_ = 10;
    ref_v_weight_ = 10;
    ref_s_weight_ = 10;
    end_s_weight_ = 10;
  }
  if (cached_has_bits & 1792u) {
    end_v_weight_ = 10;
    end_a_weight_ = 10;
    soft_s_bound_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkNonlinearSpeedOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_weight = 1 [default = 500];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_acc_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 2 [default = 100];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat_acc_weight = 3 [default = 500];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lat_acc_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s_potential_weight = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_s_potential_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_potential_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_v_weight = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ref_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_s_weight = 6 [default = 10];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ref_s_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s_weight = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_end_s_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_v_weight = 8 [default = 10];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_end_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_a_weight = 9 [default = 10];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_end_a_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_a_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_s_bound_weight = 10 [default = 10];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_soft_s_bound_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_s_bound_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_warm_start = 100 [default = true];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_use_warm_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_warm_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  return false;
#undef DO_
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 500];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_weight(), output);
  }

  // optional double jerk_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jerk_weight(), output);
  }

  // optional double lat_acc_weight = 3 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat_acc_weight(), output);
  }

  // optional double s_potential_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->s_potential_weight(), output);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ref_v_weight(), output);
  }

  // optional double ref_s_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ref_s_weight(), output);
  }

  // optional double end_s_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->end_s_weight(), output);
  }

  // optional double end_v_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->end_v_weight(), output);
  }

  // optional double end_a_weight = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->end_a_weight(), output);
  }

  // optional double soft_s_bound_weight = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->soft_s_bound_weight(), output);
  }

  // optional bool use_warm_start = 100 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->use_warm_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
}

::google::protobuf::uint8* PiecewiseJerkNonlinearSpeedOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 500];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jerk_weight(), target);
  }

  // optional double lat_acc_weight = 3 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat_acc_weight(), target);
  }

  // optional double s_potential_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->s_potential_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ref_v_weight(), target);
  }

  // optional double ref_s_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ref_s_weight(), target);
  }

  // optional double end_s_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->end_s_weight(), target);
  }

  // optional double end_v_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->end_v_weight(), target);
  }

  // optional double end_a_weight = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->end_a_weight(), target);
  }

  // optional double soft_s_bound_weight = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->soft_s_bound_weight(), target);
  }

  // optional bool use_warm_start = 100 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->use_warm_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  return target;
}

size_t PiecewiseJerkNonlinearSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool use_warm_start = 100 [default = true];
    if (has_use_warm_start()) {
      total_size += 2 + 1;
    }

    // optional double acc_weight = 1 [default = 500];
    if (has_acc_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 100];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double lat_acc_weight = 3 [default = 500];
    if (has_lat_acc_weight()) {
      total_size += 1 + 8;
    }

    // optional double s_potential_weight = 4 [default = 10];
    if (has_s_potential_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (has_ref_v_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 6 [default = 10];
    if (has_ref_s_weight()) {
      total_size += 1 + 8;
    }

    // optional double end_s_weight = 7 [default = 10];
    if (has_end_s_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double end_v_weight = 8 [default = 10];
    if (has_end_v_weight()) {
      total_size += 1 + 8;
    }

    // optional double end_a_weight = 9 [default = 10];
    if (has_end_a_weight()) {
      total_size += 1 + 8;
    }

    // optional double soft_s_bound_weight = 10 [default = 10];
    if (has_soft_s_bound_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkNonlinearSpeedOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkNonlinearSpeedOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_warm_start_ = from.use_warm_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      lat_acc_weight_ = from.lat_acc_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_potential_weight_ = from.s_potential_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      end_s_weight_ = from.end_s_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      end_v_weight_ = from.end_v_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      end_a_weight_ = from.end_a_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      soft_s_bound_weight_ = from.soft_s_bound_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::CopyFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkNonlinearSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::Swap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkNonlinearSpeedOptimizerConfig::InternalSwap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other) {
  using std::swap;
  swap(use_warm_start_, other->use_warm_start_);
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(lat_acc_weight_, other->lat_acc_weight_);
  swap(s_potential_weight_, other->s_potential_weight_);
  swap(ref_v_weight_, other->ref_v_weight_);
  swap(ref_s_weight_, other->ref_s_weight_);
  swap(end_s_weight_, other->end_s_weight_);
  swap(end_v_weight_, other->end_v_weight_);
  swap(end_a_weight_, other->end_a_weight_);
  swap(soft_s_bound_weight_, other->soft_s_bound_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PiecewiseJerkNonlinearSpeedOptimizerConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkPathOptimizerConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PiecewiseJerkPathOptimizerConfig_default_instance_._instance.get_mutable()->default_path_config_ = const_cast< ::apollo::planning::PiecewiseJerkPathWeights*>(
      ::apollo::planning::PiecewiseJerkPathWeights::internal_default_instance());
  ::apollo::planning::_PiecewiseJerkPathOptimizerConfig_default_instance_._instance.get_mutable()->lane_change_path_config_ = const_cast< ::apollo::planning::PiecewiseJerkPathWeights*>(
      ::apollo::planning::PiecewiseJerkPathWeights::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkPathOptimizerConfig::kDefaultPathConfigFieldNumber;
const int PiecewiseJerkPathOptimizerConfig::kLaneChangePathConfigFieldNumber;
const int PiecewiseJerkPathOptimizerConfig::kPathReferenceLWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkPathOptimizerConfig::PiecewiseJerkPathOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkPathOptimizerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PiecewiseJerkPathOptimizerConfig)
}
PiecewiseJerkPathOptimizerConfig::PiecewiseJerkPathOptimizerConfig(const PiecewiseJerkPathOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_path_config()) {
    default_path_config_ = new ::apollo::planning::PiecewiseJerkPathWeights(*from.default_path_config_);
  } else {
    default_path_config_ = NULL;
  }
  if (from.has_lane_change_path_config()) {
    lane_change_path_config_ = new ::apollo::planning::PiecewiseJerkPathWeights(*from.lane_change_path_config_);
  } else {
    lane_change_path_config_ = NULL;
  }
  path_reference_l_weight_ = from.path_reference_l_weight_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkPathOptimizerConfig)
}

void PiecewiseJerkPathOptimizerConfig::SharedCtor() {
  ::memset(&default_path_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_reference_l_weight_) -
      reinterpret_cast<char*>(&default_path_config_)) + sizeof(path_reference_l_weight_));
}

PiecewiseJerkPathOptimizerConfig::~PiecewiseJerkPathOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  SharedDtor();
}

void PiecewiseJerkPathOptimizerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete default_path_config_;
  if (this != internal_default_instance()) delete lane_change_path_config_;
}

void PiecewiseJerkPathOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PiecewiseJerkPathOptimizerConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkPathOptimizerConfig& PiecewiseJerkPathOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkPathOptimizerConfig.base);
  return *internal_default_instance();
}


void PiecewiseJerkPathOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_path_config_ != NULL);
      default_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_change_path_config_ != NULL);
      lane_change_path_config_->Clear();
    }
  }
  path_reference_l_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkPathOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_reference_l_weight = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_path_reference_l_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_reference_l_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  return false;
#undef DO_
}

void PiecewiseJerkPathOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_default_path_config(), output);
  }

  // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lane_change_path_config(), output);
  }

  // optional double path_reference_l_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->path_reference_l_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PiecewiseJerkPathOptimizerConfig)
}

::google::protobuf::uint8* PiecewiseJerkPathOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_default_path_config(), deterministic, target);
  }

  // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lane_change_path_config(), deterministic, target);
  }

  // optional double path_reference_l_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->path_reference_l_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  return target;
}

size_t PiecewiseJerkPathOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
    if (has_default_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *default_path_config_);
    }

    // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
    if (has_lane_change_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_change_path_config_);
    }

    // optional double path_reference_l_weight = 3 [default = 0];
    if (has_path_reference_l_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecewiseJerkPathOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkPathOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkPathOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PiecewiseJerkPathOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PiecewiseJerkPathOptimizerConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkPathOptimizerConfig::MergeFrom(const PiecewiseJerkPathOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_path_config()->::apollo::planning::PiecewiseJerkPathWeights::MergeFrom(from.default_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_change_path_config()->::apollo::planning::PiecewiseJerkPathWeights::MergeFrom(from.lane_change_path_config());
    }
    if (cached_has_bits & 0x00000004u) {
      path_reference_l_weight_ = from.path_reference_l_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkPathOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkPathOptimizerConfig::CopyFrom(const PiecewiseJerkPathOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathOptimizerConfig::Swap(PiecewiseJerkPathOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkPathOptimizerConfig::InternalSwap(PiecewiseJerkPathOptimizerConfig* other) {
  using std::swap;
  swap(default_path_config_, other->default_path_config_);
  swap(lane_change_path_config_, other->lane_change_path_config_);
  swap(path_reference_l_weight_, other->path_reference_l_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PiecewiseJerkPathOptimizerConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkPathWeights::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkPathWeights::kLWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDdlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDddlWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkPathWeights::PiecewiseJerkPathWeights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkPathWeights.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PiecewiseJerkPathWeights)
}
PiecewiseJerkPathWeights::PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_weight_, &from.l_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&dddl_weight_) -
    reinterpret_cast<char*>(&l_weight_)) + sizeof(dddl_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkPathWeights)
}

void PiecewiseJerkPathWeights::SharedCtor() {
  l_weight_ = 1;
  dl_weight_ = 100;
  ddl_weight_ = 1000;
  dddl_weight_ = 10000;
}

PiecewiseJerkPathWeights::~PiecewiseJerkPathWeights() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkPathWeights)
  SharedDtor();
}

void PiecewiseJerkPathWeights::SharedDtor() {
}

void PiecewiseJerkPathWeights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PiecewiseJerkPathWeights::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkPathWeights& PiecewiseJerkPathWeights::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkPathWeights.base);
  return *internal_default_instance();
}


void PiecewiseJerkPathWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    l_weight_ = 1;
    dl_weight_ = 100;
    ddl_weight_ = 1000;
    dddl_weight_ = 10000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkPathWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PiecewiseJerkPathWeights)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double l_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_l_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl_weight = 2 [default = 100];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_dl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_ddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dddl_weight = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_dddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PiecewiseJerkPathWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PiecewiseJerkPathWeights)
  return false;
#undef DO_
}

void PiecewiseJerkPathWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->l_weight(), output);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dl_weight(), output);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ddl_weight(), output);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dddl_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PiecewiseJerkPathWeights)
}

::google::protobuf::uint8* PiecewiseJerkPathWeights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->l_weight(), target);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dl_weight(), target);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ddl_weight(), target);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dddl_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkPathWeights)
  return target;
}

size_t PiecewiseJerkPathWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkPathWeights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double l_weight = 1 [default = 1];
    if (has_l_weight()) {
      total_size += 1 + 8;
    }

    // optional double dl_weight = 2 [default = 100];
    if (has_dl_weight()) {
      total_size += 1 + 8;
    }

    // optional double ddl_weight = 3 [default = 1000];
    if (has_ddl_weight()) {
      total_size += 1 + 8;
    }

    // optional double dddl_weight = 4 [default = 10000];
    if (has_dddl_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecewiseJerkPathWeights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkPathWeights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkPathWeights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PiecewiseJerkPathWeights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PiecewiseJerkPathWeights)
    MergeFrom(*source);
  }
}

void PiecewiseJerkPathWeights::MergeFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      l_weight_ = from.l_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_weight_ = from.dl_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      ddl_weight_ = from.ddl_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      dddl_weight_ = from.dddl_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkPathWeights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkPathWeights::CopyFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathWeights::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathWeights::Swap(PiecewiseJerkPathWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkPathWeights::InternalSwap(PiecewiseJerkPathWeights* other) {
  using std::swap;
  swap(l_weight_, other->l_weight_);
  swap(dl_weight_, other->dl_weight_);
  swap(ddl_weight_, other->ddl_weight_);
  swap(dddl_weight_, other->dddl_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PiecewiseJerkPathWeights::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkSpeedOptimizerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkSpeedOptimizerConfig::kAccWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kJerkWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kKappaPenaltyWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kRefSWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kRefVWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkSpeedOptimizerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
}
PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_weight_, &from.acc_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_v_weight_) -
    reinterpret_cast<char*>(&acc_weight_)) + sizeof(ref_v_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
}

void PiecewiseJerkSpeedOptimizerConfig::SharedCtor() {
  acc_weight_ = 1;
  jerk_weight_ = 10;
  kappa_penalty_weight_ = 1000;
  ref_s_weight_ = 10;
  ref_v_weight_ = 10;
}

PiecewiseJerkSpeedOptimizerConfig::~PiecewiseJerkSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  SharedDtor();
}

void PiecewiseJerkSpeedOptimizerConfig::SharedDtor() {
}

void PiecewiseJerkSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PiecewiseJerkSpeedOptimizerConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkSpeedOptimizerConfig& PiecewiseJerkSpeedOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_PiecewiseJerkSpeedOptimizerConfig.base);
  return *internal_default_instance();
}


void PiecewiseJerkSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    acc_weight_ = 1;
    jerk_weight_ = 10;
    kappa_penalty_weight_ = 1000;
    ref_s_weight_ = 10;
    ref_v_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkSpeedOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_acc_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_penalty_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_kappa_penalty_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_penalty_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_s_weight = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_ref_s_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_v_weight = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ref_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  return false;
#undef DO_
}

void PiecewiseJerkSpeedOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_weight(), output);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jerk_weight(), output);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kappa_penalty_weight(), output);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ref_s_weight(), output);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ref_v_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
}

::google::protobuf::uint8* PiecewiseJerkSpeedOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jerk_weight(), target);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kappa_penalty_weight(), target);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ref_s_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ref_v_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  return target;
}

size_t PiecewiseJerkSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double acc_weight = 1 [default = 1];
    if (has_acc_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 10];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double kappa_penalty_weight = 3 [default = 1000];
    if (has_kappa_penalty_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 4 [default = 10];
    if (has_ref_s_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (has_ref_v_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkSpeedOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkSpeedOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_penalty_weight_ = from.kappa_penalty_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkSpeedOptimizerConfig::Swap(PiecewiseJerkSpeedOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkSpeedOptimizerConfig::InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other) {
  using std::swap;
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(kappa_penalty_weight_, other->kappa_penalty_weight_);
  swap(ref_s_weight_, other->ref_s_weight_);
  swap(ref_v_weight_, other->ref_v_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PiecewiseJerkSpeedOptimizerConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RuleBasedStopDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleBasedStopDeciderConfig::kMaxAdcStopSpeedFieldNumber;
const int RuleBasedStopDeciderConfig::kMaxValidStopDistanceFieldNumber;
const int RuleBasedStopDeciderConfig::kSearchBeamLengthFieldNumber;
const int RuleBasedStopDeciderConfig::kSearchBeamRadiusIntensityFieldNumber;
const int RuleBasedStopDeciderConfig::kSearchRangeFieldNumber;
const int RuleBasedStopDeciderConfig::kIsBlockAngleThresholdFieldNumber;
const int RuleBasedStopDeciderConfig::kApproachDistanceForLaneChangeFieldNumber;
const int RuleBasedStopDeciderConfig::kUrgentDistanceForLaneChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_RuleBasedStopDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RuleBasedStopDeciderConfig)
}
RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_adc_stop_speed_, &from.max_adc_stop_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&urgent_distance_for_lane_change_) -
    reinterpret_cast<char*>(&max_adc_stop_speed_)) + sizeof(urgent_distance_for_lane_change_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RuleBasedStopDeciderConfig)
}

void RuleBasedStopDeciderConfig::SharedCtor() {
  max_adc_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 0.5;
  search_beam_length_ = 5;
  search_beam_radius_intensity_ = 0.08;
  search_range_ = 3.14;
  is_block_angle_threshold_ = 1.57;
  approach_distance_for_lane_change_ = 80;
  urgent_distance_for_lane_change_ = 50;
}

RuleBasedStopDeciderConfig::~RuleBasedStopDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RuleBasedStopDeciderConfig)
  SharedDtor();
}

void RuleBasedStopDeciderConfig::SharedDtor() {
}

void RuleBasedStopDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RuleBasedStopDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuleBasedStopDeciderConfig& RuleBasedStopDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_RuleBasedStopDeciderConfig.base);
  return *internal_default_instance();
}


void RuleBasedStopDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    max_adc_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 0.5;
    search_beam_length_ = 5;
    search_beam_radius_intensity_ = 0.08;
    search_range_ = 3.14;
    is_block_angle_threshold_ = 1.57;
    approach_distance_for_lane_change_ = 80;
    urgent_distance_for_lane_change_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RuleBasedStopDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RuleBasedStopDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_adc_stop_speed = 1 [default = 0.3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_max_adc_stop_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_adc_stop_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double search_beam_length = 3 [default = 5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_search_beam_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_beam_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double search_beam_radius_intensity = 4 [default = 0.08];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_search_beam_radius_intensity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_beam_radius_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double search_range = 5 [default = 3.14];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_search_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_block_angle_threshold = 6 [default = 1.57];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_is_block_angle_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_block_angle_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double approach_distance_for_lane_change = 10 [default = 80];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_approach_distance_for_lane_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &approach_distance_for_lane_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double urgent_distance_for_lane_change = 11 [default = 50];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_urgent_distance_for_lane_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &urgent_distance_for_lane_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RuleBasedStopDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RuleBasedStopDeciderConfig)
  return false;
#undef DO_
}

void RuleBasedStopDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_adc_stop_speed(), output);
  }

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_valid_stop_distance(), output);
  }

  // optional double search_beam_length = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->search_beam_length(), output);
  }

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->search_beam_radius_intensity(), output);
  }

  // optional double search_range = 5 [default = 3.14];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->search_range(), output);
  }

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->is_block_angle_threshold(), output);
  }

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->approach_distance_for_lane_change(), output);
  }

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->urgent_distance_for_lane_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RuleBasedStopDeciderConfig)
}

::google::protobuf::uint8* RuleBasedStopDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_adc_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_valid_stop_distance(), target);
  }

  // optional double search_beam_length = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->search_beam_length(), target);
  }

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->search_beam_radius_intensity(), target);
  }

  // optional double search_range = 5 [default = 3.14];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->search_range(), target);
  }

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->is_block_angle_threshold(), target);
  }

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->approach_distance_for_lane_change(), target);
  }

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->urgent_distance_for_lane_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RuleBasedStopDeciderConfig)
  return target;
}

size_t RuleBasedStopDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RuleBasedStopDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_adc_stop_speed = 1 [default = 0.3];
    if (has_max_adc_stop_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 0.5];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double search_beam_length = 3 [default = 5];
    if (has_search_beam_length()) {
      total_size += 1 + 8;
    }

    // optional double search_beam_radius_intensity = 4 [default = 0.08];
    if (has_search_beam_radius_intensity()) {
      total_size += 1 + 8;
    }

    // optional double search_range = 5 [default = 3.14];
    if (has_search_range()) {
      total_size += 1 + 8;
    }

    // optional double is_block_angle_threshold = 6 [default = 1.57];
    if (has_is_block_angle_threshold()) {
      total_size += 1 + 8;
    }

    // optional double approach_distance_for_lane_change = 10 [default = 80];
    if (has_approach_distance_for_lane_change()) {
      total_size += 1 + 8;
    }

    // optional double urgent_distance_for_lane_change = 11 [default = 50];
    if (has_urgent_distance_for_lane_change()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleBasedStopDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleBasedStopDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleBasedStopDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RuleBasedStopDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RuleBasedStopDeciderConfig)
    MergeFrom(*source);
  }
}

void RuleBasedStopDeciderConfig::MergeFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_beam_length_ = from.search_beam_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      search_beam_radius_intensity_ = from.search_beam_radius_intensity_;
    }
    if (cached_has_bits & 0x00000010u) {
      search_range_ = from.search_range_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_block_angle_threshold_ = from.is_block_angle_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      approach_distance_for_lane_change_ = from.approach_distance_for_lane_change_;
    }
    if (cached_has_bits & 0x00000080u) {
      urgent_distance_for_lane_change_ = from.urgent_distance_for_lane_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuleBasedStopDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleBasedStopDeciderConfig::CopyFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleBasedStopDeciderConfig::IsInitialized() const {
  return true;
}

void RuleBasedStopDeciderConfig::Swap(RuleBasedStopDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuleBasedStopDeciderConfig::InternalSwap(RuleBasedStopDeciderConfig* other) {
  using std::swap;
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(search_beam_length_, other->search_beam_length_);
  swap(search_beam_radius_intensity_, other->search_beam_radius_intensity_);
  swap(search_range_, other->search_range_);
  swap(is_block_angle_threshold_, other->is_block_angle_threshold_);
  swap(approach_distance_for_lane_change_, other->approach_distance_for_lane_change_);
  swap(urgent_distance_for_lane_change_, other->urgent_distance_for_lane_change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RuleBasedStopDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedBoundsDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedBoundsDeciderConfig::kTotalTimeFieldNumber;
const int SpeedBoundsDeciderConfig::kBoundaryBufferFieldNumber;
const int SpeedBoundsDeciderConfig::kMaxCentricAccelerationLimitFieldNumber;
const int SpeedBoundsDeciderConfig::kMinimalKappaFieldNumber;
const int SpeedBoundsDeciderConfig::kPointExtensionFieldNumber;
const int SpeedBoundsDeciderConfig::kLowestSpeedFieldNumber;
const int SpeedBoundsDeciderConfig::kCollisionSafetyRangeFieldNumber;
const int SpeedBoundsDeciderConfig::kStaticObsNudgeSpeedRatioFieldNumber;
const int SpeedBoundsDeciderConfig::kDynamicObsNudgeSpeedRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_SpeedBoundsDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpeedBoundsDeciderConfig)
}
SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig(const SpeedBoundsDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&static_obs_nudge_speed_ratio_, &from.static_obs_nudge_speed_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_safety_range_) -
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(collision_safety_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpeedBoundsDeciderConfig)
}

void SpeedBoundsDeciderConfig::SharedCtor() {
  ::memset(&static_obs_nudge_speed_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dynamic_obs_nudge_speed_ratio_) -
      reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(dynamic_obs_nudge_speed_ratio_));
  total_time_ = 7;
  boundary_buffer_ = 0.1;
  max_centric_acceleration_limit_ = 2;
  minimal_kappa_ = 1e-05;
  point_extension_ = 1;
  lowest_speed_ = 2.5;
  collision_safety_range_ = 1;
}

SpeedBoundsDeciderConfig::~SpeedBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpeedBoundsDeciderConfig)
  SharedDtor();
}

void SpeedBoundsDeciderConfig::SharedDtor() {
}

void SpeedBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedBoundsDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedBoundsDeciderConfig& SpeedBoundsDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_SpeedBoundsDeciderConfig.base);
  return *internal_default_instance();
}


void SpeedBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&static_obs_nudge_speed_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dynamic_obs_nudge_speed_ratio_) -
        reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(dynamic_obs_nudge_speed_ratio_));
    total_time_ = 7;
    boundary_buffer_ = 0.1;
    max_centric_acceleration_limit_ = 2;
    minimal_kappa_ = 1e-05;
    point_extension_ = 1;
    lowest_speed_ = 2.5;
  }
  collision_safety_range_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedBoundsDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SpeedBoundsDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time = 1 [default = 7];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double boundary_buffer = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_boundary_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &boundary_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_centric_acceleration_limit = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_centric_acceleration_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_centric_acceleration_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimal_kappa = 4 [default = 1e-05];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_minimal_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimal_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double point_extension = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_point_extension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_extension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lowest_speed = 6 [default = 2.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_lowest_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowest_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double collision_safety_range = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_collision_safety_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collision_safety_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double static_obs_nudge_speed_ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_static_obs_nudge_speed_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &static_obs_nudge_speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dynamic_obs_nudge_speed_ratio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_dynamic_obs_nudge_speed_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dynamic_obs_nudge_speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SpeedBoundsDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SpeedBoundsDeciderConfig)
  return false;
#undef DO_
}

void SpeedBoundsDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time(), output);
  }

  // optional double boundary_buffer = 2 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->boundary_buffer(), output);
  }

  // optional double max_centric_acceleration_limit = 3 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_centric_acceleration_limit(), output);
  }

  // optional double minimal_kappa = 4 [default = 1e-05];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minimal_kappa(), output);
  }

  // optional double point_extension = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->point_extension(), output);
  }

  // optional double lowest_speed = 6 [default = 2.5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lowest_speed(), output);
  }

  // optional double collision_safety_range = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->collision_safety_range(), output);
  }

  // optional double static_obs_nudge_speed_ratio = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->static_obs_nudge_speed_ratio(), output);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dynamic_obs_nudge_speed_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SpeedBoundsDeciderConfig)
}

::google::protobuf::uint8* SpeedBoundsDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time(), target);
  }

  // optional double boundary_buffer = 2 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->boundary_buffer(), target);
  }

  // optional double max_centric_acceleration_limit = 3 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_centric_acceleration_limit(), target);
  }

  // optional double minimal_kappa = 4 [default = 1e-05];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minimal_kappa(), target);
  }

  // optional double point_extension = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->point_extension(), target);
  }

  // optional double lowest_speed = 6 [default = 2.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lowest_speed(), target);
  }

  // optional double collision_safety_range = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->collision_safety_range(), target);
  }

  // optional double static_obs_nudge_speed_ratio = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->static_obs_nudge_speed_ratio(), target);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dynamic_obs_nudge_speed_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpeedBoundsDeciderConfig)
  return target;
}

size_t SpeedBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpeedBoundsDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double static_obs_nudge_speed_ratio = 8;
    if (has_static_obs_nudge_speed_ratio()) {
      total_size += 1 + 8;
    }

    // optional double dynamic_obs_nudge_speed_ratio = 9;
    if (has_dynamic_obs_nudge_speed_ratio()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 1 [default = 7];
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional double boundary_buffer = 2 [default = 0.1];
    if (has_boundary_buffer()) {
      total_size += 1 + 8;
    }

    // optional double max_centric_acceleration_limit = 3 [default = 2];
    if (has_max_centric_acceleration_limit()) {
      total_size += 1 + 8;
    }

    // optional double minimal_kappa = 4 [default = 1e-05];
    if (has_minimal_kappa()) {
      total_size += 1 + 8;
    }

    // optional double point_extension = 5 [default = 1];
    if (has_point_extension()) {
      total_size += 1 + 8;
    }

    // optional double lowest_speed = 6 [default = 2.5];
    if (has_lowest_speed()) {
      total_size += 1 + 8;
    }

  }
  // optional double collision_safety_range = 7 [default = 1];
  if (has_collision_safety_range()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBoundsDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBoundsDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedBoundsDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpeedBoundsDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpeedBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void SpeedBoundsDeciderConfig::MergeFrom(const SpeedBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      static_obs_nudge_speed_ratio_ = from.static_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      dynamic_obs_nudge_speed_ratio_ = from.dynamic_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_buffer_ = from.boundary_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_centric_acceleration_limit_ = from.max_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      minimal_kappa_ = from.minimal_kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      point_extension_ = from.point_extension_;
    }
    if (cached_has_bits & 0x00000080u) {
      lowest_speed_ = from.lowest_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_collision_safety_range(from.collision_safety_range());
  }
}

void SpeedBoundsDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBoundsDeciderConfig::CopyFrom(const SpeedBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void SpeedBoundsDeciderConfig::Swap(SpeedBoundsDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedBoundsDeciderConfig::InternalSwap(SpeedBoundsDeciderConfig* other) {
  using std::swap;
  swap(static_obs_nudge_speed_ratio_, other->static_obs_nudge_speed_ratio_);
  swap(dynamic_obs_nudge_speed_ratio_, other->dynamic_obs_nudge_speed_ratio_);
  swap(total_time_, other->total_time_);
  swap(boundary_buffer_, other->boundary_buffer_);
  swap(max_centric_acceleration_limit_, other->max_centric_acceleration_limit_);
  swap(minimal_kappa_, other->minimal_kappa_);
  swap(point_extension_, other->point_extension_);
  swap(lowest_speed_, other->lowest_speed_);
  swap(collision_safety_range_, other->collision_safety_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedBoundsDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedHeuristicOptimizerConfig::InitAsDefaultInstance() {
  ::apollo::planning::_SpeedHeuristicOptimizerConfig_default_instance_._instance.get_mutable()->default_speed_config_ = const_cast< ::apollo::planning::DpStSpeedOptimizerConfig*>(
      ::apollo::planning::DpStSpeedOptimizerConfig::internal_default_instance());
  ::apollo::planning::_SpeedHeuristicOptimizerConfig_default_instance_._instance.get_mutable()->lane_change_speed_config_ = const_cast< ::apollo::planning::DpStSpeedOptimizerConfig*>(
      ::apollo::planning::DpStSpeedOptimizerConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedHeuristicOptimizerConfig::kDefaultSpeedConfigFieldNumber;
const int SpeedHeuristicOptimizerConfig::kLaneChangeSpeedConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedHeuristicOptimizerConfig::SpeedHeuristicOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_SpeedHeuristicOptimizerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpeedHeuristicOptimizerConfig)
}
SpeedHeuristicOptimizerConfig::SpeedHeuristicOptimizerConfig(const SpeedHeuristicOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_speed_config()) {
    default_speed_config_ = new ::apollo::planning::DpStSpeedOptimizerConfig(*from.default_speed_config_);
  } else {
    default_speed_config_ = NULL;
  }
  if (from.has_lane_change_speed_config()) {
    lane_change_speed_config_ = new ::apollo::planning::DpStSpeedOptimizerConfig(*from.lane_change_speed_config_);
  } else {
    lane_change_speed_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpeedHeuristicOptimizerConfig)
}

void SpeedHeuristicOptimizerConfig::SharedCtor() {
  ::memset(&default_speed_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_change_speed_config_) -
      reinterpret_cast<char*>(&default_speed_config_)) + sizeof(lane_change_speed_config_));
}

SpeedHeuristicOptimizerConfig::~SpeedHeuristicOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpeedHeuristicOptimizerConfig)
  SharedDtor();
}

void SpeedHeuristicOptimizerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete default_speed_config_;
  if (this != internal_default_instance()) delete lane_change_speed_config_;
}

void SpeedHeuristicOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedHeuristicOptimizerConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedHeuristicOptimizerConfig& SpeedHeuristicOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_SpeedHeuristicOptimizerConfig.base);
  return *internal_default_instance();
}


void SpeedHeuristicOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_speed_config_ != NULL);
      default_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_change_speed_config_ != NULL);
      lane_change_speed_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedHeuristicOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.SpeedHeuristicOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.SpeedHeuristicOptimizerConfig)
  return false;
#undef DO_
}

void SpeedHeuristicOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_default_speed_config(), output);
  }

  // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lane_change_speed_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.SpeedHeuristicOptimizerConfig)
}

::google::protobuf::uint8* SpeedHeuristicOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_default_speed_config(), deterministic, target);
  }

  // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lane_change_speed_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpeedHeuristicOptimizerConfig)
  return target;
}

size_t SpeedHeuristicOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
    if (has_default_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *default_speed_config_);
    }

    // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
    if (has_lane_change_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_change_speed_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedHeuristicOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedHeuristicOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedHeuristicOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpeedHeuristicOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpeedHeuristicOptimizerConfig)
    MergeFrom(*source);
  }
}

void SpeedHeuristicOptimizerConfig::MergeFrom(const SpeedHeuristicOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_speed_config()->::apollo::planning::DpStSpeedOptimizerConfig::MergeFrom(from.default_speed_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_change_speed_config()->::apollo::planning::DpStSpeedOptimizerConfig::MergeFrom(from.lane_change_speed_config());
    }
  }
}

void SpeedHeuristicOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedHeuristicOptimizerConfig::CopyFrom(const SpeedHeuristicOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedHeuristicOptimizerConfig::IsInitialized() const {
  return true;
}

void SpeedHeuristicOptimizerConfig::Swap(SpeedHeuristicOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedHeuristicOptimizerConfig::InternalSwap(SpeedHeuristicOptimizerConfig* other) {
  using std::swap;
  swap(default_speed_config_, other->default_speed_config_);
  swap(lane_change_speed_config_, other->lane_change_speed_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedHeuristicOptimizerConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DpStSpeedOptimizerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpStSpeedOptimizerConfig::kUnitTFieldNumber;
const int DpStSpeedOptimizerConfig::kDenseDimensionSFieldNumber;
const int DpStSpeedOptimizerConfig::kDenseUnitSFieldNumber;
const int DpStSpeedOptimizerConfig::kSparseUnitSFieldNumber;
const int DpStSpeedOptimizerConfig::kSpeedWeightFieldNumber;
const int DpStSpeedOptimizerConfig::kAccelWeightFieldNumber;
const int DpStSpeedOptimizerConfig::kJerkWeightFieldNumber;
const int DpStSpeedOptimizerConfig::kObstacleWeightFieldNumber;
const int DpStSpeedOptimizerConfig::kReferenceWeightFieldNumber;
const int DpStSpeedOptimizerConfig::kGoDownBufferFieldNumber;
const int DpStSpeedOptimizerConfig::kGoUpBufferFieldNumber;
const int DpStSpeedOptimizerConfig::kDefaultObstacleCostFieldNumber;
const int DpStSpeedOptimizerConfig::kDefaultSpeedCostFieldNumber;
const int DpStSpeedOptimizerConfig::kExceedSpeedPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kLowSpeedPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kReferenceSpeedPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kKeepClearLowSpeedPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kAccelPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kDecelPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kPositiveJerkCoeffFieldNumber;
const int DpStSpeedOptimizerConfig::kNegativeJerkCoeffFieldNumber;
const int DpStSpeedOptimizerConfig::kMaxAccelerationFieldNumber;
const int DpStSpeedOptimizerConfig::kMaxDecelerationFieldNumber;
const int DpStSpeedOptimizerConfig::kSafeTimeBufferFieldNumber;
const int DpStSpeedOptimizerConfig::kSafeDistanceFieldNumber;
const int DpStSpeedOptimizerConfig::kSpatialPotentialPenaltyFieldNumber;
const int DpStSpeedOptimizerConfig::kIsLaneChangingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpStSpeedOptimizerConfig::DpStSpeedOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_DpStSpeedOptimizerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DpStSpeedOptimizerConfig)
}
DpStSpeedOptimizerConfig::DpStSpeedOptimizerConfig(const DpStSpeedOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_weight_, &from.speed_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&spatial_potential_penalty_) -
    reinterpret_cast<char*>(&speed_weight_)) + sizeof(spatial_potential_penalty_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpStSpeedOptimizerConfig)
}

void DpStSpeedOptimizerConfig::SharedCtor() {
  ::memset(&speed_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_lane_changing_) -
      reinterpret_cast<char*>(&speed_weight_)) + sizeof(is_lane_changing_));
  dense_dimension_s_ = 41;
  unit_t_ = 1;
  dense_unit_s_ = 0.5;
  sparse_unit_s_ = 1;
  accel_weight_ = 10;
  jerk_weight_ = 10;
  obstacle_weight_ = 1;
  go_down_buffer_ = 5;
  go_up_buffer_ = 5;
  default_obstacle_cost_ = 10000000000;
  default_speed_cost_ = 1;
  exceed_speed_penalty_ = 10;
  low_speed_penalty_ = 2.5;
  reference_speed_penalty_ = 1;
  keep_clear_low_speed_penalty_ = 10;
  accel_penalty_ = 2;
  decel_penalty_ = 2;
  positive_jerk_coeff_ = 1;
  negative_jerk_coeff_ = 300;
  max_acceleration_ = 4.5;
  max_deceleration_ = -4.5;
  safe_time_buffer_ = 3;
  safe_distance_ = 20;
  spatial_potential_penalty_ = 1;
}

DpStSpeedOptimizerConfig::~DpStSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpStSpeedOptimizerConfig)
  SharedDtor();
}

void DpStSpeedOptimizerConfig::SharedDtor() {
}

void DpStSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DpStSpeedOptimizerConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpStSpeedOptimizerConfig& DpStSpeedOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_DpStSpeedOptimizerConfig.base);
  return *internal_default_instance();
}


void DpStSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpStSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_lane_changing_) -
        reinterpret_cast<char*>(&speed_weight_)) + sizeof(is_lane_changing_));
    dense_dimension_s_ = 41;
    unit_t_ = 1;
    dense_unit_s_ = 0.5;
    sparse_unit_s_ = 1;
    accel_weight_ = 10;
  }
  if (cached_has_bits & 65280u) {
    jerk_weight_ = 10;
    obstacle_weight_ = 1;
    go_down_buffer_ = 5;
    go_up_buffer_ = 5;
    default_obstacle_cost_ = 10000000000;
    default_speed_cost_ = 1;
    exceed_speed_penalty_ = 10;
    low_speed_penalty_ = 2.5;
  }
  if (cached_has_bits & 16711680u) {
    reference_speed_penalty_ = 1;
    keep_clear_low_speed_penalty_ = 10;
    accel_penalty_ = 2;
    decel_penalty_ = 2;
    positive_jerk_coeff_ = 1;
    negative_jerk_coeff_ = 300;
    max_acceleration_ = 4.5;
    max_deceleration_ = -4.5;
  }
  if (cached_has_bits & 117440512u) {
    safe_time_buffer_ = 3;
    safe_distance_ = 20;
    spatial_potential_penalty_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpStSpeedOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DpStSpeedOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double unit_t = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_unit_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unit_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dense_dimension_s = 2 [default = 41];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dense_dimension_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dense_dimension_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dense_unit_s = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_dense_unit_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dense_unit_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sparse_unit_s = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_sparse_unit_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sparse_unit_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_weight = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_speed_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_weight = 11 [default = 10];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_accel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 12 [default = 10];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_weight = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_reference_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double go_down_buffer = 15 [default = 5];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_go_down_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_down_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double go_up_buffer = 16 [default = 5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_go_up_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_up_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_obstacle_cost = 20 [default = 10000000000];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_default_obstacle_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_obstacle_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_speed_cost = 31 [default = 1];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_default_speed_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exceed_speed_penalty = 32 [default = 10];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_exceed_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exceed_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_speed_penalty = 33 [default = 2.5];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_low_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_speed_penalty = 34 [default = 1];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_reference_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double keep_clear_low_speed_penalty = 35 [default = 10];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {
          set_has_keep_clear_low_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_clear_low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_penalty = 40 [default = 2];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          set_has_accel_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double decel_penalty = 41 [default = 2];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {
          set_has_decel_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double positive_jerk_coeff = 50 [default = 1];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 401 & 0xFF */)) {
          set_has_positive_jerk_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positive_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double negative_jerk_coeff = 51 [default = 300];
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 409 & 0xFF */)) {
          set_has_negative_jerk_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &negative_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 60 [default = 4.5];
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 481 & 0xFF */)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 61 [default = -4.5];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 489 & 0xFF */)) {
          set_has_max_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_time_buffer = 70 [default = 3];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 561 & 0xFF */)) {
          set_has_safe_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance = 71 [default = 20];
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 569 & 0xFF */)) {
          set_has_safe_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double spatial_potential_penalty = 80 [default = 1];
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 641 & 0xFF */)) {
          set_has_spatial_potential_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spatial_potential_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_lane_changing = 81 [default = false];
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {
          set_has_is_lane_changing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lane_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DpStSpeedOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DpStSpeedOptimizerConfig)
  return false;
#undef DO_
}

void DpStSpeedOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DpStSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double unit_t = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->unit_t(), output);
  }

  // optional int32 dense_dimension_s = 2 [default = 41];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dense_dimension_s(), output);
  }

  // optional double dense_unit_s = 3 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dense_unit_s(), output);
  }

  // optional double sparse_unit_s = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sparse_unit_s(), output);
  }

  // optional double speed_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->speed_weight(), output);
  }

  // optional double accel_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->accel_weight(), output);
  }

  // optional double jerk_weight = 12 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 13 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->obstacle_weight(), output);
  }

  // optional double reference_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->reference_weight(), output);
  }

  // optional double go_down_buffer = 15 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->go_down_buffer(), output);
  }

  // optional double go_up_buffer = 16 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->go_up_buffer(), output);
  }

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->default_obstacle_cost(), output);
  }

  // optional double default_speed_cost = 31 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->default_speed_cost(), output);
  }

  // optional double exceed_speed_penalty = 32 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->exceed_speed_penalty(), output);
  }

  // optional double low_speed_penalty = 33 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->low_speed_penalty(), output);
  }

  // optional double reference_speed_penalty = 34 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->reference_speed_penalty(), output);
  }

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->keep_clear_low_speed_penalty(), output);
  }

  // optional double accel_penalty = 40 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->accel_penalty(), output);
  }

  // optional double decel_penalty = 41 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->decel_penalty(), output);
  }

  // optional double positive_jerk_coeff = 50 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->positive_jerk_coeff(), output);
  }

  // optional double negative_jerk_coeff = 51 [default = 300];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->negative_jerk_coeff(), output);
  }

  // optional double max_acceleration = 60 [default = 4.5];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 61 [default = -4.5];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->max_deceleration(), output);
  }

  // optional double safe_time_buffer = 70 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(70, this->safe_time_buffer(), output);
  }

  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(71, this->safe_distance(), output);
  }

  // optional double spatial_potential_penalty = 80 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(80, this->spatial_potential_penalty(), output);
  }

  // optional bool is_lane_changing = 81 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->is_lane_changing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DpStSpeedOptimizerConfig)
}

::google::protobuf::uint8* DpStSpeedOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpStSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double unit_t = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->unit_t(), target);
  }

  // optional int32 dense_dimension_s = 2 [default = 41];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dense_dimension_s(), target);
  }

  // optional double dense_unit_s = 3 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dense_unit_s(), target);
  }

  // optional double sparse_unit_s = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sparse_unit_s(), target);
  }

  // optional double speed_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->speed_weight(), target);
  }

  // optional double accel_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->accel_weight(), target);
  }

  // optional double jerk_weight = 12 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 13 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->obstacle_weight(), target);
  }

  // optional double reference_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->reference_weight(), target);
  }

  // optional double go_down_buffer = 15 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->go_down_buffer(), target);
  }

  // optional double go_up_buffer = 16 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 31 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 32 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 33 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->low_speed_penalty(), target);
  }

  // optional double reference_speed_penalty = 34 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->reference_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 40 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->accel_penalty(), target);
  }

  // optional double decel_penalty = 41 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 50 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 51 [default = 300];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 60 [default = 4.5];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 61 [default = -4.5];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->max_deceleration(), target);
  }

  // optional double safe_time_buffer = 70 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(70, this->safe_time_buffer(), target);
  }

  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(71, this->safe_distance(), target);
  }

  // optional double spatial_potential_penalty = 80 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(80, this->spatial_potential_penalty(), target);
  }

  // optional bool is_lane_changing = 81 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->is_lane_changing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpStSpeedOptimizerConfig)
  return target;
}

size_t DpStSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpStSpeedOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double speed_weight = 10 [default = 0];
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

    // optional double reference_weight = 14 [default = 0];
    if (has_reference_weight()) {
      total_size += 1 + 8;
    }

    // optional bool is_lane_changing = 81 [default = false];
    if (has_is_lane_changing()) {
      total_size += 2 + 1;
    }

    // optional int32 dense_dimension_s = 2 [default = 41];
    if (has_dense_dimension_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dense_dimension_s());
    }

    // optional double unit_t = 1 [default = 1];
    if (has_unit_t()) {
      total_size += 1 + 8;
    }

    // optional double dense_unit_s = 3 [default = 0.5];
    if (has_dense_unit_s()) {
      total_size += 1 + 8;
    }

    // optional double sparse_unit_s = 4 [default = 1];
    if (has_sparse_unit_s()) {
      total_size += 1 + 8;
    }

    // optional double accel_weight = 11 [default = 10];
    if (has_accel_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double jerk_weight = 12 [default = 10];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 13 [default = 1];
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 15 [default = 5];
    if (has_go_down_buffer()) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 16 [default = 5];
    if (has_go_up_buffer()) {
      total_size += 2 + 8;
    }

    // optional double default_obstacle_cost = 20 [default = 10000000000];
    if (has_default_obstacle_cost()) {
      total_size += 2 + 8;
    }

    // optional double default_speed_cost = 31 [default = 1];
    if (has_default_speed_cost()) {
      total_size += 2 + 8;
    }

    // optional double exceed_speed_penalty = 32 [default = 10];
    if (has_exceed_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double low_speed_penalty = 33 [default = 2.5];
    if (has_low_speed_penalty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double reference_speed_penalty = 34 [default = 1];
    if (has_reference_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double keep_clear_low_speed_penalty = 35 [default = 10];
    if (has_keep_clear_low_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double accel_penalty = 40 [default = 2];
    if (has_accel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 41 [default = 2];
    if (has_decel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 50 [default = 1];
    if (has_positive_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 51 [default = 300];
    if (has_negative_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 60 [default = 4.5];
    if (has_max_acceleration()) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 61 [default = -4.5];
    if (has_max_deceleration()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional double safe_time_buffer = 70 [default = 3];
    if (has_safe_time_buffer()) {
      total_size += 2 + 8;
    }

    // optional double safe_distance = 71 [default = 20];
    if (has_safe_distance()) {
      total_size += 2 + 8;
    }

    // optional double spatial_potential_penalty = 80 [default = 1];
    if (has_spatial_potential_penalty()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpStSpeedOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DpStSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DpStSpeedOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpStSpeedOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DpStSpeedOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DpStSpeedOptimizerConfig)
    MergeFrom(*source);
  }
}

void DpStSpeedOptimizerConfig::MergeFrom(const DpStSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpStSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      reference_weight_ = from.reference_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_lane_changing_ = from.is_lane_changing_;
    }
    if (cached_has_bits & 0x00000008u) {
      dense_dimension_s_ = from.dense_dimension_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      unit_t_ = from.unit_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      dense_unit_s_ = from.dense_unit_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      sparse_unit_s_ = from.sparse_unit_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      accel_weight_ = from.accel_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      go_down_buffer_ = from.go_down_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      go_up_buffer_ = from.go_up_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_obstacle_cost_ = from.default_obstacle_cost_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_speed_cost_ = from.default_speed_cost_;
    }
    if (cached_has_bits & 0x00004000u) {
      exceed_speed_penalty_ = from.exceed_speed_penalty_;
    }
    if (cached_has_bits & 0x00008000u) {
      low_speed_penalty_ = from.low_speed_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      reference_speed_penalty_ = from.reference_speed_penalty_;
    }
    if (cached_has_bits & 0x00020000u) {
      keep_clear_low_speed_penalty_ = from.keep_clear_low_speed_penalty_;
    }
    if (cached_has_bits & 0x00040000u) {
      accel_penalty_ = from.accel_penalty_;
    }
    if (cached_has_bits & 0x00080000u) {
      decel_penalty_ = from.decel_penalty_;
    }
    if (cached_has_bits & 0x00100000u) {
      positive_jerk_coeff_ = from.positive_jerk_coeff_;
    }
    if (cached_has_bits & 0x00200000u) {
      negative_jerk_coeff_ = from.negative_jerk_coeff_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      safe_time_buffer_ = from.safe_time_buffer_;
    }
    if (cached_has_bits & 0x02000000u) {
      safe_distance_ = from.safe_distance_;
    }
    if (cached_has_bits & 0x04000000u) {
      spatial_potential_penalty_ = from.spatial_potential_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DpStSpeedOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DpStSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpStSpeedOptimizerConfig::CopyFrom(const DpStSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpStSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void DpStSpeedOptimizerConfig::Swap(DpStSpeedOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpStSpeedOptimizerConfig::InternalSwap(DpStSpeedOptimizerConfig* other) {
  using std::swap;
  swap(speed_weight_, other->speed_weight_);
  swap(reference_weight_, other->reference_weight_);
  swap(is_lane_changing_, other->is_lane_changing_);
  swap(dense_dimension_s_, other->dense_dimension_s_);
  swap(unit_t_, other->unit_t_);
  swap(dense_unit_s_, other->dense_unit_s_);
  swap(sparse_unit_s_, other->sparse_unit_s_);
  swap(accel_weight_, other->accel_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(go_down_buffer_, other->go_down_buffer_);
  swap(go_up_buffer_, other->go_up_buffer_);
  swap(default_obstacle_cost_, other->default_obstacle_cost_);
  swap(default_speed_cost_, other->default_speed_cost_);
  swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  swap(low_speed_penalty_, other->low_speed_penalty_);
  swap(reference_speed_penalty_, other->reference_speed_penalty_);
  swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  swap(accel_penalty_, other->accel_penalty_);
  swap(decel_penalty_, other->decel_penalty_);
  swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(safe_time_buffer_, other->safe_time_buffer_);
  swap(safe_distance_, other->safe_distance_);
  swap(spatial_potential_penalty_, other->spatial_potential_penalty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DpStSpeedOptimizerConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void STBoundsDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STBoundsDeciderConfig::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STBoundsDeciderConfig::STBoundsDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_task_5fconfig_2eproto::scc_info_STBoundsDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.STBoundsDeciderConfig)
}
STBoundsDeciderConfig::STBoundsDeciderConfig(const STBoundsDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_time_ = from.total_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.STBoundsDeciderConfig)
}

void STBoundsDeciderConfig::SharedCtor() {
  total_time_ = 7;
}

STBoundsDeciderConfig::~STBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.STBoundsDeciderConfig)
  SharedDtor();
}

void STBoundsDeciderConfig::SharedDtor() {
}

void STBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* STBoundsDeciderConfig::descriptor() {
  ::protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STBoundsDeciderConfig& STBoundsDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_task_5fconfig_2eproto::scc_info_STBoundsDeciderConfig.base);
  return *internal_default_instance();
}


void STBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.STBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  total_time_ = 7;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STBoundsDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.STBoundsDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time = 1 [default = 7];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.STBoundsDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.STBoundsDeciderConfig)
  return false;
#undef DO_
}

void STBoundsDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.STBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.STBoundsDeciderConfig)
}

::google::protobuf::uint8* STBoundsDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.STBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.STBoundsDeciderConfig)
  return target;
}

size_t STBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.STBoundsDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double total_time = 1 [default = 7];
  if (has_total_time()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STBoundsDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.STBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const STBoundsDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STBoundsDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.STBoundsDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.STBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void STBoundsDeciderConfig::MergeFrom(const STBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.STBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total_time()) {
    set_total_time(from.total_time());
  }
}

void STBoundsDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.STBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STBoundsDeciderConfig::CopyFrom(const STBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.STBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void STBoundsDeciderConfig::Swap(STBoundsDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STBoundsDeciderConfig::InternalSwap(STBoundsDeciderConfig* other) {
  using std::swap;
  swap(total_time_, other->total_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata STBoundsDeciderConfig::GetMetadata() const {
  protobuf_task_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_task_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CreepDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::CreepDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CreepDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LaneChangeDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::LaneChangeDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LaneChangeDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LearningModelInferenceTaskConfig* Arena::CreateMaybeMessage< ::apollo::planning::LearningModelInferenceTaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LearningModelInferenceTaskConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* Arena::CreateMaybeMessage< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::NaviObstacleDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviObstacleDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NaviObstacleDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviPathDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NaviPathDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::MoveDestLaneConfigTable* Arena::CreateMaybeMessage< ::apollo::planning::MoveDestLaneConfigTable >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MoveDestLaneConfigTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage< ::apollo::planning::ShiftConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ShiftConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviSpeedDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NaviSpeedDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathAssessmentDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathAssessmentDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathAssessmentDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathBoundsDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathLaneBorrowDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathLaneBorrowDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathLaneBorrowDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathReferenceDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathReferenceDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathReferenceDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PathReuseDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathReuseDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathReuseDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PiecewiseJerkPathOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkPathOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PiecewiseJerkPathOptimizerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PiecewiseJerkPathWeights* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkPathWeights >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PiecewiseJerkPathWeights >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::RuleBasedStopDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::RuleBasedStopDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RuleBasedStopDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::SpeedBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::SpeedBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SpeedBoundsDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::SpeedHeuristicOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::SpeedHeuristicOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SpeedHeuristicOptimizerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DpStSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::DpStSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DpStSpeedOptimizerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::STBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::STBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::STBoundsDeciderConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
